
Graduation_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004370  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000706  00800060  00004370  00004404  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000029  00800766  00800766  00004b0a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004b0a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00004b3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000498  00000000  00000000  00004b78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009c09  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001655  00000000  00000000  0000ec19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004a04  00000000  00000000  0001026e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000bf4  00000000  00000000  00014c74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000fb7  00000000  00000000  00015868  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004a2b  00000000  00000000  0001681f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000408  00000000  00000000  0001b24a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 84 0f 	jmp	0x1f08	; 0x1f08 <__vector_4>
      14:	0c 94 30 0f 	jmp	0x1e60	; 0x1e60 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__vector_10>
      2c:	0c 94 26 0e 	jmp	0x1c4c	; 0x1c4c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 24 10 	jmp	0x2048	; 0x2048 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 11 1f 	jmp	0x3e22	; 0x3e22 <__vector_15>
      40:	0c 94 6f 00 	jmp	0xde	; 0xde <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	17 e0       	ldi	r17, 0x07	; 7
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 36       	cpi	r26, 0x66	; 102
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	27 e0       	ldi	r18, 0x07	; 7
      78:	a6 e6       	ldi	r26, 0x66	; 102
      7a:	b7 e0       	ldi	r27, 0x07	; 7
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 38       	cpi	r26, 0x8F	; 143
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <main>
      8a:	0c 94 b6 21 	jmp	0x436c	; 0x436c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:
      92:	87 b1       	in	r24, 0x07	; 7
      94:	8f 73       	andi	r24, 0x3F	; 63
      96:	80 64       	ori	r24, 0x40	; 64
      98:	87 b9       	out	0x07, r24	; 7
      9a:	87 b1       	in	r24, 0x07	; 7
      9c:	8f 7d       	andi	r24, 0xDF	; 223
      9e:	87 b9       	out	0x07, r24	; 7
      a0:	86 b1       	in	r24, 0x06	; 6
      a2:	80 62       	ori	r24, 0x20	; 32
      a4:	86 b9       	out	0x06, r24	; 6
      a6:	80 b7       	in	r24, 0x30	; 48
      a8:	8f 71       	andi	r24, 0x1F	; 31
      aa:	80 bf       	out	0x30, r24	; 48
      ac:	86 b1       	in	r24, 0x06	; 6
      ae:	87 60       	ori	r24, 0x07	; 7
      b0:	86 b9       	out	0x06, r24	; 6
      b2:	8f b7       	in	r24, 0x3f	; 63
      b4:	80 68       	ori	r24, 0x80	; 128
      b6:	8f bf       	out	0x3f, r24	; 63
      b8:	86 b1       	in	r24, 0x06	; 6
      ba:	88 60       	ori	r24, 0x08	; 8
      bc:	86 b9       	out	0x06, r24	; 6
      be:	86 b1       	in	r24, 0x06	; 6
      c0:	80 68       	ori	r24, 0x80	; 128
      c2:	86 b9       	out	0x06, r24	; 6
      c4:	08 95       	ret

000000c6 <ADC_Read>:
      c6:	97 b1       	in	r25, 0x07	; 7
      c8:	90 7e       	andi	r25, 0xE0	; 224
      ca:	89 2b       	or	r24, r25
      cc:	87 b9       	out	0x07, r24	; 7
      ce:	86 b1       	in	r24, 0x06	; 6
      d0:	80 64       	ori	r24, 0x40	; 64
      d2:	86 b9       	out	0x06, r24	; 6
      d4:	34 9b       	sbis	0x06, 4	; 6
      d6:	fe cf       	rjmp	.-4      	; 0xd4 <ADC_Read+0xe>
      d8:	84 b1       	in	r24, 0x04	; 4
      da:	95 b1       	in	r25, 0x05	; 5
      dc:	08 95       	ret

000000de <__vector_16>:
      de:	1f 92       	push	r1
      e0:	0f 92       	push	r0
      e2:	0f b6       	in	r0, 0x3f	; 63
      e4:	0f 92       	push	r0
      e6:	11 24       	eor	r1, r1
      e8:	2f 93       	push	r18
      ea:	3f 93       	push	r19
      ec:	4f 93       	push	r20
      ee:	5f 93       	push	r21
      f0:	6f 93       	push	r22
      f2:	7f 93       	push	r23
      f4:	8f 93       	push	r24
      f6:	9f 93       	push	r25
      f8:	af 93       	push	r26
      fa:	bf 93       	push	r27
      fc:	ef 93       	push	r30
      fe:	ff 93       	push	r31
     100:	87 e0       	ldi	r24, 0x07	; 7
     102:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_Read>
     106:	22 e3       	ldi	r18, 0x32	; 50
     108:	ac 01       	movw	r20, r24
     10a:	24 9f       	mul	r18, r20
     10c:	c0 01       	movw	r24, r0
     10e:	25 9f       	mul	r18, r21
     110:	90 0d       	add	r25, r0
     112:	11 24       	eor	r1, r1
     114:	89 2f       	mov	r24, r25
     116:	99 27       	eor	r25, r25
     118:	86 95       	lsr	r24
     11a:	86 95       	lsr	r24
     11c:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <__data_end+0x1>
     120:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <__data_end>
     124:	4c 97       	sbiw	r24, 0x1c	; 28
     126:	38 f0       	brcs	.+14     	; 0x136 <__vector_16+0x58>
     128:	41 e0       	ldi	r20, 0x01	; 1
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	70 e0       	ldi	r23, 0x00	; 0
     12e:	88 ec       	ldi	r24, 0xC8	; 200
     130:	92 e4       	ldi	r25, 0x42	; 66
     132:	0e 94 26 03 	call	0x64c	; 0x64c <DC_Motor1_START>
     136:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <__data_end>
     13a:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <__data_end+0x1>
     13e:	46 97       	sbiw	r24, 0x16	; 22
     140:	10 f4       	brcc	.+4      	; 0x146 <__vector_16+0x68>
     142:	0e 94 41 03 	call	0x682	; 0x682 <DC_Motor1_STOP>
     146:	ff 91       	pop	r31
     148:	ef 91       	pop	r30
     14a:	bf 91       	pop	r27
     14c:	af 91       	pop	r26
     14e:	9f 91       	pop	r25
     150:	8f 91       	pop	r24
     152:	7f 91       	pop	r23
     154:	6f 91       	pop	r22
     156:	5f 91       	pop	r21
     158:	4f 91       	pop	r20
     15a:	3f 91       	pop	r19
     15c:	2f 91       	pop	r18
     15e:	0f 90       	pop	r0
     160:	0f be       	out	0x3f, r0	; 63
     162:	0f 90       	pop	r0
     164:	1f 90       	pop	r1
     166:	18 95       	reti

00000168 <Buzzer_Init>:
     168:	41 e0       	ldi	r20, 0x01	; 1
     16a:	67 e0       	ldi	r22, 0x07	; 7
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
     172:	41 e0       	ldi	r20, 0x01	; 1
     174:	67 e0       	ldi	r22, 0x07	; 7
     176:	82 e0       	ldi	r24, 0x02	; 2
     178:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     17c:	08 95       	ret

0000017e <Buzzer_ON>:
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	67 e0       	ldi	r22, 0x07	; 7
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     188:	08 95       	ret

0000018a <Buzzer_OFF>:
     18a:	41 e0       	ldi	r20, 0x01	; 1
     18c:	67 e0       	ldi	r22, 0x07	; 7
     18e:	82 e0       	ldi	r24, 0x02	; 2
     190:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     194:	08 95       	ret

00000196 <Buzzer_Toggle>:
     196:	67 e0       	ldi	r22, 0x07	; 7
     198:	82 e0       	ldi	r24, 0x02	; 2
     19a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <DIO_TogglePin_Value>
     19e:	08 95       	ret

000001a0 <emergency_case>:
extern f32 Dimmer_Value;
extern Uint8 Dimmer_Array[3];
extern Uint8 eme_check;

void emergency_case(void)
{
     1a0:	cf 92       	push	r12
     1a2:	df 92       	push	r13
     1a4:	ef 92       	push	r14
     1a6:	ff 92       	push	r15
     1a8:	cf 93       	push	r28
     1aa:	df 93       	push	r29
	LCD_Clear();
     1ac:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
	LCD_Write_String("1.open lamps");
     1b0:	81 e7       	ldi	r24, 0x71	; 113
     1b2:	90 e0       	ldi	r25, 0x00	; 0
     1b4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
	LCD_Goto(1,0);
     1b8:	60 e0       	ldi	r22, 0x00	; 0
     1ba:	81 e0       	ldi	r24, 0x01	; 1
     1bc:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
	LCD_Write_String("2.more");
     1c0:	8e e7       	ldi	r24, 0x7E	; 126
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
	button=NULL_KEYPAD;
     1c8:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
	
	while(!(button == '1' || button == '2' ) && eme_check)
     1cc:	04 c0       	rjmp	.+8      	; 0x1d6 <emergency_case+0x36>
	button=Keypad_GetValue();
     1ce:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     1d2:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
	LCD_Write_String("1.open lamps");
	LCD_Goto(1,0);
	LCD_Write_String("2.more");
	button=NULL_KEYPAD;
	
	while(!(button == '1' || button == '2' ) && eme_check)
     1d6:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     1da:	9f ec       	ldi	r25, 0xCF	; 207
     1dc:	98 0f       	add	r25, r24
     1de:	92 30       	cpi	r25, 0x02	; 2
     1e0:	20 f0       	brcs	.+8      	; 0x1ea <emergency_case+0x4a>
     1e2:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     1e6:	91 11       	cpse	r25, r1
     1e8:	f2 cf       	rjmp	.-28     	; 0x1ce <emergency_case+0x2e>
	button=Keypad_GetValue();
	
	
	if(button=='1')
     1ea:	81 33       	cpi	r24, 0x31	; 49
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <emergency_case+0x50>
     1ee:	68 c0       	rjmp	.+208    	; 0x2c0 <emergency_case+0x120>
	{
		LCD_Clear();
     1f0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
		LCD_Write_String("1.lamp1  2.lamp2");
     1f4:	85 e8       	ldi	r24, 0x85	; 133
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
		LCD_Goto(1,0);
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
		LCD_Write_String("3.lamp3  4.more");
     204:	86 e9       	ldi	r24, 0x96	; 150
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
		
		button=NULL_KEYPAD;
     20c:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
		while(!(button == '1' || button == '2' || button == '3' || button == '4') && eme_check)
     210:	04 c0       	rjmp	.+8      	; 0x21a <emergency_case+0x7a>
		button=Keypad_GetValue();
     212:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     216:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
		LCD_Write_String("1.lamp1  2.lamp2");
		LCD_Goto(1,0);
		LCD_Write_String("3.lamp3  4.more");
		
		button=NULL_KEYPAD;
		while(!(button == '1' || button == '2' || button == '3' || button == '4') && eme_check)
     21a:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     21e:	9f ec       	ldi	r25, 0xCF	; 207
     220:	98 0f       	add	r25, r24
     222:	94 30       	cpi	r25, 0x04	; 4
     224:	20 f0       	brcs	.+8      	; 0x22e <emergency_case+0x8e>
     226:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     22a:	91 11       	cpse	r25, r1
     22c:	f2 cf       	rjmp	.-28     	; 0x212 <emergency_case+0x72>
		button=Keypad_GetValue();
		
		if(button == '1')
     22e:	81 33       	cpi	r24, 0x31	; 49
     230:	19 f4       	brne	.+6      	; 0x238 <emergency_case+0x98>
		{
			LED0_ON();
     232:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
     236:	ee c1       	rjmp	.+988    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			
			
		}
		else if(button == '2')
     238:	82 33       	cpi	r24, 0x32	; 50
     23a:	19 f4       	brne	.+6      	; 0x242 <emergency_case+0xa2>
		{
			LED1_ON();
     23c:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED1_ON>
     240:	e9 c1       	rjmp	.+978    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			
			
		}
		else if(button == '3')
     242:	83 33       	cpi	r24, 0x33	; 51
     244:	19 f4       	brne	.+6      	; 0x24c <emergency_case+0xac>
		{
			LED2_ON();
     246:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     24a:	e4 c1       	rjmp	.+968    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			
		}
		else if(button == '4')
     24c:	84 33       	cpi	r24, 0x34	; 52
     24e:	09 f0       	breq	.+2      	; 0x252 <emergency_case+0xb2>
     250:	e1 c1       	rjmp	.+962    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
		{
			LCD_Clear();
     252:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
			LCD_Write_String("1.lamp4  2.lamp5");
     256:	86 ea       	ldi	r24, 0xA6	; 166
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
			LCD_Goto(1,0);
     25e:	60 e0       	ldi	r22, 0x00	; 0
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
			LCD_Write_String("3.all lamps");
     266:	87 eb       	ldi	r24, 0xB7	; 183
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
			
			button=NULL_KEYPAD;
     26e:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
			while(!(button == '1' || button == '2' || button == '3' ) && eme_check)
     272:	04 c0       	rjmp	.+8      	; 0x27c <emergency_case+0xdc>
			button=Keypad_GetValue();
     274:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     278:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
			LCD_Write_String("1.lamp4  2.lamp5");
			LCD_Goto(1,0);
			LCD_Write_String("3.all lamps");
			
			button=NULL_KEYPAD;
			while(!(button == '1' || button == '2' || button == '3' ) && eme_check)
     27c:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     280:	9f ec       	ldi	r25, 0xCF	; 207
     282:	98 0f       	add	r25, r24
     284:	93 30       	cpi	r25, 0x03	; 3
     286:	20 f0       	brcs	.+8      	; 0x290 <emergency_case+0xf0>
     288:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     28c:	91 11       	cpse	r25, r1
     28e:	f2 cf       	rjmp	.-28     	; 0x274 <emergency_case+0xd4>
			button=Keypad_GetValue();
			if (button == '1')
     290:	81 33       	cpi	r24, 0x31	; 49
     292:	19 f4       	brne	.+6      	; 0x29a <emergency_case+0xfa>
			{
				LED3_ON();
     294:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
     298:	bd c1       	rjmp	.+890    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
				
			}
			else if(button == '2')
     29a:	82 33       	cpi	r24, 0x32	; 50
     29c:	19 f4       	brne	.+6      	; 0x2a4 <emergency_case+0x104>
			{
				LED4_ON();
     29e:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LED4_ON>
     2a2:	b8 c1       	rjmp	.+880    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
				
			}
			else if(button == '3')
     2a4:	83 33       	cpi	r24, 0x33	; 51
     2a6:	09 f0       	breq	.+2      	; 0x2aa <emergency_case+0x10a>
     2a8:	b5 c1       	rjmp	.+874    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			{
				LED0_ON();
     2aa:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
				LED1_ON();
     2ae:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED1_ON>
				LED2_ON();
     2b2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
				LED3_ON();
     2b6:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
				LED4_ON();
     2ba:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LED4_ON>
     2be:	aa c1       	rjmp	.+852    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			
		}

	}
	
	else if(button=='2')
     2c0:	82 33       	cpi	r24, 0x32	; 50
     2c2:	09 f0       	breq	.+2      	; 0x2c6 <emergency_case+0x126>
     2c4:	a7 c1       	rjmp	.+846    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>

	{
		LCD_Clear();
     2c6:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
		LCD_Write_String("3.close lamps");
     2ca:	83 ec       	ldi	r24, 0xC3	; 195
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
		LCD_Goto(1,0);
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
		LCD_Write_String("4.more");
     2da:	8f e9       	ldi	r24, 0x9F	; 159
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
		button=NULL_KEYPAD;
     2e2:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
		while(!(button == '3' || button == '4' ) && eme_check)
     2e6:	04 c0       	rjmp	.+8      	; 0x2f0 <emergency_case+0x150>
		button=Keypad_GetValue();
     2e8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     2ec:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
		LCD_Clear();
		LCD_Write_String("3.close lamps");
		LCD_Goto(1,0);
		LCD_Write_String("4.more");
		button=NULL_KEYPAD;
		while(!(button == '3' || button == '4' ) && eme_check)
     2f0:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     2f4:	9d ec       	ldi	r25, 0xCD	; 205
     2f6:	98 0f       	add	r25, r24
     2f8:	92 30       	cpi	r25, 0x02	; 2
     2fa:	20 f0       	brcs	.+8      	; 0x304 <emergency_case+0x164>
     2fc:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     300:	91 11       	cpse	r25, r1
     302:	f2 cf       	rjmp	.-28     	; 0x2e8 <emergency_case+0x148>
		button=Keypad_GetValue();
		
		if(button == '3')
     304:	83 33       	cpi	r24, 0x33	; 51
     306:	09 f0       	breq	.+2      	; 0x30a <emergency_case+0x16a>
     308:	68 c0       	rjmp	.+208    	; 0x3da <emergency_case+0x23a>
		{
			LCD_Clear();
     30a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
			LCD_Write_String("1.lamp1  2.lamp2");
     30e:	85 e8       	ldi	r24, 0x85	; 133
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
			LCD_Goto(1,0);
     316:	60 e0       	ldi	r22, 0x00	; 0
     318:	81 e0       	ldi	r24, 0x01	; 1
     31a:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
			LCD_Write_String("3.lamp3  4.more");
     31e:	86 e9       	ldi	r24, 0x96	; 150
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
			
			button=NULL_KEYPAD;
     326:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
			while(!(button == '1' || button == '2' || button == '3' || button == '4' ) && eme_check)
     32a:	04 c0       	rjmp	.+8      	; 0x334 <emergency_case+0x194>
			button=Keypad_GetValue();
     32c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     330:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
			LCD_Write_String("1.lamp1  2.lamp2");
			LCD_Goto(1,0);
			LCD_Write_String("3.lamp3  4.more");
			
			button=NULL_KEYPAD;
			while(!(button == '1' || button == '2' || button == '3' || button == '4' ) && eme_check)
     334:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     338:	9f ec       	ldi	r25, 0xCF	; 207
     33a:	98 0f       	add	r25, r24
     33c:	94 30       	cpi	r25, 0x04	; 4
     33e:	20 f0       	brcs	.+8      	; 0x348 <emergency_case+0x1a8>
     340:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     344:	91 11       	cpse	r25, r1
     346:	f2 cf       	rjmp	.-28     	; 0x32c <emergency_case+0x18c>
			button=Keypad_GetValue();
			
			if(button == '1')
     348:	81 33       	cpi	r24, 0x31	; 49
     34a:	19 f4       	brne	.+6      	; 0x352 <emergency_case+0x1b2>
			{
				LED0_OFF();
     34c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
     350:	61 c1       	rjmp	.+706    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
				
			}
			else if(button == '2')
     352:	82 33       	cpi	r24, 0x32	; 50
     354:	19 f4       	brne	.+6      	; 0x35c <emergency_case+0x1bc>
			{
				LED1_OFF();
     356:	0e 94 cd 0c 	call	0x199a	; 0x199a <LED1_OFF>
     35a:	5c c1       	rjmp	.+696    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
				
			}
			else if(button == '3')
     35c:	83 33       	cpi	r24, 0x33	; 51
     35e:	19 f4       	brne	.+6      	; 0x366 <emergency_case+0x1c6>
			{
				LED2_OFF();
     360:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     364:	57 c1       	rjmp	.+686    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
				
			}
			
			
			else if(button== '4')
     366:	84 33       	cpi	r24, 0x34	; 52
     368:	09 f0       	breq	.+2      	; 0x36c <emergency_case+0x1cc>
     36a:	54 c1       	rjmp	.+680    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			{
				LCD_Clear();
     36c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("1.lamp4  2.lamp5");
     370:	86 ea       	ldi	r24, 0xA6	; 166
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Goto(1,0);
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	81 e0       	ldi	r24, 0x01	; 1
     37c:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
				LCD_Write_String("3.all lamps");
     380:	87 eb       	ldi	r24, 0xB7	; 183
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				
				button=NULL_KEYPAD;
     388:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
				while(!(button == '1' || button == '2' || button == '3' ) && eme_check)
     38c:	04 c0       	rjmp	.+8      	; 0x396 <emergency_case+0x1f6>
				button=Keypad_GetValue();
     38e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     392:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
				LCD_Write_String("1.lamp4  2.lamp5");
				LCD_Goto(1,0);
				LCD_Write_String("3.all lamps");
				
				button=NULL_KEYPAD;
				while(!(button == '1' || button == '2' || button == '3' ) && eme_check)
     396:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     39a:	9f ec       	ldi	r25, 0xCF	; 207
     39c:	98 0f       	add	r25, r24
     39e:	93 30       	cpi	r25, 0x03	; 3
     3a0:	20 f0       	brcs	.+8      	; 0x3aa <emergency_case+0x20a>
     3a2:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     3a6:	91 11       	cpse	r25, r1
     3a8:	f2 cf       	rjmp	.-28     	; 0x38e <emergency_case+0x1ee>
				button=Keypad_GetValue();
				
				if(button=='1')
     3aa:	81 33       	cpi	r24, 0x31	; 49
     3ac:	19 f4       	brne	.+6      	; 0x3b4 <emergency_case+0x214>
				{
					LED3_OFF();
     3ae:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LED3_OFF>
     3b2:	30 c1       	rjmp	.+608    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
					
				}
				
				else if(button == '2')
     3b4:	82 33       	cpi	r24, 0x32	; 50
     3b6:	19 f4       	brne	.+6      	; 0x3be <emergency_case+0x21e>
				{
					LED4_OFF();
     3b8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LED4_OFF>
     3bc:	2b c1       	rjmp	.+598    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
					
				}
				else if(button == '3')
     3be:	83 33       	cpi	r24, 0x33	; 51
     3c0:	09 f0       	breq	.+2      	; 0x3c4 <emergency_case+0x224>
     3c2:	28 c1       	rjmp	.+592    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
				{
					LED0_OFF();
     3c4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED1_OFF();
     3c8:	0e 94 cd 0c 	call	0x199a	; 0x199a <LED1_OFF>
					LED2_OFF();
     3cc:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
					LED3_OFF();
     3d0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LED3_OFF>
					LED4_OFF();
     3d4:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LED4_OFF>
     3d8:	1d c1       	rjmp	.+570    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			
		}
		
		
		
		else if(button=='4')
     3da:	84 33       	cpi	r24, 0x34	; 52
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <emergency_case+0x240>
     3de:	1a c1       	rjmp	.+564    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
		{
			LCD_Clear();
     3e0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
			LCD_Write_String("5.variant lamp");
     3e4:	81 ed       	ldi	r24, 0xD1	; 209
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
			LCD_Goto(1,0);
     3ec:	60 e0       	ldi	r22, 0x00	; 0
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
			LCD_Write_String("6.more");
     3f4:	80 ee       	ldi	r24, 0xE0	; 224
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
			button=NULL_KEYPAD;
     3fc:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
			while(!(button == '5' || button == '6' ) && eme_check)
     400:	04 c0       	rjmp	.+8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
			button=Keypad_GetValue();
     402:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     406:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
			LCD_Clear();
			LCD_Write_String("5.variant lamp");
			LCD_Goto(1,0);
			LCD_Write_String("6.more");
			button=NULL_KEYPAD;
			while(!(button == '5' || button == '6' ) && eme_check)
     40a:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     40e:	9b ec       	ldi	r25, 0xCB	; 203
     410:	98 0f       	add	r25, r24
     412:	92 30       	cpi	r25, 0x02	; 2
     414:	20 f0       	brcs	.+8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
     416:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     41a:	91 11       	cpse	r25, r1
     41c:	f2 cf       	rjmp	.-28     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
			button=Keypad_GetValue();
			
			if(button =='5')
     41e:	85 33       	cpi	r24, 0x35	; 53
     420:	09 f0       	breq	.+2      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
     422:	b6 c0       	rjmp	.+364    	; 0x590 <__EEPROM_REGION_LENGTH__+0x190>
			{
				LCD_Clear();
     424:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Please enter the");
     428:	87 ee       	ldi	r24, 0xE7	; 231
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Goto(1,0);
     430:	60 e0       	ldi	r22, 0x00	; 0
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
				LCD_Write_String("% of the lamp");
     438:	88 ef       	ldi	r24, 0xF8	; 248
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				button=NULL_KEYPAD;
     440:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
				Dimmer_Value = 0;
     444:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <Dimmer_Value>
     448:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <Dimmer_Value+0x1>
     44c:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <Dimmer_Value+0x2>
     450:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <Dimmer_Value+0x3>
				
				for(Uint8 i = 0; i < 3; i++)
     454:	d0 e0       	ldi	r29, 0x00	; 0
     456:	45 c0       	rjmp	.+138    	; 0x4e2 <__EEPROM_REGION_LENGTH__+0xe2>
				{
					button=NULL_KEYPAD;
     458:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
					
					while(!(button >= '0' && button <= '9' || button == '*' || button == '#') && eme_check)
     45c:	04 c0       	rjmp	.+8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
					{
						button=Keypad_GetValue();
     45e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     462:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
				
				for(Uint8 i = 0; i < 3; i++)
				{
					button=NULL_KEYPAD;
					
					while(!(button >= '0' && button <= '9' || button == '*' || button == '#') && eme_check)
     466:	c0 91 68 07 	lds	r28, 0x0768	; 0x800768 <button>
     46a:	80 ed       	ldi	r24, 0xD0	; 208
     46c:	8c 0f       	add	r24, r28
     46e:	8a 30       	cpi	r24, 0x0A	; 10
     470:	40 f0       	brcs	.+16     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     472:	ca 32       	cpi	r28, 0x2A	; 42
     474:	31 f0       	breq	.+12     	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     476:	c3 32       	cpi	r28, 0x23	; 35
     478:	21 f0       	breq	.+8      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
     47a:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     47e:	91 11       	cpse	r25, r1
     480:	ee cf       	rjmp	.-36     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
					{
						button=Keypad_GetValue();
					}
					
					Dimmer_Array[i] = button;
     482:	ed 2f       	mov	r30, r29
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	ea 57       	subi	r30, 0x7A	; 122
     488:	f8 4f       	sbci	r31, 0xF8	; 248
     48a:	c0 83       	st	Z, r28
					
					if(Dimmer_Array[i] >= 48 && Dimmer_Array[i] <= 57)
     48c:	8a 30       	cpi	r24, 0x0A	; 10
     48e:	38 f5       	brcc	.+78     	; 0x4de <__EEPROM_REGION_LENGTH__+0xde>
					{
						Dimmer_Value = Dimmer_Value*10 + (Dimmer_Array[i]-48);
     490:	20 e0       	ldi	r18, 0x00	; 0
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	40 e2       	ldi	r20, 0x20	; 32
     496:	51 e4       	ldi	r21, 0x41	; 65
     498:	60 91 82 07 	lds	r22, 0x0782	; 0x800782 <Dimmer_Value>
     49c:	70 91 83 07 	lds	r23, 0x0783	; 0x800783 <Dimmer_Value+0x1>
     4a0:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <Dimmer_Value+0x2>
     4a4:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <Dimmer_Value+0x3>
     4a8:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__mulsf3>
     4ac:	6b 01       	movw	r12, r22
     4ae:	7c 01       	movw	r14, r24
     4b0:	6c 2f       	mov	r22, r28
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	60 53       	subi	r22, 0x30	; 48
     4b6:	71 09       	sbc	r23, r1
     4b8:	07 2e       	mov	r0, r23
     4ba:	00 0c       	add	r0, r0
     4bc:	88 0b       	sbc	r24, r24
     4be:	99 0b       	sbc	r25, r25
     4c0:	0e 94 30 20 	call	0x4060	; 0x4060 <__floatsisf>
     4c4:	a7 01       	movw	r20, r14
     4c6:	96 01       	movw	r18, r12
     4c8:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
     4cc:	60 93 82 07 	sts	0x0782, r22	; 0x800782 <Dimmer_Value>
     4d0:	70 93 83 07 	sts	0x0783, r23	; 0x800783 <Dimmer_Value+0x1>
     4d4:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <Dimmer_Value+0x2>
     4d8:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <Dimmer_Value+0x3>
     4dc:	01 c0       	rjmp	.+2      	; 0x4e0 <__EEPROM_REGION_LENGTH__+0xe0>
					}
					else
					{
						i = 5;
     4de:	d5 e0       	ldi	r29, 0x05	; 5
				LCD_Goto(1,0);
				LCD_Write_String("% of the lamp");
				button=NULL_KEYPAD;
				Dimmer_Value = 0;
				
				for(Uint8 i = 0; i < 3; i++)
     4e0:	df 5f       	subi	r29, 0xFF	; 255
     4e2:	d3 30       	cpi	r29, 0x03	; 3
     4e4:	08 f4       	brcc	.+2      	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
     4e6:	b8 cf       	rjmp	.-144    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
					{
						i = 5;
					}
				}
				
				if(Dimmer_Value >= 58 && Dimmer_Value <= 60)
     4e8:	c0 90 82 07 	lds	r12, 0x0782	; 0x800782 <Dimmer_Value>
     4ec:	d0 90 83 07 	lds	r13, 0x0783	; 0x800783 <Dimmer_Value+0x1>
     4f0:	e0 90 84 07 	lds	r14, 0x0784	; 0x800784 <Dimmer_Value+0x2>
     4f4:	f0 90 85 07 	lds	r15, 0x0785	; 0x800785 <Dimmer_Value+0x3>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	30 e0       	ldi	r19, 0x00	; 0
     4fc:	48 e6       	ldi	r20, 0x68	; 104
     4fe:	52 e4       	ldi	r21, 0x42	; 66
     500:	c7 01       	movw	r24, r14
     502:	b6 01       	movw	r22, r12
     504:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__gesf2>
     508:	88 23       	and	r24, r24
     50a:	bc f0       	brlt	.+46     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	40 e7       	ldi	r20, 0x70	; 112
     512:	52 e4       	ldi	r21, 0x42	; 66
     514:	c7 01       	movw	r24, r14
     516:	b6 01       	movw	r22, r12
     518:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
     51c:	18 16       	cp	r1, r24
     51e:	6c f0       	brlt	.+26     	; 0x53a <__EEPROM_REGION_LENGTH__+0x13a>
				{
					Dimmer_Value = 55;
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	ac e5       	ldi	r26, 0x5C	; 92
     526:	b2 e4       	ldi	r27, 0x42	; 66
     528:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <Dimmer_Value>
     52c:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <Dimmer_Value+0x1>
     530:	a0 93 84 07 	sts	0x0784, r26	; 0x800784 <Dimmer_Value+0x2>
     534:	b0 93 85 07 	sts	0x0785, r27	; 0x800785 <Dimmer_Value+0x3>
     538:	20 c0       	rjmp	.+64     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
				}
				else if(Dimmer_Value > 60 && Dimmer_Value <= 62)
     53a:	20 e0       	ldi	r18, 0x00	; 0
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	40 e7       	ldi	r20, 0x70	; 112
     540:	52 e4       	ldi	r21, 0x42	; 66
     542:	c7 01       	movw	r24, r14
     544:	b6 01       	movw	r22, r12
     546:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__gesf2>
     54a:	18 16       	cp	r1, r24
     54c:	b4 f4       	brge	.+44     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
     54e:	20 e0       	ldi	r18, 0x00	; 0
     550:	30 e0       	ldi	r19, 0x00	; 0
     552:	48 e7       	ldi	r20, 0x78	; 120
     554:	52 e4       	ldi	r21, 0x42	; 66
     556:	c7 01       	movw	r24, r14
     558:	b6 01       	movw	r22, r12
     55a:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
     55e:	18 16       	cp	r1, r24
     560:	64 f0       	brlt	.+24     	; 0x57a <__EEPROM_REGION_LENGTH__+0x17a>
				{
					Dimmer_Value = 65;
     562:	80 e0       	ldi	r24, 0x00	; 0
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	a2 e8       	ldi	r26, 0x82	; 130
     568:	b2 e4       	ldi	r27, 0x42	; 66
     56a:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <Dimmer_Value>
     56e:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <Dimmer_Value+0x1>
     572:	a0 93 84 07 	sts	0x0784, r26	; 0x800784 <Dimmer_Value+0x2>
     576:	b0 93 85 07 	sts	0x0785, r27	; 0x800785 <Dimmer_Value+0x3>
				}
				PWM0_Gen(Dimmer_Value);
     57a:	60 91 82 07 	lds	r22, 0x0782	; 0x800782 <Dimmer_Value>
     57e:	70 91 83 07 	lds	r23, 0x0783	; 0x800783 <Dimmer_Value+0x1>
     582:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <Dimmer_Value+0x2>
     586:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <Dimmer_Value+0x3>
     58a:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <PWM0_Gen>
     58e:	42 c0       	rjmp	.+132    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
				
				
			}
			
			else if(button=='6')
     590:	86 33       	cpi	r24, 0x36	; 54
     592:	09 f0       	breq	.+2      	; 0x596 <__EEPROM_REGION_LENGTH__+0x196>
     594:	3f c0       	rjmp	.+126    	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
			{
				LCD_Clear();
     596:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("7.Display Temp");
     59a:	86 e0       	ldi	r24, 0x06	; 6
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Goto(1,0);
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
				LCD_Write_String("8.Exit system");
     5aa:	85 e1       	ldi	r24, 0x15	; 21
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				
				button = NULL_KEYPAD;
     5b2:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
				while(!(button == '7' || button == '8') && eme_check)
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__EEPROM_REGION_LENGTH__+0x1c0>
					button = Keypad_GetValue();
     5b8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     5bc:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
				LCD_Write_String("7.Display Temp");
				LCD_Goto(1,0);
				LCD_Write_String("8.Exit system");
				
				button = NULL_KEYPAD;
				while(!(button == '7' || button == '8') && eme_check)
     5c0:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     5c4:	99 ec       	ldi	r25, 0xC9	; 201
     5c6:	98 0f       	add	r25, r24
     5c8:	92 30       	cpi	r25, 0x02	; 2
     5ca:	20 f0       	brcs	.+8      	; 0x5d4 <__EEPROM_REGION_LENGTH__+0x1d4>
     5cc:	90 91 69 07 	lds	r25, 0x0769	; 0x800769 <eme_check>
     5d0:	91 11       	cpse	r25, r1
     5d2:	f2 cf       	rjmp	.-28     	; 0x5b8 <__EEPROM_REGION_LENGTH__+0x1b8>
					button = Keypad_GetValue();
					
				if(button=='7')
     5d4:	87 33       	cpi	r24, 0x37	; 55
     5d6:	c1 f4       	brne	.+48     	; 0x608 <__EEPROM_REGION_LENGTH__+0x208>
				{
					// Display temperature
					LCD_Clear();
     5d8:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Temperature:");
     5dc:	83 e2       	ldi	r24, 0x23	; 35
     5de:	91 e0       	ldi	r25, 0x01	; 1
     5e0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
					LCD_Write_Integer(Temp);
     5e4:	60 91 66 07 	lds	r22, 0x0766	; 0x800766 <__data_end>
     5e8:	70 91 67 07 	lds	r23, 0x0767	; 0x800767 <__data_end+0x1>
     5ec:	80 e0       	ldi	r24, 0x00	; 0
     5ee:	90 e0       	ldi	r25, 0x00	; 0
     5f0:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_Write_Integer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5f4:	2f ef       	ldi	r18, 0xFF	; 255
     5f6:	83 ed       	ldi	r24, 0xD3	; 211
     5f8:	90 e3       	ldi	r25, 0x30	; 48
     5fa:	21 50       	subi	r18, 0x01	; 1
     5fc:	80 40       	sbci	r24, 0x00	; 0
     5fe:	90 40       	sbci	r25, 0x00	; 0
     600:	e1 f7       	brne	.-8      	; 0x5fa <__EEPROM_REGION_LENGTH__+0x1fa>
     602:	00 c0       	rjmp	.+0      	; 0x604 <__EEPROM_REGION_LENGTH__+0x204>
     604:	00 00       	nop
     606:	06 c0       	rjmp	.+12     	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
					_delay_ms(1000);
				}
				
				else if(button == '8')
     608:	88 33       	cpi	r24, 0x38	; 56
     60a:	21 f4       	brne	.+8      	; 0x614 <__EEPROM_REGION_LENGTH__+0x214>
				{
					eme_check = 0;
     60c:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <eme_check>
					LCD_Clear();
     610:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				}	
			}
		}
	}
}
     614:	df 91       	pop	r29
     616:	cf 91       	pop	r28
     618:	ff 90       	pop	r15
     61a:	ef 90       	pop	r14
     61c:	df 90       	pop	r13
     61e:	cf 90       	pop	r12
     620:	08 95       	ret

00000622 <DC_Motor1_INIT>:
     622:	41 e0       	ldi	r20, 0x01	; 1
     624:	63 e0       	ldi	r22, 0x03	; 3
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
     62c:	41 e0       	ldi	r20, 0x01	; 1
     62e:	66 e0       	ldi	r22, 0x06	; 6
     630:	83 e0       	ldi	r24, 0x03	; 3
     632:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
     636:	41 e0       	ldi	r20, 0x01	; 1
     638:	63 e0       	ldi	r22, 0x03	; 3
     63a:	83 e0       	ldi	r24, 0x03	; 3
     63c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     640:	41 e0       	ldi	r20, 0x01	; 1
     642:	66 e0       	ldi	r22, 0x06	; 6
     644:	83 e0       	ldi	r24, 0x03	; 3
     646:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     64a:	08 95       	ret

0000064c <DC_Motor1_START>:
     64c:	44 23       	and	r20, r20
     64e:	19 f0       	breq	.+6      	; 0x656 <DC_Motor1_START+0xa>
     650:	41 30       	cpi	r20, 0x01	; 1
     652:	61 f0       	breq	.+24     	; 0x66c <DC_Motor1_START+0x20>
     654:	08 95       	ret
     656:	40 e0       	ldi	r20, 0x00	; 0
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	83 e0       	ldi	r24, 0x03	; 3
     65c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     660:	41 e0       	ldi	r20, 0x01	; 1
     662:	66 e0       	ldi	r22, 0x06	; 6
     664:	83 e0       	ldi	r24, 0x03	; 3
     666:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     66a:	08 95       	ret
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	63 e0       	ldi	r22, 0x03	; 3
     670:	83 e0       	ldi	r24, 0x03	; 3
     672:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     676:	40 e0       	ldi	r20, 0x00	; 0
     678:	66 e0       	ldi	r22, 0x06	; 6
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     680:	08 95       	ret

00000682 <DC_Motor1_STOP>:
     682:	41 e0       	ldi	r20, 0x01	; 1
     684:	63 e0       	ldi	r22, 0x03	; 3
     686:	83 e0       	ldi	r24, 0x03	; 3
     688:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	66 e0       	ldi	r22, 0x06	; 6
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
     696:	08 95       	ret

00000698 <DIO_SetPin_Dir>:
     698:	44 23       	and	r20, r20
     69a:	19 f0       	breq	.+6      	; 0x6a2 <DIO_SetPin_Dir+0xa>
     69c:	41 30       	cpi	r20, 0x01	; 1
     69e:	c9 f1       	breq	.+114    	; 0x712 <DIO_SetPin_Dir+0x7a>
     6a0:	08 95       	ret
     6a2:	81 30       	cpi	r24, 0x01	; 1
     6a4:	91 f0       	breq	.+36     	; 0x6ca <DIO_SetPin_Dir+0x32>
     6a6:	28 f0       	brcs	.+10     	; 0x6b2 <DIO_SetPin_Dir+0x1a>
     6a8:	82 30       	cpi	r24, 0x02	; 2
     6aa:	d9 f0       	breq	.+54     	; 0x6e2 <DIO_SetPin_Dir+0x4a>
     6ac:	83 30       	cpi	r24, 0x03	; 3
     6ae:	29 f1       	breq	.+74     	; 0x6fa <DIO_SetPin_Dir+0x62>
     6b0:	08 95       	ret
     6b2:	2a b3       	in	r18, 0x1a	; 26
     6b4:	81 e0       	ldi	r24, 0x01	; 1
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	02 c0       	rjmp	.+4      	; 0x6be <DIO_SetPin_Dir+0x26>
     6ba:	88 0f       	add	r24, r24
     6bc:	99 1f       	adc	r25, r25
     6be:	6a 95       	dec	r22
     6c0:	e2 f7       	brpl	.-8      	; 0x6ba <DIO_SetPin_Dir+0x22>
     6c2:	80 95       	com	r24
     6c4:	82 23       	and	r24, r18
     6c6:	8a bb       	out	0x1a, r24	; 26
     6c8:	08 95       	ret
     6ca:	27 b3       	in	r18, 0x17	; 23
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	02 c0       	rjmp	.+4      	; 0x6d6 <DIO_SetPin_Dir+0x3e>
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	6a 95       	dec	r22
     6d8:	e2 f7       	brpl	.-8      	; 0x6d2 <DIO_SetPin_Dir+0x3a>
     6da:	80 95       	com	r24
     6dc:	82 23       	and	r24, r18
     6de:	87 bb       	out	0x17, r24	; 23
     6e0:	08 95       	ret
     6e2:	24 b3       	in	r18, 0x14	; 20
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	02 c0       	rjmp	.+4      	; 0x6ee <DIO_SetPin_Dir+0x56>
     6ea:	88 0f       	add	r24, r24
     6ec:	99 1f       	adc	r25, r25
     6ee:	6a 95       	dec	r22
     6f0:	e2 f7       	brpl	.-8      	; 0x6ea <DIO_SetPin_Dir+0x52>
     6f2:	80 95       	com	r24
     6f4:	82 23       	and	r24, r18
     6f6:	84 bb       	out	0x14, r24	; 20
     6f8:	08 95       	ret
     6fa:	21 b3       	in	r18, 0x11	; 17
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	02 c0       	rjmp	.+4      	; 0x706 <DIO_SetPin_Dir+0x6e>
     702:	88 0f       	add	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	6a 95       	dec	r22
     708:	e2 f7       	brpl	.-8      	; 0x702 <DIO_SetPin_Dir+0x6a>
     70a:	80 95       	com	r24
     70c:	82 23       	and	r24, r18
     70e:	81 bb       	out	0x11, r24	; 17
     710:	08 95       	ret
     712:	81 30       	cpi	r24, 0x01	; 1
     714:	89 f0       	breq	.+34     	; 0x738 <DIO_SetPin_Dir+0xa0>
     716:	28 f0       	brcs	.+10     	; 0x722 <DIO_SetPin_Dir+0x8a>
     718:	82 30       	cpi	r24, 0x02	; 2
     71a:	c9 f0       	breq	.+50     	; 0x74e <DIO_SetPin_Dir+0xb6>
     71c:	83 30       	cpi	r24, 0x03	; 3
     71e:	11 f1       	breq	.+68     	; 0x764 <DIO_SetPin_Dir+0xcc>
     720:	08 95       	ret
     722:	2a b3       	in	r18, 0x1a	; 26
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	02 c0       	rjmp	.+4      	; 0x72e <DIO_SetPin_Dir+0x96>
     72a:	88 0f       	add	r24, r24
     72c:	99 1f       	adc	r25, r25
     72e:	6a 95       	dec	r22
     730:	e2 f7       	brpl	.-8      	; 0x72a <DIO_SetPin_Dir+0x92>
     732:	82 2b       	or	r24, r18
     734:	8a bb       	out	0x1a, r24	; 26
     736:	08 95       	ret
     738:	27 b3       	in	r18, 0x17	; 23
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	02 c0       	rjmp	.+4      	; 0x744 <DIO_SetPin_Dir+0xac>
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	6a 95       	dec	r22
     746:	e2 f7       	brpl	.-8      	; 0x740 <DIO_SetPin_Dir+0xa8>
     748:	82 2b       	or	r24, r18
     74a:	87 bb       	out	0x17, r24	; 23
     74c:	08 95       	ret
     74e:	24 b3       	in	r18, 0x14	; 20
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	02 c0       	rjmp	.+4      	; 0x75a <DIO_SetPin_Dir+0xc2>
     756:	88 0f       	add	r24, r24
     758:	99 1f       	adc	r25, r25
     75a:	6a 95       	dec	r22
     75c:	e2 f7       	brpl	.-8      	; 0x756 <DIO_SetPin_Dir+0xbe>
     75e:	82 2b       	or	r24, r18
     760:	84 bb       	out	0x14, r24	; 20
     762:	08 95       	ret
     764:	21 b3       	in	r18, 0x11	; 17
     766:	81 e0       	ldi	r24, 0x01	; 1
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_SetPin_Dir+0xd8>
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	6a 95       	dec	r22
     772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_SetPin_Dir+0xd4>
     774:	82 2b       	or	r24, r18
     776:	81 bb       	out	0x11, r24	; 17
     778:	08 95       	ret

0000077a <DIO_SetPin_Value>:
     77a:	44 23       	and	r20, r20
     77c:	d9 f1       	breq	.+118    	; 0x7f4 <DIO_SetPin_Value+0x7a>
     77e:	41 30       	cpi	r20, 0x01	; 1
     780:	09 f0       	breq	.+2      	; 0x784 <DIO_SetPin_Value+0xa>
     782:	6b c0       	rjmp	.+214    	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
     784:	81 30       	cpi	r24, 0x01	; 1
     786:	91 f0       	breq	.+36     	; 0x7ac <DIO_SetPin_Value+0x32>
     788:	28 f0       	brcs	.+10     	; 0x794 <DIO_SetPin_Value+0x1a>
     78a:	82 30       	cpi	r24, 0x02	; 2
     78c:	d9 f0       	breq	.+54     	; 0x7c4 <DIO_SetPin_Value+0x4a>
     78e:	83 30       	cpi	r24, 0x03	; 3
     790:	29 f1       	breq	.+74     	; 0x7dc <DIO_SetPin_Value+0x62>
     792:	08 95       	ret
     794:	2b b3       	in	r18, 0x1b	; 27
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <DIO_SetPin_Value+0x26>
     79c:	88 0f       	add	r24, r24
     79e:	99 1f       	adc	r25, r25
     7a0:	6a 95       	dec	r22
     7a2:	e2 f7       	brpl	.-8      	; 0x79c <DIO_SetPin_Value+0x22>
     7a4:	80 95       	com	r24
     7a6:	82 23       	and	r24, r18
     7a8:	8b bb       	out	0x1b, r24	; 27
     7aa:	08 95       	ret
     7ac:	28 b3       	in	r18, 0x18	; 24
     7ae:	81 e0       	ldi	r24, 0x01	; 1
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <DIO_SetPin_Value+0x3e>
     7b4:	88 0f       	add	r24, r24
     7b6:	99 1f       	adc	r25, r25
     7b8:	6a 95       	dec	r22
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <DIO_SetPin_Value+0x3a>
     7bc:	80 95       	com	r24
     7be:	82 23       	and	r24, r18
     7c0:	88 bb       	out	0x18, r24	; 24
     7c2:	08 95       	ret
     7c4:	25 b3       	in	r18, 0x15	; 21
     7c6:	81 e0       	ldi	r24, 0x01	; 1
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <DIO_SetPin_Value+0x56>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	6a 95       	dec	r22
     7d2:	e2 f7       	brpl	.-8      	; 0x7cc <DIO_SetPin_Value+0x52>
     7d4:	80 95       	com	r24
     7d6:	82 23       	and	r24, r18
     7d8:	85 bb       	out	0x15, r24	; 21
     7da:	08 95       	ret
     7dc:	22 b3       	in	r18, 0x12	; 18
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <DIO_SetPin_Value+0x6e>
     7e4:	88 0f       	add	r24, r24
     7e6:	99 1f       	adc	r25, r25
     7e8:	6a 95       	dec	r22
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <DIO_SetPin_Value+0x6a>
     7ec:	80 95       	com	r24
     7ee:	82 23       	and	r24, r18
     7f0:	82 bb       	out	0x12, r24	; 18
     7f2:	08 95       	ret
     7f4:	81 30       	cpi	r24, 0x01	; 1
     7f6:	89 f0       	breq	.+34     	; 0x81a <__DATA_REGION_LENGTH__+0x1a>
     7f8:	28 f0       	brcs	.+10     	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     7fa:	82 30       	cpi	r24, 0x02	; 2
     7fc:	c9 f0       	breq	.+50     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
     7fe:	83 30       	cpi	r24, 0x03	; 3
     800:	11 f1       	breq	.+68     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
     802:	08 95       	ret
     804:	2b b3       	in	r18, 0x1b	; 27
     806:	81 e0       	ldi	r24, 0x01	; 1
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	02 c0       	rjmp	.+4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	6a 95       	dec	r22
     812:	e2 f7       	brpl	.-8      	; 0x80c <__DATA_REGION_LENGTH__+0xc>
     814:	82 2b       	or	r24, r18
     816:	8b bb       	out	0x1b, r24	; 27
     818:	08 95       	ret
     81a:	28 b3       	in	r18, 0x18	; 24
     81c:	81 e0       	ldi	r24, 0x01	; 1
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	02 c0       	rjmp	.+4      	; 0x826 <__DATA_REGION_LENGTH__+0x26>
     822:	88 0f       	add	r24, r24
     824:	99 1f       	adc	r25, r25
     826:	6a 95       	dec	r22
     828:	e2 f7       	brpl	.-8      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     82a:	82 2b       	or	r24, r18
     82c:	88 bb       	out	0x18, r24	; 24
     82e:	08 95       	ret
     830:	25 b3       	in	r18, 0x15	; 21
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	02 c0       	rjmp	.+4      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	6a 95       	dec	r22
     83e:	e2 f7       	brpl	.-8      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     840:	82 2b       	or	r24, r18
     842:	85 bb       	out	0x15, r24	; 21
     844:	08 95       	ret
     846:	22 b3       	in	r18, 0x12	; 18
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	02 c0       	rjmp	.+4      	; 0x852 <__DATA_REGION_LENGTH__+0x52>
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	6a 95       	dec	r22
     854:	e2 f7       	brpl	.-8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     856:	82 2b       	or	r24, r18
     858:	82 bb       	out	0x12, r24	; 18
     85a:	08 95       	ret

0000085c <DIO_GetPin_Value>:
     85c:	81 30       	cpi	r24, 0x01	; 1
     85e:	79 f0       	breq	.+30     	; 0x87e <__stack+0x1f>
     860:	28 f0       	brcs	.+10     	; 0x86c <__stack+0xd>
     862:	82 30       	cpi	r24, 0x02	; 2
     864:	a9 f0       	breq	.+42     	; 0x890 <__stack+0x31>
     866:	83 30       	cpi	r24, 0x03	; 3
     868:	e1 f0       	breq	.+56     	; 0x8a2 <__stack+0x43>
     86a:	24 c0       	rjmp	.+72     	; 0x8b4 <__stack+0x55>
     86c:	89 b3       	in	r24, 0x19	; 25
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	02 c0       	rjmp	.+4      	; 0x876 <__stack+0x17>
     872:	95 95       	asr	r25
     874:	87 95       	ror	r24
     876:	6a 95       	dec	r22
     878:	e2 f7       	brpl	.-8      	; 0x872 <__stack+0x13>
     87a:	81 70       	andi	r24, 0x01	; 1
     87c:	08 95       	ret
     87e:	86 b3       	in	r24, 0x16	; 22
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	02 c0       	rjmp	.+4      	; 0x888 <__stack+0x29>
     884:	95 95       	asr	r25
     886:	87 95       	ror	r24
     888:	6a 95       	dec	r22
     88a:	e2 f7       	brpl	.-8      	; 0x884 <__stack+0x25>
     88c:	81 70       	andi	r24, 0x01	; 1
     88e:	08 95       	ret
     890:	83 b3       	in	r24, 0x13	; 19
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	02 c0       	rjmp	.+4      	; 0x89a <__stack+0x3b>
     896:	95 95       	asr	r25
     898:	87 95       	ror	r24
     89a:	6a 95       	dec	r22
     89c:	e2 f7       	brpl	.-8      	; 0x896 <__stack+0x37>
     89e:	81 70       	andi	r24, 0x01	; 1
     8a0:	08 95       	ret
     8a2:	80 b3       	in	r24, 0x10	; 16
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__stack+0x4d>
     8a8:	95 95       	asr	r25
     8aa:	87 95       	ror	r24
     8ac:	6a 95       	dec	r22
     8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <__stack+0x49>
     8b0:	81 70       	andi	r24, 0x01	; 1
     8b2:	08 95       	ret
     8b4:	80 e0       	ldi	r24, 0x00	; 0
     8b6:	08 95       	ret

000008b8 <DIO_TogglePin_Value>:
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	89 f0       	breq	.+34     	; 0x8de <DIO_TogglePin_Value+0x26>
     8bc:	28 f0       	brcs	.+10     	; 0x8c8 <DIO_TogglePin_Value+0x10>
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	c9 f0       	breq	.+50     	; 0x8f4 <DIO_TogglePin_Value+0x3c>
     8c2:	83 30       	cpi	r24, 0x03	; 3
     8c4:	11 f1       	breq	.+68     	; 0x90a <DIO_TogglePin_Value+0x52>
     8c6:	08 95       	ret
     8c8:	2b b3       	in	r18, 0x1b	; 27
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <DIO_TogglePin_Value+0x1c>
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	6a 95       	dec	r22
     8d6:	e2 f7       	brpl	.-8      	; 0x8d0 <DIO_TogglePin_Value+0x18>
     8d8:	82 27       	eor	r24, r18
     8da:	8b bb       	out	0x1b, r24	; 27
     8dc:	08 95       	ret
     8de:	28 b3       	in	r18, 0x18	; 24
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <DIO_TogglePin_Value+0x32>
     8e6:	88 0f       	add	r24, r24
     8e8:	99 1f       	adc	r25, r25
     8ea:	6a 95       	dec	r22
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <DIO_TogglePin_Value+0x2e>
     8ee:	82 27       	eor	r24, r18
     8f0:	88 bb       	out	0x18, r24	; 24
     8f2:	08 95       	ret
     8f4:	25 b3       	in	r18, 0x15	; 21
     8f6:	81 e0       	ldi	r24, 0x01	; 1
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	02 c0       	rjmp	.+4      	; 0x900 <DIO_TogglePin_Value+0x48>
     8fc:	88 0f       	add	r24, r24
     8fe:	99 1f       	adc	r25, r25
     900:	6a 95       	dec	r22
     902:	e2 f7       	brpl	.-8      	; 0x8fc <DIO_TogglePin_Value+0x44>
     904:	82 27       	eor	r24, r18
     906:	85 bb       	out	0x15, r24	; 21
     908:	08 95       	ret
     90a:	22 b3       	in	r18, 0x12	; 18
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	02 c0       	rjmp	.+4      	; 0x916 <DIO_TogglePin_Value+0x5e>
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	6a 95       	dec	r22
     918:	e2 f7       	brpl	.-8      	; 0x912 <DIO_TogglePin_Value+0x5a>
     91a:	82 27       	eor	r24, r18
     91c:	82 bb       	out	0x12, r24	; 18
     91e:	08 95       	ret

00000920 <DIO_SetPin_Pullup>:
     920:	81 30       	cpi	r24, 0x01	; 1
     922:	89 f0       	breq	.+34     	; 0x946 <DIO_SetPin_Pullup+0x26>
     924:	28 f0       	brcs	.+10     	; 0x930 <DIO_SetPin_Pullup+0x10>
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	c9 f0       	breq	.+50     	; 0x95c <DIO_SetPin_Pullup+0x3c>
     92a:	83 30       	cpi	r24, 0x03	; 3
     92c:	11 f1       	breq	.+68     	; 0x972 <DIO_SetPin_Pullup+0x52>
     92e:	08 95       	ret
     930:	2b b3       	in	r18, 0x1b	; 27
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_SetPin_Pullup+0x1c>
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	6a 95       	dec	r22
     93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_SetPin_Pullup+0x18>
     940:	82 2b       	or	r24, r18
     942:	8b bb       	out	0x1b, r24	; 27
     944:	08 95       	ret
     946:	28 b3       	in	r18, 0x18	; 24
     948:	81 e0       	ldi	r24, 0x01	; 1
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	02 c0       	rjmp	.+4      	; 0x952 <DIO_SetPin_Pullup+0x32>
     94e:	88 0f       	add	r24, r24
     950:	99 1f       	adc	r25, r25
     952:	6a 95       	dec	r22
     954:	e2 f7       	brpl	.-8      	; 0x94e <DIO_SetPin_Pullup+0x2e>
     956:	82 2b       	or	r24, r18
     958:	88 bb       	out	0x18, r24	; 24
     95a:	08 95       	ret
     95c:	25 b3       	in	r18, 0x15	; 21
     95e:	81 e0       	ldi	r24, 0x01	; 1
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	02 c0       	rjmp	.+4      	; 0x968 <DIO_SetPin_Pullup+0x48>
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	6a 95       	dec	r22
     96a:	e2 f7       	brpl	.-8      	; 0x964 <DIO_SetPin_Pullup+0x44>
     96c:	82 2b       	or	r24, r18
     96e:	85 bb       	out	0x15, r24	; 21
     970:	08 95       	ret
     972:	22 b3       	in	r18, 0x12	; 18
     974:	81 e0       	ldi	r24, 0x01	; 1
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	02 c0       	rjmp	.+4      	; 0x97e <DIO_SetPin_Pullup+0x5e>
     97a:	88 0f       	add	r24, r24
     97c:	99 1f       	adc	r25, r25
     97e:	6a 95       	dec	r22
     980:	e2 f7       	brpl	.-8      	; 0x97a <DIO_SetPin_Pullup+0x5a>
     982:	82 2b       	or	r24, r18
     984:	82 bb       	out	0x12, r24	; 18
     986:	08 95       	ret

00000988 <EEPROM_INIT>:
     988:	0e 94 4f 0a 	call	0x149e	; 0x149e <I2C_INIT>
     98c:	08 95       	ret

0000098e <EEPROM_WriteByte>:
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	16 2f       	mov	r17, r22
     996:	d4 2f       	mov	r29, r20
     998:	88 30       	cpi	r24, 0x08	; 8
     99a:	08 f0       	brcs	.+2      	; 0x99e <EEPROM_WriteByte+0x10>
     99c:	87 e0       	ldi	r24, 0x07	; 7
     99e:	c8 2f       	mov	r28, r24
     9a0:	c0 65       	ori	r28, 0x50	; 80
     9a2:	0e 94 57 0a 	call	0x14ae	; 0x14ae <I2C_SendStartCond>
     9a6:	8c 2f       	mov	r24, r28
     9a8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <I2C_SendSlaveAdd_WriteOP>
     9ac:	81 2f       	mov	r24, r17
     9ae:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <I2C_SendData>
     9b2:	8d 2f       	mov	r24, r29
     9b4:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <I2C_SendData>
     9b8:	0e 94 8d 0a 	call	0x151a	; 0x151a <I2C_SendStopCond>
     9bc:	8f e3       	ldi	r24, 0x3F	; 63
     9be:	9c e9       	ldi	r25, 0x9C	; 156
     9c0:	01 97       	sbiw	r24, 0x01	; 1
     9c2:	f1 f7       	brne	.-4      	; 0x9c0 <EEPROM_WriteByte+0x32>
     9c4:	00 c0       	rjmp	.+0      	; 0x9c6 <EEPROM_WriteByte+0x38>
     9c6:	00 00       	nop
     9c8:	df 91       	pop	r29
     9ca:	cf 91       	pop	r28
     9cc:	1f 91       	pop	r17
     9ce:	08 95       	ret

000009d0 <EEPROM_ReadByte>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	d6 2f       	mov	r29, r22
     9d6:	88 30       	cpi	r24, 0x08	; 8
     9d8:	08 f0       	brcs	.+2      	; 0x9dc <EEPROM_ReadByte+0xc>
     9da:	87 e0       	ldi	r24, 0x07	; 7
     9dc:	c8 2f       	mov	r28, r24
     9de:	c0 65       	ori	r28, 0x50	; 80
     9e0:	0e 94 57 0a 	call	0x14ae	; 0x14ae <I2C_SendStartCond>
     9e4:	8c 2f       	mov	r24, r28
     9e6:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <I2C_SendSlaveAdd_WriteOP>
     9ea:	8d 2f       	mov	r24, r29
     9ec:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <I2C_SendData>
     9f0:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <I2C_SendRepStartCond>
     9f4:	8c 2f       	mov	r24, r28
     9f6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <I2C_SendSlaveAdd_ReadOP>
     9fa:	0e 94 86 0a 	call	0x150c	; 0x150c <I2C_ReadData>
     9fe:	c8 2f       	mov	r28, r24
     a00:	0e 94 8d 0a 	call	0x151a	; 0x151a <I2C_SendStopCond>
     a04:	8c 2f       	mov	r24, r28
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	08 95       	ret

00000a0c <INT0_Init>:
	
	/*INT0 Pin Direction*/
	DIO_SetPin_Dir(DIO_PORTB, PIN_2, PIN_IN);
	
	/*EXT INT0 Trigger*/
	MCUCR |= EXT_INT2_Trigger;
     a0c:	8f b7       	in	r24, 0x3f	; 63
     a0e:	80 68       	ori	r24, 0x80	; 128
     a10:	8f bf       	out	0x3f, r24	; 63
     a12:	8b b7       	in	r24, 0x3b	; 59
     a14:	80 64       	ori	r24, 0x40	; 64
     a16:	8b bf       	out	0x3b, r24	; 59
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	62 e0       	ldi	r22, 0x02	; 2
     a1c:	83 e0       	ldi	r24, 0x03	; 3
     a1e:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
     a22:	85 b7       	in	r24, 0x35	; 53
     a24:	82 60       	ori	r24, 0x02	; 2
     a26:	85 bf       	out	0x35, r24	; 53
     a28:	08 95       	ret

00000a2a <__vector_1>:
}

ISR(INT0_vect)
{
     a2a:	1f 92       	push	r1
     a2c:	0f 92       	push	r0
     a2e:	0f b6       	in	r0, 0x3f	; 63
     a30:	0f 92       	push	r0
     a32:	11 24       	eor	r1, r1
     a34:	2f 92       	push	r2
     a36:	3f 92       	push	r3
     a38:	4f 92       	push	r4
     a3a:	5f 92       	push	r5
     a3c:	7f 92       	push	r7
     a3e:	8f 92       	push	r8
     a40:	9f 92       	push	r9
     a42:	af 92       	push	r10
     a44:	bf 92       	push	r11
     a46:	cf 92       	push	r12
     a48:	df 92       	push	r13
     a4a:	ef 92       	push	r14
     a4c:	ff 92       	push	r15
     a4e:	0f 93       	push	r16
     a50:	1f 93       	push	r17
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	28 97       	sbiw	r28, 0x08	; 8
     a74:	de bf       	out	0x3e, r29	; 62
     a76:	cd bf       	out	0x3d, r28	; 61
	// Write the first external interrupt handler here
	if(!eme_check)
     a78:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
     a7c:	90 91 6a 07 	lds	r25, 0x076A	; 0x80076a <eme_check+0x1>
     a80:	89 2b       	or	r24, r25
     a82:	09 f0       	breq	.+2      	; 0xa86 <__vector_1+0x5c>
     a84:	e4 c4       	rjmp	.+2504   	; 0x144e <__vector_1+0xa24>
	{
		Uint8 k = 0;
		Uint8 i=0;
		Uint8 user[2][4];
		LCD_Clear();
     a86:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
		UART_TX_Str("\r\n");
     a8a:	89 eb       	ldi	r24, 0xB9	; 185
     a8c:	92 e0       	ldi	r25, 0x02	; 2
     a8e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("The system is busy!\r\n");
     a92:	80 e3       	ldi	r24, 0x30	; 48
     a94:	91 e0       	ldi	r25, 0x01	; 1
     a96:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		Servoo_Motor(97);
     a9a:	61 e6       	ldi	r22, 0x61	; 97
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	80 e0       	ldi	r24, 0x00	; 0
     aa0:	90 e0       	ldi	r25, 0x00	; 0
     aa2:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Servoo_Motor>
	
		for(Uint8 j = 0; j < 3; j++)
     aa6:	71 2c       	mov	r7, r1
ISR(INT0_vect)
{
	// Write the first external interrupt handler here
	if(!eme_check)
	{
		Uint8 k = 0;
     aa8:	00 e0       	ldi	r16, 0x00	; 0
		LCD_Clear();
		UART_TX_Str("\r\n");
		UART_TX_Str("The system is busy!\r\n");
		Servoo_Motor(97);
	
		for(Uint8 j = 0; j < 3; j++)
     aaa:	bd c4       	rjmp	.+2426   	; 0x1426 <__vector_1+0x9fc>
		{
			i=0;
		
			LCD_Write_String("user name:");
     aac:	86 e4       	ldi	r24, 0x46	; 70
     aae:	91 e0       	ldi	r25, 0x01	; 1
     ab0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
		UART_TX_Str("The system is busy!\r\n");
		Servoo_Motor(97);
	
		for(Uint8 j = 0; j < 3; j++)
		{
			i=0;
     ab4:	10 e0       	ldi	r17, 0x00	; 0
		
			LCD_Write_String("user name:");
		
			while(i<4)
     ab6:	15 c0       	rjmp	.+42     	; 0xae2 <__vector_1+0xb8>
			{
		
		
		
				button=Keypad_GetValue();
     ab8:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     abc:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
				while(button != NULL_KEYPAD)
     ac0:	0c c0       	rjmp	.+24     	; 0xada <__vector_1+0xb0>
				{
					user[0][i]=button;
     ac2:	e1 e0       	ldi	r30, 0x01	; 1
     ac4:	f0 e0       	ldi	r31, 0x00	; 0
     ac6:	ec 0f       	add	r30, r28
     ac8:	fd 1f       	adc	r31, r29
     aca:	e1 0f       	add	r30, r17
     acc:	f1 1d       	adc	r31, r1
     ace:	80 83       	st	Z, r24
					LCD_Write_Char(button);
     ad0:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_Write_Char>
					button=NULL_KEYPAD;
     ad4:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
					i++;
     ad8:	1f 5f       	subi	r17, 0xFF	; 255
			{
		
		
		
				button=Keypad_GetValue();
				while(button != NULL_KEYPAD)
     ada:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     ade:	81 11       	cpse	r24, r1
     ae0:	f0 cf       	rjmp	.-32     	; 0xac2 <__vector_1+0x98>
		{
			i=0;
		
			LCD_Write_String("user name:");
		
			while(i<4)
     ae2:	14 30       	cpi	r17, 0x04	; 4
     ae4:	48 f3       	brcs	.-46     	; 0xab8 <__vector_1+0x8e>
					i++;
				}
		
			}
			i=0;
			LCD_Goto(1,0);
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
			LCD_Write_String("password:");
     aee:	81 e5       	ldi	r24, 0x51	; 81
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
					button=NULL_KEYPAD;
					i++;
				}
		
			}
			i=0;
     af6:	10 e0       	ldi	r17, 0x00	; 0
			LCD_Goto(1,0);
			LCD_Write_String("password:");
			while(i<4)
     af8:	16 c0       	rjmp	.+44     	; 0xb26 <__vector_1+0xfc>
			{
				button=Keypad_GetValue();
     afa:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     afe:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
				while(button != NULL_KEYPAD)
     b02:	0d c0       	rjmp	.+26     	; 0xb1e <__vector_1+0xf4>
				{
					user[1][i]=button;
     b04:	e5 e0       	ldi	r30, 0x05	; 5
     b06:	f0 e0       	ldi	r31, 0x00	; 0
     b08:	ec 0f       	add	r30, r28
     b0a:	fd 1f       	adc	r31, r29
     b0c:	e1 0f       	add	r30, r17
     b0e:	f1 1d       	adc	r31, r1
     b10:	80 83       	st	Z, r24
					LCD_Write_Char('*');
     b12:	8a e2       	ldi	r24, 0x2A	; 42
     b14:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_Write_Char>
					button=NULL_KEYPAD;
     b18:	10 92 68 07 	sts	0x0768, r1	; 0x800768 <button>
					i++;
     b1c:	1f 5f       	subi	r17, 0xFF	; 255
			LCD_Goto(1,0);
			LCD_Write_String("password:");
			while(i<4)
			{
				button=Keypad_GetValue();
				while(button != NULL_KEYPAD)
     b1e:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     b22:	81 11       	cpse	r24, r1
     b24:	ef cf       	rjmp	.-34     	; 0xb04 <__vector_1+0xda>
		
			}
			i=0;
			LCD_Goto(1,0);
			LCD_Write_String("password:");
			while(i<4)
     b26:	14 30       	cpi	r17, 0x04	; 4
     b28:	40 f3       	brcs	.-48     	; 0xafa <__vector_1+0xd0>
					i++;
				}
		
			}
	
			LCD_Clear();
     b2a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
			LCD_Write_String("Show password *");
     b2e:	8b e5       	ldi	r24, 0x5B	; 91
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
			LCD_Goto(1,0);
     b36:	60 e0       	ldi	r22, 0x00	; 0
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
			LCD_Write_String("other press #");
     b3e:	8b e6       	ldi	r24, 0x6B	; 107
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
	
			while(!(button == '*' || button == '#'))
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <__vector_1+0x126>
			button=Keypad_GetValue();
     b48:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <Keypad_GetValue>
     b4c:	80 93 68 07 	sts	0x0768, r24	; 0x800768 <button>
			LCD_Clear();
			LCD_Write_String("Show password *");
			LCD_Goto(1,0);
			LCD_Write_String("other press #");
	
			while(!(button == '*' || button == '#'))
     b50:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <button>
     b54:	8a 32       	cpi	r24, 0x2A	; 42
     b56:	11 f0       	breq	.+4      	; 0xb5c <__vector_1+0x132>
     b58:	83 32       	cpi	r24, 0x23	; 35
     b5a:	b1 f7       	brne	.-20     	; 0xb48 <__vector_1+0x11e>
			button=Keypad_GetValue();
	
			if(button=='*')
     b5c:	8a 32       	cpi	r24, 0x2A	; 42
     b5e:	e9 f4       	brne	.+58     	; 0xb9a <__vector_1+0x170>
			{
				LCD_Clear();
     b60:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("password:");
     b64:	81 e5       	ldi	r24, 0x51	; 81
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				i=0;
     b6c:	10 e0       	ldi	r17, 0x00	; 0
				while(i<4)
     b6e:	0a c0       	rjmp	.+20     	; 0xb84 <__vector_1+0x15a>
				{
					LCD_Write_Char(user[1][i]);
     b70:	e5 e0       	ldi	r30, 0x05	; 5
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	ec 0f       	add	r30, r28
     b76:	fd 1f       	adc	r31, r29
     b78:	e1 0f       	add	r30, r17
     b7a:	f1 1d       	adc	r31, r1
     b7c:	80 81       	ld	r24, Z
     b7e:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_Write_Char>
					i++;
     b82:	1f 5f       	subi	r17, 0xFF	; 255
			if(button=='*')
			{
				LCD_Clear();
				LCD_Write_String("password:");
				i=0;
				while(i<4)
     b84:	14 30       	cpi	r17, 0x04	; 4
     b86:	a0 f3       	brcs	.-24     	; 0xb70 <__vector_1+0x146>
     b88:	2f ef       	ldi	r18, 0xFF	; 255
     b8a:	83 ed       	ldi	r24, 0xD3	; 211
     b8c:	90 e3       	ldi	r25, 0x30	; 48
     b8e:	21 50       	subi	r18, 0x01	; 1
     b90:	80 40       	sbci	r24, 0x00	; 0
     b92:	90 40       	sbci	r25, 0x00	; 0
     b94:	e1 f7       	brne	.-8      	; 0xb8e <__vector_1+0x164>
     b96:	00 c0       	rjmp	.+0      	; 0xb98 <__vector_1+0x16e>
     b98:	00 00       	nop
					i++;
				}
				_delay_ms(1000);
		
			}
			LCD_Clear();
     b9a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
	
			for(Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4)
     b9e:	10 e0       	ldi	r17, 0x00	; 0
     ba0:	e3 c0       	rjmp	.+454    	; 0xd68 <__vector_1+0x33e>
			{
				/*----------------->Username Check<------------------*/
				if(user[0][0] == EEPROM_ReadByte(0, Check_Counter + 1) && user[0][1] == EEPROM_ReadByte(0,Check_Counter + 2) && user[0][2] == EEPROM_ReadByte(0,Check_Counter + 3) && user[0][3] == EEPROM_ReadByte(0,Check_Counter + 4))
     ba2:	a9 80       	ldd	r10, Y+1	; 0x01
     ba4:	b1 2c       	mov	r11, r1
     ba6:	e1 2e       	mov	r14, r17
     ba8:	f1 2c       	mov	r15, r1
     baa:	67 01       	movw	r12, r14
     bac:	2f ef       	ldi	r18, 0xFF	; 255
     bae:	c2 1a       	sub	r12, r18
     bb0:	d2 0a       	sbc	r13, r18
     bb2:	b6 01       	movw	r22, r12
     bb4:	80 e0       	ldi	r24, 0x00	; 0
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
     bbc:	a8 16       	cp	r10, r24
     bbe:	b9 06       	cpc	r11, r25
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <__vector_1+0x19a>
     bc2:	d1 c0       	rjmp	.+418    	; 0xd66 <__vector_1+0x33c>
     bc4:	aa 80       	ldd	r10, Y+2	; 0x02
     bc6:	b1 2c       	mov	r11, r1
     bc8:	47 01       	movw	r8, r14
     bca:	82 e0       	ldi	r24, 0x02	; 2
     bcc:	88 0e       	add	r8, r24
     bce:	91 1c       	adc	r9, r1
     bd0:	b4 01       	movw	r22, r8
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
     bda:	a8 16       	cp	r10, r24
     bdc:	b9 06       	cpc	r11, r25
     bde:	09 f0       	breq	.+2      	; 0xbe2 <__vector_1+0x1b8>
     be0:	c2 c0       	rjmp	.+388    	; 0xd66 <__vector_1+0x33c>
     be2:	ab 80       	ldd	r10, Y+3	; 0x03
     be4:	b1 2c       	mov	r11, r1
     be6:	17 01       	movw	r2, r14
     be8:	93 e0       	ldi	r25, 0x03	; 3
     bea:	29 0e       	add	r2, r25
     bec:	31 1c       	adc	r3, r1
     bee:	b1 01       	movw	r22, r2
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
     bf8:	a8 16       	cp	r10, r24
     bfa:	b9 06       	cpc	r11, r25
     bfc:	09 f0       	breq	.+2      	; 0xc00 <__vector_1+0x1d6>
     bfe:	b3 c0       	rjmp	.+358    	; 0xd66 <__vector_1+0x33c>
     c00:	4c 80       	ldd	r4, Y+4	; 0x04
     c02:	51 2c       	mov	r5, r1
     c04:	57 01       	movw	r10, r14
     c06:	24 e0       	ldi	r18, 0x04	; 4
     c08:	a2 0e       	add	r10, r18
     c0a:	b1 1c       	adc	r11, r1
     c0c:	b5 01       	movw	r22, r10
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
     c16:	48 16       	cp	r4, r24
     c18:	59 06       	cpc	r5, r25
     c1a:	09 f0       	breq	.+2      	; 0xc1e <__vector_1+0x1f4>
     c1c:	a4 c0       	rjmp	.+328    	; 0xd66 <__vector_1+0x33c>
				{
					/*----------------->Password Check<------------------*/
					if(user[1][0] == EEPROM_ReadByte(1,Check_Counter + 1) && user[1][1] == EEPROM_ReadByte(1,Check_Counter + 2) && user[1][2] == EEPROM_ReadByte(1,Check_Counter + 3) && user[1][3] == EEPROM_ReadByte(1,Check_Counter + 4))
     c1e:	ed 80       	ldd	r14, Y+5	; 0x05
     c20:	f1 2c       	mov	r15, r1
     c22:	b6 01       	movw	r22, r12
     c24:	81 e0       	ldi	r24, 0x01	; 1
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
     c2c:	e8 16       	cp	r14, r24
     c2e:	f9 06       	cpc	r15, r25
     c30:	09 f0       	breq	.+2      	; 0xc34 <__vector_1+0x20a>
     c32:	99 c0       	rjmp	.+306    	; 0xd66 <__vector_1+0x33c>
     c34:	ee 80       	ldd	r14, Y+6	; 0x06
     c36:	f1 2c       	mov	r15, r1
     c38:	b4 01       	movw	r22, r8
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
     c42:	e8 16       	cp	r14, r24
     c44:	f9 06       	cpc	r15, r25
     c46:	09 f0       	breq	.+2      	; 0xc4a <__vector_1+0x220>
     c48:	8e c0       	rjmp	.+284    	; 0xd66 <__vector_1+0x33c>
     c4a:	ef 80       	ldd	r14, Y+7	; 0x07
     c4c:	f1 2c       	mov	r15, r1
     c4e:	b1 01       	movw	r22, r2
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
     c58:	e8 16       	cp	r14, r24
     c5a:	f9 06       	cpc	r15, r25
     c5c:	09 f0       	breq	.+2      	; 0xc60 <__vector_1+0x236>
     c5e:	83 c0       	rjmp	.+262    	; 0xd66 <__vector_1+0x33c>
     c60:	e8 84       	ldd	r14, Y+8	; 0x08
     c62:	f1 2c       	mov	r15, r1
     c64:	b5 01       	movw	r22, r10
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
     c6e:	e8 16       	cp	r14, r24
     c70:	f9 06       	cpc	r15, r25
     c72:	09 f0       	breq	.+2      	; 0xc76 <__vector_1+0x24c>
     c74:	78 c0       	rjmp	.+240    	; 0xd66 <__vector_1+0x33c>
					{
						/*----------------->Wright Username & Password<-----------------*/
						LCD_Write_String("User verified");
     c76:	89 e7       	ldi	r24, 0x79	; 121
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
						LCD_Goto(1,0);
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
						LCD_Write_String("Welcome!");
     c86:	87 e8       	ldi	r24, 0x87	; 135
     c88:	91 e0       	ldi	r25, 0x01	; 1
     c8a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
						Check_Counter = KP_Counter + 1;
     c8e:	10 91 8a 07 	lds	r17, 0x078A	; 0x80078a <KP_Counter>
     c92:	1f 5f       	subi	r17, 0xFF	; 255
						Timer2_SetDelay(2000);
     c94:	60 ed       	ldi	r22, 0xD0	; 208
     c96:	77 e0       	ldi	r23, 0x07	; 7
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
						j = 4;
						k = 4;
					
						if(SYS_Check==0 || SYS_Check==2)
     ca0:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <SYS_Check>
     ca4:	88 23       	and	r24, r24
     ca6:	11 f0       	breq	.+4      	; 0xcac <__vector_1+0x282>
     ca8:	82 30       	cpi	r24, 0x02	; 2
     caa:	81 f4       	brne	.+32     	; 0xccc <__vector_1+0x2a2>
						{
							eme_check=1;
     cac:	21 e0       	ldi	r18, 0x01	; 1
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	30 93 6a 07 	sts	0x076A, r19	; 0x80076a <eme_check+0x1>
     cb4:	20 93 69 07 	sts	0x0769, r18	; 0x800769 <eme_check>
							
							if(SYS_Check == 0)
     cb8:	81 11       	cpse	r24, r1
     cba:	47 c0       	rjmp	.+142    	; 0xd4a <__vector_1+0x320>
							{
								First_Check = 1;
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	80 93 81 07 	sts	0x0781, r24	; 0x800781 <First_Check>
						LCD_Write_String("User verified");
						LCD_Goto(1,0);
						LCD_Write_String("Welcome!");
						Check_Counter = KP_Counter + 1;
						Timer2_SetDelay(2000);
						j = 4;
     cc2:	68 94       	set
     cc4:	77 24       	eor	r7, r7
     cc6:	72 f8       	bld	r7, 2
						k = 4;
     cc8:	04 e0       	ldi	r16, 0x04	; 4
     cca:	4d c0       	rjmp	.+154    	; 0xd66 <__vector_1+0x33c>
							if(SYS_Check == 0)
							{
								First_Check = 1;
							}
						}
						else if (SYS_Check==1)
     ccc:	81 30       	cpi	r24, 0x01	; 1
     cce:	09 f0       	breq	.+2      	; 0xcd2 <__vector_1+0x2a8>
     cd0:	41 c0       	rjmp	.+130    	; 0xd54 <__vector_1+0x32a>
						{
							UART_TX_Str("\r\n");
     cd2:	89 eb       	ldi	r24, 0xB9	; 185
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("1.Accept user request to control the system\r\n");
     cda:	80 e9       	ldi	r24, 0x90	; 144
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("2.Reject user request to control the system\r\n");
     ce2:	8e eb       	ldi	r24, 0xBE	; 190
     ce4:	91 e0       	ldi	r25, 0x01	; 1
     ce6:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("\r\n");
     cea:	89 eb       	ldi	r24, 0xB9	; 185
     cec:	92 e0       	ldi	r25, 0x02	; 2
     cee:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("\r\n");
     cf2:	89 eb       	ldi	r24, 0xB9	; 185
     cf4:	92 e0       	ldi	r25, 0x02	; 2
     cf6:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						
							while(!Get_Bit(UCSRA,7));
     cfa:	5f 9b       	sbis	0x0b, 7	; 11
     cfc:	fe cf       	rjmp	.-4      	; 0xcfa <__vector_1+0x2d0>
							UART_GetValue = UART_RX_Char();
     cfe:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
     d02:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>

							UART_TX_Str("\r\n");
     d06:	89 eb       	ldi	r24, 0xB9	; 185
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("\r\n");
     d0e:	89 eb       	ldi	r24, 0xB9	; 185
     d10:	92 e0       	ldi	r25, 0x02	; 2
     d12:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>

							if(UART_GetValue == '1')
     d16:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <UART_GetValue>
     d1a:	81 33       	cpi	r24, 0x31	; 49
     d1c:	59 f4       	brne	.+22     	; 0xd34 <__vector_1+0x30a>
							{
								eme_check = 1;
     d1e:	81 e0       	ldi	r24, 0x01	; 1
     d20:	90 e0       	ldi	r25, 0x00	; 0
     d22:	90 93 6a 07 	sts	0x076A, r25	; 0x80076a <eme_check+0x1>
     d26:	80 93 69 07 	sts	0x0769, r24	; 0x800769 <eme_check>
						LCD_Write_String("User verified");
						LCD_Goto(1,0);
						LCD_Write_String("Welcome!");
						Check_Counter = KP_Counter + 1;
						Timer2_SetDelay(2000);
						j = 4;
     d2a:	68 94       	set
     d2c:	77 24       	eor	r7, r7
     d2e:	72 f8       	bld	r7, 2
						k = 4;
     d30:	04 e0       	ldi	r16, 0x04	; 4
     d32:	19 c0       	rjmp	.+50     	; 0xd66 <__vector_1+0x33c>
							if(UART_GetValue == '1')
							{
								eme_check = 1;
							}
						
							else if(UART_GetValue == '2')
     d34:	82 33       	cpi	r24, 0x32	; 50
     d36:	99 f4       	brne	.+38     	; 0xd5e <__vector_1+0x334>
							{
								eme_check = 0;
     d38:	10 92 6a 07 	sts	0x076A, r1	; 0x80076a <eme_check+0x1>
     d3c:	10 92 69 07 	sts	0x0769, r1	; 0x800769 <eme_check>
						LCD_Write_String("User verified");
						LCD_Goto(1,0);
						LCD_Write_String("Welcome!");
						Check_Counter = KP_Counter + 1;
						Timer2_SetDelay(2000);
						j = 4;
     d40:	68 94       	set
     d42:	77 24       	eor	r7, r7
     d44:	72 f8       	bld	r7, 2
						k = 4;
     d46:	04 e0       	ldi	r16, 0x04	; 4
     d48:	0e c0       	rjmp	.+28     	; 0xd66 <__vector_1+0x33c>
						LCD_Write_String("User verified");
						LCD_Goto(1,0);
						LCD_Write_String("Welcome!");
						Check_Counter = KP_Counter + 1;
						Timer2_SetDelay(2000);
						j = 4;
     d4a:	68 94       	set
     d4c:	77 24       	eor	r7, r7
     d4e:	72 f8       	bld	r7, 2
						k = 4;
     d50:	04 e0       	ldi	r16, 0x04	; 4
     d52:	09 c0       	rjmp	.+18     	; 0xd66 <__vector_1+0x33c>
						LCD_Write_String("User verified");
						LCD_Goto(1,0);
						LCD_Write_String("Welcome!");
						Check_Counter = KP_Counter + 1;
						Timer2_SetDelay(2000);
						j = 4;
     d54:	68 94       	set
     d56:	77 24       	eor	r7, r7
     d58:	72 f8       	bld	r7, 2
						k = 4;
     d5a:	04 e0       	ldi	r16, 0x04	; 4
     d5c:	04 c0       	rjmp	.+8      	; 0xd66 <__vector_1+0x33c>
						LCD_Write_String("User verified");
						LCD_Goto(1,0);
						LCD_Write_String("Welcome!");
						Check_Counter = KP_Counter + 1;
						Timer2_SetDelay(2000);
						j = 4;
     d5e:	68 94       	set
     d60:	77 24       	eor	r7, r7
     d62:	72 f8       	bld	r7, 2
						k = 4;
     d64:	04 e0       	ldi	r16, 0x04	; 4
				_delay_ms(1000);
		
			}
			LCD_Clear();
	
			for(Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4)
     d66:	1c 5f       	subi	r17, 0xFC	; 252
     d68:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <KP_Counter>
     d6c:	81 17       	cp	r24, r17
     d6e:	08 f0       	brcs	.+2      	; 0xd72 <__vector_1+0x348>
     d70:	18 cf       	rjmp	.-464    	; 0xba2 <__vector_1+0x178>
					}
				}
			}
	
			/*----------------->Wrong Username or Password<-----------------*/
			if(k != 4)
     d72:	04 30       	cpi	r16, 0x04	; 4
     d74:	b9 f0       	breq	.+46     	; 0xda4 <__vector_1+0x37a>
			{
				LCD_Write_String("User/Pass Wrong");
     d76:	8c ee       	ldi	r24, 0xEC	; 236
     d78:	91 e0       	ldi	r25, 0x01	; 1
     d7a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Goto(1,0);
     d7e:	60 e0       	ldi	r22, 0x00	; 0
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
				LCD_Write_String("Try again");
     d86:	8c ef       	ldi	r24, 0xFC	; 252
     d88:	91 e0       	ldi	r25, 0x01	; 1
     d8a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	93 ed       	ldi	r25, 0xD3	; 211
     d92:	20 e3       	ldi	r18, 0x30	; 48
     d94:	81 50       	subi	r24, 0x01	; 1
     d96:	90 40       	sbci	r25, 0x00	; 0
     d98:	20 40       	sbci	r18, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <__vector_1+0x36a>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <__vector_1+0x374>
     d9e:	00 00       	nop
				_delay_ms(1000);
				LCD_Clear();
     da0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
			}
			k++;
     da4:	0f 5f       	subi	r16, 0xFF	; 255
		
			if(k == 3)
     da6:	03 30       	cpi	r16, 0x03	; 3
     da8:	09 f0       	breq	.+2      	; 0xdac <__vector_1+0x382>
     daa:	3c c3       	rjmp	.+1656   	; 0x1424 <__vector_1+0x9fa>
			{
				LCD_Clear();
     dac:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Firing Alarm!");
     db0:	86 e0       	ldi	r24, 0x06	; 6
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
			
				while (1)
				{
					Buzzer_ON();
     db8:	0e 94 bf 00 	call	0x17e	; 0x17e <Buzzer_ON>
					LED3_ON();
     dbc:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
					LED4_ON();
     dc0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LED4_ON>
				
					LED0_ON();
     dc4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
     dc8:	8f ef       	ldi	r24, 0xFF	; 255
     dca:	9d ee       	ldi	r25, 0xED	; 237
     dcc:	22 e0       	ldi	r18, 0x02	; 2
     dce:	81 50       	subi	r24, 0x01	; 1
     dd0:	90 40       	sbci	r25, 0x00	; 0
     dd2:	20 40       	sbci	r18, 0x00	; 0
     dd4:	e1 f7       	brne	.-8      	; 0xdce <__vector_1+0x3a4>
     dd6:	00 c0       	rjmp	.+0      	; 0xdd8 <__vector_1+0x3ae>
     dd8:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
     dda:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
     dde:	8f ef       	ldi	r24, 0xFF	; 255
     de0:	9d ee       	ldi	r25, 0xED	; 237
     de2:	22 e0       	ldi	r18, 0x02	; 2
     de4:	81 50       	subi	r24, 0x01	; 1
     de6:	90 40       	sbci	r25, 0x00	; 0
     de8:	20 40       	sbci	r18, 0x00	; 0
     dea:	e1 f7       	brne	.-8      	; 0xde4 <__vector_1+0x3ba>
     dec:	00 c0       	rjmp	.+0      	; 0xdee <__vector_1+0x3c4>
     dee:	00 00       	nop
					_delay_ms(Delay);
					LED3_ON();
     df0:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
				
					LED0_ON();
     df4:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	9d ee       	ldi	r25, 0xED	; 237
     dfc:	22 e0       	ldi	r18, 0x02	; 2
     dfe:	81 50       	subi	r24, 0x01	; 1
     e00:	90 40       	sbci	r25, 0x00	; 0
     e02:	20 40       	sbci	r18, 0x00	; 0
     e04:	e1 f7       	brne	.-8      	; 0xdfe <__vector_1+0x3d4>
     e06:	00 c0       	rjmp	.+0      	; 0xe08 <__vector_1+0x3de>
     e08:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
     e0a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	9d ee       	ldi	r25, 0xED	; 237
     e12:	22 e0       	ldi	r18, 0x02	; 2
     e14:	81 50       	subi	r24, 0x01	; 1
     e16:	90 40       	sbci	r25, 0x00	; 0
     e18:	20 40       	sbci	r18, 0x00	; 0
     e1a:	e1 f7       	brne	.-8      	; 0xe14 <__vector_1+0x3ea>
     e1c:	00 c0       	rjmp	.+0      	; 0xe1e <__vector_1+0x3f4>
     e1e:	00 00       	nop
					_delay_ms(Delay);
				
				
					LED2_ON();
     e20:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     e24:	8f ef       	ldi	r24, 0xFF	; 255
     e26:	9d ee       	ldi	r25, 0xED	; 237
     e28:	22 e0       	ldi	r18, 0x02	; 2
     e2a:	81 50       	subi	r24, 0x01	; 1
     e2c:	90 40       	sbci	r25, 0x00	; 0
     e2e:	20 40       	sbci	r18, 0x00	; 0
     e30:	e1 f7       	brne	.-8      	; 0xe2a <__vector_1+0x400>
     e32:	00 c0       	rjmp	.+0      	; 0xe34 <__vector_1+0x40a>
     e34:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
     e36:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     e3a:	8f ef       	ldi	r24, 0xFF	; 255
     e3c:	9d ee       	ldi	r25, 0xED	; 237
     e3e:	22 e0       	ldi	r18, 0x02	; 2
     e40:	81 50       	subi	r24, 0x01	; 1
     e42:	90 40       	sbci	r25, 0x00	; 0
     e44:	20 40       	sbci	r18, 0x00	; 0
     e46:	e1 f7       	brne	.-8      	; 0xe40 <__vector_1+0x416>
     e48:	00 c0       	rjmp	.+0      	; 0xe4a <__vector_1+0x420>
     e4a:	00 00       	nop
					_delay_ms(Delay);
				
				
					LED2_ON();
     e4c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     e50:	8f ef       	ldi	r24, 0xFF	; 255
     e52:	9d ee       	ldi	r25, 0xED	; 237
     e54:	22 e0       	ldi	r18, 0x02	; 2
     e56:	81 50       	subi	r24, 0x01	; 1
     e58:	90 40       	sbci	r25, 0x00	; 0
     e5a:	20 40       	sbci	r18, 0x00	; 0
     e5c:	e1 f7       	brne	.-8      	; 0xe56 <__vector_1+0x42c>
     e5e:	00 c0       	rjmp	.+0      	; 0xe60 <__vector_1+0x436>
     e60:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
     e62:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     e66:	8f ef       	ldi	r24, 0xFF	; 255
     e68:	9d ee       	ldi	r25, 0xED	; 237
     e6a:	22 e0       	ldi	r18, 0x02	; 2
     e6c:	81 50       	subi	r24, 0x01	; 1
     e6e:	90 40       	sbci	r25, 0x00	; 0
     e70:	20 40       	sbci	r18, 0x00	; 0
     e72:	e1 f7       	brne	.-8      	; 0xe6c <__vector_1+0x442>
     e74:	00 c0       	rjmp	.+0      	; 0xe76 <__vector_1+0x44c>
     e76:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
     e78:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
					LED2_ON();
     e7c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     e80:	8f ef       	ldi	r24, 0xFF	; 255
     e82:	9d ee       	ldi	r25, 0xED	; 237
     e84:	22 e0       	ldi	r18, 0x02	; 2
     e86:	81 50       	subi	r24, 0x01	; 1
     e88:	90 40       	sbci	r25, 0x00	; 0
     e8a:	20 40       	sbci	r18, 0x00	; 0
     e8c:	e1 f7       	brne	.-8      	; 0xe86 <__vector_1+0x45c>
     e8e:	00 c0       	rjmp	.+0      	; 0xe90 <__vector_1+0x466>
     e90:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_OFF();
     e92:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
     e96:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     e9a:	8f ef       	ldi	r24, 0xFF	; 255
     e9c:	9d ee       	ldi	r25, 0xED	; 237
     e9e:	22 e0       	ldi	r18, 0x02	; 2
     ea0:	81 50       	subi	r24, 0x01	; 1
     ea2:	90 40       	sbci	r25, 0x00	; 0
     ea4:	20 40       	sbci	r18, 0x00	; 0
     ea6:	e1 f7       	brne	.-8      	; 0xea0 <__vector_1+0x476>
     ea8:	00 c0       	rjmp	.+0      	; 0xeaa <__vector_1+0x480>
     eaa:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_OFF();
     eac:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
     eb0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	9d ee       	ldi	r25, 0xED	; 237
     eb8:	22 e0       	ldi	r18, 0x02	; 2
     eba:	81 50       	subi	r24, 0x01	; 1
     ebc:	90 40       	sbci	r25, 0x00	; 0
     ebe:	20 40       	sbci	r18, 0x00	; 0
     ec0:	e1 f7       	brne	.-8      	; 0xeba <__vector_1+0x490>
     ec2:	00 c0       	rjmp	.+0      	; 0xec4 <__vector_1+0x49a>
     ec4:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
     ec6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
					LED2_ON();
     eca:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     ece:	8f ef       	ldi	r24, 0xFF	; 255
     ed0:	9d ee       	ldi	r25, 0xED	; 237
     ed2:	22 e0       	ldi	r18, 0x02	; 2
     ed4:	81 50       	subi	r24, 0x01	; 1
     ed6:	90 40       	sbci	r25, 0x00	; 0
     ed8:	20 40       	sbci	r18, 0x00	; 0
     eda:	e1 f7       	brne	.-8      	; 0xed4 <__vector_1+0x4aa>
     edc:	00 c0       	rjmp	.+0      	; 0xede <__vector_1+0x4b4>
     ede:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_OFF();
     ee0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
     ee4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     ee8:	8f ef       	ldi	r24, 0xFF	; 255
     eea:	9d ee       	ldi	r25, 0xED	; 237
     eec:	22 e0       	ldi	r18, 0x02	; 2
     eee:	81 50       	subi	r24, 0x01	; 1
     ef0:	90 40       	sbci	r25, 0x00	; 0
     ef2:	20 40       	sbci	r18, 0x00	; 0
     ef4:	e1 f7       	brne	.-8      	; 0xeee <__vector_1+0x4c4>
     ef6:	00 c0       	rjmp	.+0      	; 0xef8 <__vector_1+0x4ce>
     ef8:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
     efa:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
     efe:	8f ef       	ldi	r24, 0xFF	; 255
     f00:	9d ee       	ldi	r25, 0xED	; 237
     f02:	22 e0       	ldi	r18, 0x02	; 2
     f04:	81 50       	subi	r24, 0x01	; 1
     f06:	90 40       	sbci	r25, 0x00	; 0
     f08:	20 40       	sbci	r18, 0x00	; 0
     f0a:	e1 f7       	brne	.-8      	; 0xf04 <__vector_1+0x4da>
     f0c:	00 c0       	rjmp	.+0      	; 0xf0e <__vector_1+0x4e4>
     f0e:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
     f10:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
     f14:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     f18:	8f ef       	ldi	r24, 0xFF	; 255
     f1a:	9d ee       	ldi	r25, 0xED	; 237
     f1c:	22 e0       	ldi	r18, 0x02	; 2
     f1e:	81 50       	subi	r24, 0x01	; 1
     f20:	90 40       	sbci	r25, 0x00	; 0
     f22:	20 40       	sbci	r18, 0x00	; 0
     f24:	e1 f7       	brne	.-8      	; 0xf1e <__vector_1+0x4f4>
     f26:	00 c0       	rjmp	.+0      	; 0xf28 <__vector_1+0x4fe>
     f28:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
     f2a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     f2e:	8f ef       	ldi	r24, 0xFF	; 255
     f30:	9d ee       	ldi	r25, 0xED	; 237
     f32:	22 e0       	ldi	r18, 0x02	; 2
     f34:	81 50       	subi	r24, 0x01	; 1
     f36:	90 40       	sbci	r25, 0x00	; 0
     f38:	20 40       	sbci	r18, 0x00	; 0
     f3a:	e1 f7       	brne	.-8      	; 0xf34 <__vector_1+0x50a>
     f3c:	00 c0       	rjmp	.+0      	; 0xf3e <__vector_1+0x514>
     f3e:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
     f40:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
     f44:	8f ef       	ldi	r24, 0xFF	; 255
     f46:	9d ee       	ldi	r25, 0xED	; 237
     f48:	22 e0       	ldi	r18, 0x02	; 2
     f4a:	81 50       	subi	r24, 0x01	; 1
     f4c:	90 40       	sbci	r25, 0x00	; 0
     f4e:	20 40       	sbci	r18, 0x00	; 0
     f50:	e1 f7       	brne	.-8      	; 0xf4a <__vector_1+0x520>
     f52:	00 c0       	rjmp	.+0      	; 0xf54 <__vector_1+0x52a>
     f54:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
     f56:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
     f5a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     f5e:	8f ef       	ldi	r24, 0xFF	; 255
     f60:	9d ee       	ldi	r25, 0xED	; 237
     f62:	22 e0       	ldi	r18, 0x02	; 2
     f64:	81 50       	subi	r24, 0x01	; 1
     f66:	90 40       	sbci	r25, 0x00	; 0
     f68:	20 40       	sbci	r18, 0x00	; 0
     f6a:	e1 f7       	brne	.-8      	; 0xf64 <__vector_1+0x53a>
     f6c:	00 c0       	rjmp	.+0      	; 0xf6e <__vector_1+0x544>
     f6e:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
     f70:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     f74:	8f ef       	ldi	r24, 0xFF	; 255
     f76:	9d ee       	ldi	r25, 0xED	; 237
     f78:	22 e0       	ldi	r18, 0x02	; 2
     f7a:	81 50       	subi	r24, 0x01	; 1
     f7c:	90 40       	sbci	r25, 0x00	; 0
     f7e:	20 40       	sbci	r18, 0x00	; 0
     f80:	e1 f7       	brne	.-8      	; 0xf7a <__vector_1+0x550>
     f82:	00 c0       	rjmp	.+0      	; 0xf84 <__vector_1+0x55a>
     f84:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
     f86:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
     f8a:	8f ef       	ldi	r24, 0xFF	; 255
     f8c:	9d ee       	ldi	r25, 0xED	; 237
     f8e:	22 e0       	ldi	r18, 0x02	; 2
     f90:	81 50       	subi	r24, 0x01	; 1
     f92:	90 40       	sbci	r25, 0x00	; 0
     f94:	20 40       	sbci	r18, 0x00	; 0
     f96:	e1 f7       	brne	.-8      	; 0xf90 <__vector_1+0x566>
     f98:	00 c0       	rjmp	.+0      	; 0xf9a <__vector_1+0x570>
     f9a:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
     f9c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
     fa0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	9d ee       	ldi	r25, 0xED	; 237
     fa8:	22 e0       	ldi	r18, 0x02	; 2
     faa:	81 50       	subi	r24, 0x01	; 1
     fac:	90 40       	sbci	r25, 0x00	; 0
     fae:	20 40       	sbci	r18, 0x00	; 0
     fb0:	e1 f7       	brne	.-8      	; 0xfaa <__vector_1+0x580>
     fb2:	00 c0       	rjmp	.+0      	; 0xfb4 <__vector_1+0x58a>
     fb4:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
     fb6:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
     fba:	8f ef       	ldi	r24, 0xFF	; 255
     fbc:	9d ee       	ldi	r25, 0xED	; 237
     fbe:	22 e0       	ldi	r18, 0x02	; 2
     fc0:	81 50       	subi	r24, 0x01	; 1
     fc2:	90 40       	sbci	r25, 0x00	; 0
     fc4:	20 40       	sbci	r18, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <__vector_1+0x596>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <__vector_1+0x5a0>
     fca:	00 00       	nop
					_delay_ms(Delay);
					Buzzer_OFF();
     fcc:	0e 94 c5 00 	call	0x18a	; 0x18a <Buzzer_OFF>
				
					LED0_ON();
     fd0:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
     fd4:	8f ef       	ldi	r24, 0xFF	; 255
     fd6:	9d ee       	ldi	r25, 0xED	; 237
     fd8:	22 e0       	ldi	r18, 0x02	; 2
     fda:	81 50       	subi	r24, 0x01	; 1
     fdc:	90 40       	sbci	r25, 0x00	; 0
     fde:	20 40       	sbci	r18, 0x00	; 0
     fe0:	e1 f7       	brne	.-8      	; 0xfda <__vector_1+0x5b0>
     fe2:	00 c0       	rjmp	.+0      	; 0xfe4 <__vector_1+0x5ba>
     fe4:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
     fe6:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
     fea:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
     fee:	8f ef       	ldi	r24, 0xFF	; 255
     ff0:	9d ee       	ldi	r25, 0xED	; 237
     ff2:	22 e0       	ldi	r18, 0x02	; 2
     ff4:	81 50       	subi	r24, 0x01	; 1
     ff6:	90 40       	sbci	r25, 0x00	; 0
     ff8:	20 40       	sbci	r18, 0x00	; 0
     ffa:	e1 f7       	brne	.-8      	; 0xff4 <__vector_1+0x5ca>
     ffc:	00 c0       	rjmp	.+0      	; 0xffe <__vector_1+0x5d4>
     ffe:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    1000:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    1004:	8f ef       	ldi	r24, 0xFF	; 255
    1006:	9d ee       	ldi	r25, 0xED	; 237
    1008:	22 e0       	ldi	r18, 0x02	; 2
    100a:	81 50       	subi	r24, 0x01	; 1
    100c:	90 40       	sbci	r25, 0x00	; 0
    100e:	20 40       	sbci	r18, 0x00	; 0
    1010:	e1 f7       	brne	.-8      	; 0x100a <__vector_1+0x5e0>
    1012:	00 c0       	rjmp	.+0      	; 0x1014 <__vector_1+0x5ea>
    1014:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
    1016:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    101a:	8f ef       	ldi	r24, 0xFF	; 255
    101c:	9d ee       	ldi	r25, 0xED	; 237
    101e:	22 e0       	ldi	r18, 0x02	; 2
    1020:	81 50       	subi	r24, 0x01	; 1
    1022:	90 40       	sbci	r25, 0x00	; 0
    1024:	20 40       	sbci	r18, 0x00	; 0
    1026:	e1 f7       	brne	.-8      	; 0x1020 <__vector_1+0x5f6>
    1028:	00 c0       	rjmp	.+0      	; 0x102a <__vector_1+0x600>
    102a:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    102c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
    1030:	8f ef       	ldi	r24, 0xFF	; 255
    1032:	9d ee       	ldi	r25, 0xED	; 237
    1034:	22 e0       	ldi	r18, 0x02	; 2
    1036:	81 50       	subi	r24, 0x01	; 1
    1038:	90 40       	sbci	r25, 0x00	; 0
    103a:	20 40       	sbci	r18, 0x00	; 0
    103c:	e1 f7       	brne	.-8      	; 0x1036 <__vector_1+0x60c>
    103e:	00 c0       	rjmp	.+0      	; 0x1040 <__vector_1+0x616>
    1040:	00 00       	nop
					_delay_ms(Delay);
				
				
					LED2_ON();
    1042:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    1046:	8f ef       	ldi	r24, 0xFF	; 255
    1048:	9d ee       	ldi	r25, 0xED	; 237
    104a:	22 e0       	ldi	r18, 0x02	; 2
    104c:	81 50       	subi	r24, 0x01	; 1
    104e:	90 40       	sbci	r25, 0x00	; 0
    1050:	20 40       	sbci	r18, 0x00	; 0
    1052:	e1 f7       	brne	.-8      	; 0x104c <__vector_1+0x622>
    1054:	00 c0       	rjmp	.+0      	; 0x1056 <__vector_1+0x62c>
    1056:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    1058:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    105c:	8f ef       	ldi	r24, 0xFF	; 255
    105e:	9d ee       	ldi	r25, 0xED	; 237
    1060:	22 e0       	ldi	r18, 0x02	; 2
    1062:	81 50       	subi	r24, 0x01	; 1
    1064:	90 40       	sbci	r25, 0x00	; 0
    1066:	20 40       	sbci	r18, 0x00	; 0
    1068:	e1 f7       	brne	.-8      	; 0x1062 <__vector_1+0x638>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <__vector_1+0x642>
    106c:	00 00       	nop
					_delay_ms(Delay);
				
					LED2_ON();
    106e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    1072:	8f ef       	ldi	r24, 0xFF	; 255
    1074:	9d ee       	ldi	r25, 0xED	; 237
    1076:	22 e0       	ldi	r18, 0x02	; 2
    1078:	81 50       	subi	r24, 0x01	; 1
    107a:	90 40       	sbci	r25, 0x00	; 0
    107c:	20 40       	sbci	r18, 0x00	; 0
    107e:	e1 f7       	brne	.-8      	; 0x1078 <__vector_1+0x64e>
    1080:	00 c0       	rjmp	.+0      	; 0x1082 <__vector_1+0x658>
    1082:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    1084:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    1088:	8f ef       	ldi	r24, 0xFF	; 255
    108a:	9d ee       	ldi	r25, 0xED	; 237
    108c:	22 e0       	ldi	r18, 0x02	; 2
    108e:	81 50       	subi	r24, 0x01	; 1
    1090:	90 40       	sbci	r25, 0x00	; 0
    1092:	20 40       	sbci	r18, 0x00	; 0
    1094:	e1 f7       	brne	.-8      	; 0x108e <__vector_1+0x664>
    1096:	00 c0       	rjmp	.+0      	; 0x1098 <__vector_1+0x66e>
    1098:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
    109a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
					LED2_ON();
    109e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    10a2:	8f ef       	ldi	r24, 0xFF	; 255
    10a4:	9d ee       	ldi	r25, 0xED	; 237
    10a6:	22 e0       	ldi	r18, 0x02	; 2
    10a8:	81 50       	subi	r24, 0x01	; 1
    10aa:	90 40       	sbci	r25, 0x00	; 0
    10ac:	20 40       	sbci	r18, 0x00	; 0
    10ae:	e1 f7       	brne	.-8      	; 0x10a8 <__vector_1+0x67e>
    10b0:	00 c0       	rjmp	.+0      	; 0x10b2 <__vector_1+0x688>
    10b2:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_OFF();
    10b4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
    10b8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    10bc:	8f ef       	ldi	r24, 0xFF	; 255
    10be:	9d ee       	ldi	r25, 0xED	; 237
    10c0:	22 e0       	ldi	r18, 0x02	; 2
    10c2:	81 50       	subi	r24, 0x01	; 1
    10c4:	90 40       	sbci	r25, 0x00	; 0
    10c6:	20 40       	sbci	r18, 0x00	; 0
    10c8:	e1 f7       	brne	.-8      	; 0x10c2 <__vector_1+0x698>
    10ca:	00 c0       	rjmp	.+0      	; 0x10cc <__vector_1+0x6a2>
    10cc:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
    10ce:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
					LED2_ON();
    10d2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    10d6:	8f ef       	ldi	r24, 0xFF	; 255
    10d8:	9d ee       	ldi	r25, 0xED	; 237
    10da:	22 e0       	ldi	r18, 0x02	; 2
    10dc:	81 50       	subi	r24, 0x01	; 1
    10de:	90 40       	sbci	r25, 0x00	; 0
    10e0:	20 40       	sbci	r18, 0x00	; 0
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <__vector_1+0x6b2>
    10e4:	00 c0       	rjmp	.+0      	; 0x10e6 <__vector_1+0x6bc>
    10e6:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_OFF();
    10e8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
    10ec:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    10f0:	8f ef       	ldi	r24, 0xFF	; 255
    10f2:	9d ee       	ldi	r25, 0xED	; 237
    10f4:	22 e0       	ldi	r18, 0x02	; 2
    10f6:	81 50       	subi	r24, 0x01	; 1
    10f8:	90 40       	sbci	r25, 0x00	; 0
    10fa:	20 40       	sbci	r18, 0x00	; 0
    10fc:	e1 f7       	brne	.-8      	; 0x10f6 <__vector_1+0x6cc>
    10fe:	00 c0       	rjmp	.+0      	; 0x1100 <__vector_1+0x6d6>
    1100:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
    1102:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    1106:	8f ef       	ldi	r24, 0xFF	; 255
    1108:	9d ee       	ldi	r25, 0xED	; 237
    110a:	22 e0       	ldi	r18, 0x02	; 2
    110c:	81 50       	subi	r24, 0x01	; 1
    110e:	90 40       	sbci	r25, 0x00	; 0
    1110:	20 40       	sbci	r18, 0x00	; 0
    1112:	e1 f7       	brne	.-8      	; 0x110c <__vector_1+0x6e2>
    1114:	00 c0       	rjmp	.+0      	; 0x1116 <__vector_1+0x6ec>
    1116:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    1118:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
    111c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    1120:	8f ef       	ldi	r24, 0xFF	; 255
    1122:	9d ee       	ldi	r25, 0xED	; 237
    1124:	22 e0       	ldi	r18, 0x02	; 2
    1126:	81 50       	subi	r24, 0x01	; 1
    1128:	90 40       	sbci	r25, 0x00	; 0
    112a:	20 40       	sbci	r18, 0x00	; 0
    112c:	e1 f7       	brne	.-8      	; 0x1126 <__vector_1+0x6fc>
    112e:	00 c0       	rjmp	.+0      	; 0x1130 <__vector_1+0x706>
    1130:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    1132:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    1136:	8f ef       	ldi	r24, 0xFF	; 255
    1138:	9d ee       	ldi	r25, 0xED	; 237
    113a:	22 e0       	ldi	r18, 0x02	; 2
    113c:	81 50       	subi	r24, 0x01	; 1
    113e:	90 40       	sbci	r25, 0x00	; 0
    1140:	20 40       	sbci	r18, 0x00	; 0
    1142:	e1 f7       	brne	.-8      	; 0x113c <__vector_1+0x712>
    1144:	00 c0       	rjmp	.+0      	; 0x1146 <__vector_1+0x71c>
    1146:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_ON();
    1148:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    114c:	8f ef       	ldi	r24, 0xFF	; 255
    114e:	9d ee       	ldi	r25, 0xED	; 237
    1150:	22 e0       	ldi	r18, 0x02	; 2
    1152:	81 50       	subi	r24, 0x01	; 1
    1154:	90 40       	sbci	r25, 0x00	; 0
    1156:	20 40       	sbci	r18, 0x00	; 0
    1158:	e1 f7       	brne	.-8      	; 0x1152 <__vector_1+0x728>
    115a:	00 c0       	rjmp	.+0      	; 0x115c <__vector_1+0x732>
    115c:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    115e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
    1162:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    1166:	8f ef       	ldi	r24, 0xFF	; 255
    1168:	9d ee       	ldi	r25, 0xED	; 237
    116a:	22 e0       	ldi	r18, 0x02	; 2
    116c:	81 50       	subi	r24, 0x01	; 1
    116e:	90 40       	sbci	r25, 0x00	; 0
    1170:	20 40       	sbci	r18, 0x00	; 0
    1172:	e1 f7       	brne	.-8      	; 0x116c <__vector_1+0x742>
    1174:	00 c0       	rjmp	.+0      	; 0x1176 <__vector_1+0x74c>
    1176:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    1178:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    117c:	8f ef       	ldi	r24, 0xFF	; 255
    117e:	9d ee       	ldi	r25, 0xED	; 237
    1180:	22 e0       	ldi	r18, 0x02	; 2
    1182:	81 50       	subi	r24, 0x01	; 1
    1184:	90 40       	sbci	r25, 0x00	; 0
    1186:	20 40       	sbci	r18, 0x00	; 0
    1188:	e1 f7       	brne	.-8      	; 0x1182 <__vector_1+0x758>
    118a:	00 c0       	rjmp	.+0      	; 0x118c <__vector_1+0x762>
    118c:	00 00       	nop
					_delay_ms(Delay);
				
				
				
				
					LED0_Toggle();
    118e:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    1192:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    1196:	8f ef       	ldi	r24, 0xFF	; 255
    1198:	9d ee       	ldi	r25, 0xED	; 237
    119a:	22 e0       	ldi	r18, 0x02	; 2
    119c:	81 50       	subi	r24, 0x01	; 1
    119e:	90 40       	sbci	r25, 0x00	; 0
    11a0:	20 40       	sbci	r18, 0x00	; 0
    11a2:	e1 f7       	brne	.-8      	; 0x119c <__vector_1+0x772>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <__vector_1+0x77c>
    11a6:	00 00       	nop
					_delay_ms(Delay);
					LED0_Toggle();
    11a8:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    11ac:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    11b0:	8f ef       	ldi	r24, 0xFF	; 255
    11b2:	93 ec       	ldi	r25, 0xC3	; 195
    11b4:	29 e0       	ldi	r18, 0x09	; 9
    11b6:	81 50       	subi	r24, 0x01	; 1
    11b8:	90 40       	sbci	r25, 0x00	; 0
    11ba:	20 40       	sbci	r18, 0x00	; 0
    11bc:	e1 f7       	brne	.-8      	; 0x11b6 <__vector_1+0x78c>
    11be:	00 c0       	rjmp	.+0      	; 0x11c0 <__vector_1+0x796>
    11c0:	00 00       	nop
					_delay_ms(200);
					LED0_Toggle();
    11c2:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    11c6:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    11ca:	8f ef       	ldi	r24, 0xFF	; 255
    11cc:	99 e6       	ldi	r25, 0x69	; 105
    11ce:	28 e1       	ldi	r18, 0x18	; 24
    11d0:	81 50       	subi	r24, 0x01	; 1
    11d2:	90 40       	sbci	r25, 0x00	; 0
    11d4:	20 40       	sbci	r18, 0x00	; 0
    11d6:	e1 f7       	brne	.-8      	; 0x11d0 <__vector_1+0x7a6>
    11d8:	00 c0       	rjmp	.+0      	; 0x11da <__vector_1+0x7b0>
    11da:	00 00       	nop
					_delay_ms(500);
					LED0_Toggle();
    11dc:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    11e0:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    11e4:	8f ef       	ldi	r24, 0xFF	; 255
    11e6:	91 ee       	ldi	r25, 0xE1	; 225
    11e8:	24 e0       	ldi	r18, 0x04	; 4
    11ea:	81 50       	subi	r24, 0x01	; 1
    11ec:	90 40       	sbci	r25, 0x00	; 0
    11ee:	20 40       	sbci	r18, 0x00	; 0
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <__vector_1+0x7c0>
    11f2:	00 c0       	rjmp	.+0      	; 0x11f4 <__vector_1+0x7ca>
    11f4:	00 00       	nop
					_delay_ms(100);
					LED0_Toggle();
    11f6:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    11fa:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    11fe:	8f ef       	ldi	r24, 0xFF	; 255
    1200:	9d ee       	ldi	r25, 0xED	; 237
    1202:	22 e0       	ldi	r18, 0x02	; 2
    1204:	81 50       	subi	r24, 0x01	; 1
    1206:	90 40       	sbci	r25, 0x00	; 0
    1208:	20 40       	sbci	r18, 0x00	; 0
    120a:	e1 f7       	brne	.-8      	; 0x1204 <__vector_1+0x7da>
    120c:	00 c0       	rjmp	.+0      	; 0x120e <__vector_1+0x7e4>
    120e:	00 00       	nop
					_delay_ms(Delay);
					LED0_Toggle();
    1210:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    1214:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    1218:	8f ef       	ldi	r24, 0xFF	; 255
    121a:	9d ee       	ldi	r25, 0xED	; 237
    121c:	22 e0       	ldi	r18, 0x02	; 2
    121e:	81 50       	subi	r24, 0x01	; 1
    1220:	90 40       	sbci	r25, 0x00	; 0
    1222:	20 40       	sbci	r18, 0x00	; 0
    1224:	e1 f7       	brne	.-8      	; 0x121e <__vector_1+0x7f4>
    1226:	00 c0       	rjmp	.+0      	; 0x1228 <__vector_1+0x7fe>
    1228:	00 00       	nop
					_delay_ms(Delay);
					LED0_Toggle();
    122a:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    122e:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    1232:	8f e3       	ldi	r24, 0x3F	; 63
    1234:	9c e9       	ldi	r25, 0x9C	; 156
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <__vector_1+0x80c>
    123a:	00 c0       	rjmp	.+0      	; 0x123c <__vector_1+0x812>
    123c:	00 00       	nop
					_delay_ms(10);
					LED0_Toggle();
    123e:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    1242:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    1246:	9f ef       	ldi	r25, 0xFF	; 255
    1248:	2d ee       	ldi	r18, 0xED	; 237
    124a:	82 e0       	ldi	r24, 0x02	; 2
    124c:	91 50       	subi	r25, 0x01	; 1
    124e:	20 40       	sbci	r18, 0x00	; 0
    1250:	80 40       	sbci	r24, 0x00	; 0
    1252:	e1 f7       	brne	.-8      	; 0x124c <__vector_1+0x822>
    1254:	00 c0       	rjmp	.+0      	; 0x1256 <__vector_1+0x82c>
    1256:	00 00       	nop
					_delay_ms(Delay);
					LED0_Toggle();
    1258:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    125c:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    1260:	9f ef       	ldi	r25, 0xFF	; 255
    1262:	2d ee       	ldi	r18, 0xED	; 237
    1264:	82 e0       	ldi	r24, 0x02	; 2
    1266:	91 50       	subi	r25, 0x01	; 1
    1268:	20 40       	sbci	r18, 0x00	; 0
    126a:	80 40       	sbci	r24, 0x00	; 0
    126c:	e1 f7       	brne	.-8      	; 0x1266 <__vector_1+0x83c>
    126e:	00 c0       	rjmp	.+0      	; 0x1270 <__vector_1+0x846>
    1270:	00 00       	nop
					_delay_ms(Delay);
				
					LED0_Toggle();
    1272:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    1276:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    127a:	9f ef       	ldi	r25, 0xFF	; 255
    127c:	2d ee       	ldi	r18, 0xED	; 237
    127e:	82 e0       	ldi	r24, 0x02	; 2
    1280:	91 50       	subi	r25, 0x01	; 1
    1282:	20 40       	sbci	r18, 0x00	; 0
    1284:	80 40       	sbci	r24, 0x00	; 0
    1286:	e1 f7       	brne	.-8      	; 0x1280 <__vector_1+0x856>
    1288:	00 c0       	rjmp	.+0      	; 0x128a <__vector_1+0x860>
    128a:	00 00       	nop
					_delay_ms(Delay);
					LED2_Toggle();
    128c:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    1290:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    1294:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    1298:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    129c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    12a0:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    12a4:	9f ef       	ldi	r25, 0xFF	; 255
    12a6:	23 ec       	ldi	r18, 0xC3	; 195
    12a8:	89 e0       	ldi	r24, 0x09	; 9
    12aa:	91 50       	subi	r25, 0x01	; 1
    12ac:	20 40       	sbci	r18, 0x00	; 0
    12ae:	80 40       	sbci	r24, 0x00	; 0
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <__vector_1+0x880>
    12b2:	00 c0       	rjmp	.+0      	; 0x12b4 <__vector_1+0x88a>
    12b4:	00 00       	nop
					_delay_ms(200);
					LED0_Toggle();
    12b6:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED2_Toggle();
    12ba:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    12be:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED1_Toggle();
    12c2:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    12c6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    12ca:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    12ce:	9f ef       	ldi	r25, 0xFF	; 255
    12d0:	2d ee       	ldi	r18, 0xED	; 237
    12d2:	82 e0       	ldi	r24, 0x02	; 2
    12d4:	91 50       	subi	r25, 0x01	; 1
    12d6:	20 40       	sbci	r18, 0x00	; 0
    12d8:	80 40       	sbci	r24, 0x00	; 0
    12da:	e1 f7       	brne	.-8      	; 0x12d4 <__vector_1+0x8aa>
    12dc:	00 c0       	rjmp	.+0      	; 0x12de <__vector_1+0x8b4>
    12de:	00 00       	nop
					_delay_ms(Delay);
					LED2_Toggle();
    12e0:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    12e4:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    12e8:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    12ec:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    12f0:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    12f4:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    12f8:	9f ef       	ldi	r25, 0xFF	; 255
    12fa:	21 ee       	ldi	r18, 0xE1	; 225
    12fc:	84 e0       	ldi	r24, 0x04	; 4
    12fe:	91 50       	subi	r25, 0x01	; 1
    1300:	20 40       	sbci	r18, 0x00	; 0
    1302:	80 40       	sbci	r24, 0x00	; 0
    1304:	e1 f7       	brne	.-8      	; 0x12fe <__vector_1+0x8d4>
    1306:	00 c0       	rjmp	.+0      	; 0x1308 <__vector_1+0x8de>
    1308:	00 00       	nop
					_delay_ms(100);
					LED2_Toggle();
    130a:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    130e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    1312:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    1316:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    131a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    131e:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	2d ee       	ldi	r18, 0xED	; 237
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	91 50       	subi	r25, 0x01	; 1
    132a:	20 40       	sbci	r18, 0x00	; 0
    132c:	80 40       	sbci	r24, 0x00	; 0
    132e:	e1 f7       	brne	.-8      	; 0x1328 <__vector_1+0x8fe>
    1330:	00 c0       	rjmp	.+0      	; 0x1332 <__vector_1+0x908>
    1332:	00 00       	nop
					_delay_ms(Delay);
					LED2_Toggle();
    1334:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    1338:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    133c:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    1340:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    1344:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    1348:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    134c:	9f ef       	ldi	r25, 0xFF	; 255
    134e:	23 ed       	ldi	r18, 0xD3	; 211
    1350:	80 e3       	ldi	r24, 0x30	; 48
    1352:	91 50       	subi	r25, 0x01	; 1
    1354:	20 40       	sbci	r18, 0x00	; 0
    1356:	80 40       	sbci	r24, 0x00	; 0
    1358:	e1 f7       	brne	.-8      	; 0x1352 <__vector_1+0x928>
    135a:	00 c0       	rjmp	.+0      	; 0x135c <__vector_1+0x932>
    135c:	00 00       	nop
					_delay_ms(1000);
					LED2_Toggle();
    135e:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    1362:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    1366:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    136a:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    136e:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    1372:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    1376:	8f e3       	ldi	r24, 0x3F	; 63
    1378:	9c e9       	ldi	r25, 0x9C	; 156
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	f1 f7       	brne	.-4      	; 0x137a <__vector_1+0x950>
    137e:	00 c0       	rjmp	.+0      	; 0x1380 <__vector_1+0x956>
    1380:	00 00       	nop
					_delay_ms(10);
					LED2_Toggle();
    1382:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    1386:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    138a:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    138e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    1392:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    1396:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    139a:	8f e3       	ldi	r24, 0x3F	; 63
    139c:	9c e9       	ldi	r25, 0x9C	; 156
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <__vector_1+0x974>
    13a2:	00 c0       	rjmp	.+0      	; 0x13a4 <__vector_1+0x97a>
    13a4:	00 00       	nop
					_delay_ms(10);
					LED2_Toggle();
    13a6:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    13aa:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    13ae:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    13b2:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    13b6:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    13ba:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    13be:	9f ef       	ldi	r25, 0xFF	; 255
    13c0:	21 ee       	ldi	r18, 0xE1	; 225
    13c2:	84 e0       	ldi	r24, 0x04	; 4
    13c4:	91 50       	subi	r25, 0x01	; 1
    13c6:	20 40       	sbci	r18, 0x00	; 0
    13c8:	80 40       	sbci	r24, 0x00	; 0
    13ca:	e1 f7       	brne	.-8      	; 0x13c4 <__vector_1+0x99a>
    13cc:	00 c0       	rjmp	.+0      	; 0x13ce <__vector_1+0x9a4>
    13ce:	00 00       	nop
					_delay_ms(100);
				
					LED0_Toggle();
    13d0:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_ON();
    13d4:	0e 94 bf 00 	call	0x17e	; 0x17e <Buzzer_ON>
    13d8:	9f ef       	ldi	r25, 0xFF	; 255
    13da:	24 e3       	ldi	r18, 0x34	; 52
    13dc:	8c e0       	ldi	r24, 0x0C	; 12
    13de:	91 50       	subi	r25, 0x01	; 1
    13e0:	20 40       	sbci	r18, 0x00	; 0
    13e2:	80 40       	sbci	r24, 0x00	; 0
    13e4:	e1 f7       	brne	.-8      	; 0x13de <__vector_1+0x9b4>
    13e6:	00 c0       	rjmp	.+0      	; 0x13e8 <__vector_1+0x9be>
    13e8:	00 00       	nop
					_delay_ms(250);
					LED0_Toggle();
    13ea:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    13ee:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	24 e3       	ldi	r18, 0x34	; 52
    13f6:	8c e0       	ldi	r24, 0x0C	; 12
    13f8:	91 50       	subi	r25, 0x01	; 1
    13fa:	20 40       	sbci	r18, 0x00	; 0
    13fc:	80 40       	sbci	r24, 0x00	; 0
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <__vector_1+0x9ce>
    1400:	00 c0       	rjmp	.+0      	; 0x1402 <__vector_1+0x9d8>
    1402:	00 00       	nop
					_delay_ms(250);
					LED0_Toggle();
    1404:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_ON();
    1408:	0e 94 bf 00 	call	0x17e	; 0x17e <Buzzer_ON>
    140c:	9f ef       	ldi	r25, 0xFF	; 255
    140e:	2d ee       	ldi	r18, 0xED	; 237
    1410:	82 e0       	ldi	r24, 0x02	; 2
    1412:	91 50       	subi	r25, 0x01	; 1
    1414:	20 40       	sbci	r18, 0x00	; 0
    1416:	80 40       	sbci	r24, 0x00	; 0
    1418:	e1 f7       	brne	.-8      	; 0x1412 <__vector_1+0x9e8>
    141a:	00 c0       	rjmp	.+0      	; 0x141c <__vector_1+0x9f2>
    141c:	00 00       	nop
					_delay_ms(Delay);
					Buzzer_OFF();
    141e:	0e 94 c5 00 	call	0x18a	; 0x18a <Buzzer_OFF>
    1422:	ca cc       	rjmp	.-1644   	; 0xdb8 <__vector_1+0x38e>
		LCD_Clear();
		UART_TX_Str("\r\n");
		UART_TX_Str("The system is busy!\r\n");
		Servoo_Motor(97);
	
		for(Uint8 j = 0; j < 3; j++)
    1424:	73 94       	inc	r7
    1426:	92 e0       	ldi	r25, 0x02	; 2
    1428:	97 15       	cp	r25, r7
    142a:	08 f0       	brcs	.+2      	; 0x142e <__vector_1+0xa04>
    142c:	3f cb       	rjmp	.-2434   	; 0xaac <__vector_1+0x82>
				}
			}
		}
	
	
		UART_TX_Str("System online!\r\n");
    142e:	84 e1       	ldi	r24, 0x14	; 20
    1430:	92 e0       	ldi	r25, 0x02	; 2
    1432:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("Press any key to control the system\r\n");
    1436:	85 e2       	ldi	r24, 0x25	; 37
    1438:	92 e0       	ldi	r25, 0x02	; 2
    143a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("\r\n");
    143e:	89 eb       	ldi	r24, 0xB9	; 185
    1440:	92 e0       	ldi	r25, 0x02	; 2
    1442:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("\r\n");
    1446:	89 eb       	ldi	r24, 0xB9	; 185
    1448:	92 e0       	ldi	r25, 0x02	; 2
    144a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
	}
}
    144e:	28 96       	adiw	r28, 0x08	; 8
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	df 91       	pop	r29
    145c:	cf 91       	pop	r28
    145e:	ff 91       	pop	r31
    1460:	ef 91       	pop	r30
    1462:	bf 91       	pop	r27
    1464:	af 91       	pop	r26
    1466:	9f 91       	pop	r25
    1468:	8f 91       	pop	r24
    146a:	7f 91       	pop	r23
    146c:	6f 91       	pop	r22
    146e:	5f 91       	pop	r21
    1470:	4f 91       	pop	r20
    1472:	3f 91       	pop	r19
    1474:	2f 91       	pop	r18
    1476:	1f 91       	pop	r17
    1478:	0f 91       	pop	r16
    147a:	ff 90       	pop	r15
    147c:	ef 90       	pop	r14
    147e:	df 90       	pop	r13
    1480:	cf 90       	pop	r12
    1482:	bf 90       	pop	r11
    1484:	af 90       	pop	r10
    1486:	9f 90       	pop	r9
    1488:	8f 90       	pop	r8
    148a:	7f 90       	pop	r7
    148c:	5f 90       	pop	r5
    148e:	4f 90       	pop	r4
    1490:	3f 90       	pop	r3
    1492:	2f 90       	pop	r2
    1494:	0f 90       	pop	r0
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	0f 90       	pop	r0
    149a:	1f 90       	pop	r1
    149c:	18 95       	reti

0000149e <I2C_INIT>:
    149e:	80 e8       	ldi	r24, 0x80	; 128
    14a0:	8f bf       	out	0x3f, r24	; 63
    14a2:	85 e0       	ldi	r24, 0x05	; 5
    14a4:	86 bf       	out	0x36, r24	; 54
    14a6:	8c e0       	ldi	r24, 0x0C	; 12
    14a8:	80 b9       	out	0x00, r24	; 0
    14aa:	11 b8       	out	0x01, r1	; 1
    14ac:	08 95       	ret

000014ae <I2C_SendStartCond>:
    14ae:	84 ea       	ldi	r24, 0xA4	; 164
    14b0:	86 bf       	out	0x36, r24	; 54
    14b2:	06 b6       	in	r0, 0x36	; 54
    14b4:	07 fe       	sbrs	r0, 7
    14b6:	fd cf       	rjmp	.-6      	; 0x14b2 <I2C_SendStartCond+0x4>
    14b8:	08 95       	ret

000014ba <I2C_SendRepStartCond>:
    14ba:	84 ea       	ldi	r24, 0xA4	; 164
    14bc:	86 bf       	out	0x36, r24	; 54
    14be:	06 b6       	in	r0, 0x36	; 54
    14c0:	07 fe       	sbrs	r0, 7
    14c2:	fd cf       	rjmp	.-6      	; 0x14be <I2C_SendRepStartCond+0x4>
    14c4:	08 95       	ret

000014c6 <I2C_SendSlaveAdd_WriteOP>:
    14c6:	88 0f       	add	r24, r24
    14c8:	83 b9       	out	0x03, r24	; 3
    14ca:	84 e8       	ldi	r24, 0x84	; 132
    14cc:	86 bf       	out	0x36, r24	; 54
    14ce:	06 b6       	in	r0, 0x36	; 54
    14d0:	07 fe       	sbrs	r0, 7
    14d2:	fd cf       	rjmp	.-6      	; 0x14ce <I2C_SendSlaveAdd_WriteOP+0x8>
    14d4:	2f ef       	ldi	r18, 0xFF	; 255
    14d6:	81 ee       	ldi	r24, 0xE1	; 225
    14d8:	94 e0       	ldi	r25, 0x04	; 4
    14da:	21 50       	subi	r18, 0x01	; 1
    14dc:	80 40       	sbci	r24, 0x00	; 0
    14de:	90 40       	sbci	r25, 0x00	; 0
    14e0:	e1 f7       	brne	.-8      	; 0x14da <I2C_SendSlaveAdd_WriteOP+0x14>
    14e2:	00 c0       	rjmp	.+0      	; 0x14e4 <I2C_SendSlaveAdd_WriteOP+0x1e>
    14e4:	00 00       	nop
    14e6:	08 95       	ret

000014e8 <I2C_SendSlaveAdd_ReadOP>:
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	81 60       	ori	r24, 0x01	; 1
    14f0:	83 b9       	out	0x03, r24	; 3
    14f2:	84 e8       	ldi	r24, 0x84	; 132
    14f4:	86 bf       	out	0x36, r24	; 54
    14f6:	06 b6       	in	r0, 0x36	; 54
    14f8:	07 fe       	sbrs	r0, 7
    14fa:	fd cf       	rjmp	.-6      	; 0x14f6 <I2C_SendSlaveAdd_ReadOP+0xe>
    14fc:	08 95       	ret

000014fe <I2C_SendData>:
    14fe:	83 b9       	out	0x03, r24	; 3
    1500:	84 e8       	ldi	r24, 0x84	; 132
    1502:	86 bf       	out	0x36, r24	; 54
    1504:	06 b6       	in	r0, 0x36	; 54
    1506:	07 fe       	sbrs	r0, 7
    1508:	fd cf       	rjmp	.-6      	; 0x1504 <I2C_SendData+0x6>
    150a:	08 95       	ret

0000150c <I2C_ReadData>:
    150c:	84 e8       	ldi	r24, 0x84	; 132
    150e:	86 bf       	out	0x36, r24	; 54
    1510:	06 b6       	in	r0, 0x36	; 54
    1512:	07 fe       	sbrs	r0, 7
    1514:	fd cf       	rjmp	.-6      	; 0x1510 <I2C_ReadData+0x4>
    1516:	83 b1       	in	r24, 0x03	; 3
    1518:	08 95       	ret

0000151a <I2C_SendStopCond>:
    151a:	84 e9       	ldi	r24, 0x94	; 148
    151c:	86 bf       	out	0x36, r24	; 54
    151e:	86 b7       	in	r24, 0x36	; 54
    1520:	80 68       	ori	r24, 0x80	; 128
    1522:	86 bf       	out	0x36, r24	; 54
    1524:	08 95       	ret

00001526 <Keypad_Init>:
    1526:	40 e0       	ldi	r20, 0x00	; 0
    1528:	63 e0       	ldi	r22, 0x03	; 3
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	64 e0       	ldi	r22, 0x04	; 4
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    153a:	40 e0       	ldi	r20, 0x00	; 0
    153c:	65 e0       	ldi	r22, 0x05	; 5
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	66 e0       	ldi	r22, 0x06	; 6
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    154e:	63 e0       	ldi	r22, 0x03	; 3
    1550:	80 e0       	ldi	r24, 0x00	; 0
    1552:	0e 94 90 04 	call	0x920	; 0x920 <DIO_SetPin_Pullup>
    1556:	64 e0       	ldi	r22, 0x04	; 4
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 90 04 	call	0x920	; 0x920 <DIO_SetPin_Pullup>
    155e:	65 e0       	ldi	r22, 0x05	; 5
    1560:	80 e0       	ldi	r24, 0x00	; 0
    1562:	0e 94 90 04 	call	0x920	; 0x920 <DIO_SetPin_Pullup>
    1566:	66 e0       	ldi	r22, 0x06	; 6
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	0e 94 90 04 	call	0x920	; 0x920 <DIO_SetPin_Pullup>
    156e:	41 e0       	ldi	r20, 0x01	; 1
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    1578:	41 e0       	ldi	r20, 0x01	; 1
    157a:	61 e0       	ldi	r22, 0x01	; 1
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    1582:	41 e0       	ldi	r20, 0x01	; 1
    1584:	62 e0       	ldi	r22, 0x02	; 2
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    158c:	40 e0       	ldi	r20, 0x00	; 0
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1596:	40 e0       	ldi	r20, 0x00	; 0
    1598:	61 e0       	ldi	r22, 0x01	; 1
    159a:	80 e0       	ldi	r24, 0x00	; 0
    159c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    15a0:	40 e0       	ldi	r20, 0x00	; 0
    15a2:	62 e0       	ldi	r22, 0x02	; 2
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    15aa:	08 95       	ret

000015ac <Keypad_GetValue>:
    15ac:	1f 93       	push	r17
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	d0 e0       	ldi	r29, 0x00	; 0
    15b4:	10 e0       	ldi	r17, 0x00	; 0
    15b6:	28 c0       	rjmp	.+80     	; 0x1608 <Keypad_GetValue+0x5c>
    15b8:	41 e0       	ldi	r20, 0x01	; 1
    15ba:	6d 2f       	mov	r22, r29
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    15c2:	c3 e0       	ldi	r28, 0x03	; 3
    15c4:	19 c0       	rjmp	.+50     	; 0x15f8 <Keypad_GetValue+0x4c>
    15c6:	6c 2f       	mov	r22, r28
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	0e 94 2e 04 	call	0x85c	; 0x85c <DIO_GetPin_Value>
    15ce:	81 11       	cpse	r24, r1
    15d0:	12 c0       	rjmp	.+36     	; 0x15f6 <Keypad_GetValue+0x4a>
    15d2:	ec 2f       	mov	r30, r28
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	33 97       	sbiw	r30, 0x03	; 3
    15d8:	ee 0f       	add	r30, r30
    15da:	ff 1f       	adc	r31, r31
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	e0 5a       	subi	r30, 0xA0	; 160
    15e2:	ff 4f       	sbci	r31, 0xFF	; 255
    15e4:	ed 0f       	add	r30, r29
    15e6:	f1 1d       	adc	r31, r1
    15e8:	10 81       	ld	r17, Z
    15ea:	6c 2f       	mov	r22, r28
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	0e 94 2e 04 	call	0x85c	; 0x85c <DIO_GetPin_Value>
    15f2:	88 23       	and	r24, r24
    15f4:	d1 f3       	breq	.-12     	; 0x15ea <Keypad_GetValue+0x3e>
    15f6:	cf 5f       	subi	r28, 0xFF	; 255
    15f8:	c7 30       	cpi	r28, 0x07	; 7
    15fa:	28 f3       	brcs	.-54     	; 0x15c6 <Keypad_GetValue+0x1a>
    15fc:	40 e0       	ldi	r20, 0x00	; 0
    15fe:	6d 2f       	mov	r22, r29
    1600:	80 e0       	ldi	r24, 0x00	; 0
    1602:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1606:	df 5f       	subi	r29, 0xFF	; 255
    1608:	d3 30       	cpi	r29, 0x03	; 3
    160a:	b0 f2       	brcs	.-84     	; 0x15b8 <Keypad_GetValue+0xc>
    160c:	81 2f       	mov	r24, r17
    160e:	df 91       	pop	r29
    1610:	cf 91       	pop	r28
    1612:	1f 91       	pop	r17
    1614:	08 95       	ret

00001616 <LCD_Write_CMD>:
    1616:	cf 93       	push	r28
    1618:	c8 2f       	mov	r28, r24
    161a:	41 e0       	ldi	r20, 0x01	; 1
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1624:	41 e0       	ldi	r20, 0x01	; 1
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    162e:	41 e0       	ldi	r20, 0x01	; 1
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	81 e0       	ldi	r24, 0x01	; 1
    1634:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1638:	88 b3       	in	r24, 0x18	; 24
    163a:	9c 2f       	mov	r25, r28
    163c:	90 7f       	andi	r25, 0xF0	; 240
    163e:	8f 70       	andi	r24, 0x0F	; 15
    1640:	89 2b       	or	r24, r25
    1642:	88 bb       	out	0x18, r24	; 24
    1644:	40 e0       	ldi	r20, 0x00	; 0
    1646:	62 e0       	ldi	r22, 0x02	; 2
    1648:	81 e0       	ldi	r24, 0x01	; 1
    164a:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    164e:	8f e9       	ldi	r24, 0x9F	; 159
    1650:	9f e0       	ldi	r25, 0x0F	; 15
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	f1 f7       	brne	.-4      	; 0x1652 <LCD_Write_CMD+0x3c>
    1656:	00 c0       	rjmp	.+0      	; 0x1658 <LCD_Write_CMD+0x42>
    1658:	00 00       	nop
    165a:	41 e0       	ldi	r20, 0x01	; 1
    165c:	62 e0       	ldi	r22, 0x02	; 2
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1664:	20 e1       	ldi	r18, 0x10	; 16
    1666:	c2 9f       	mul	r28, r18
    1668:	c0 01       	movw	r24, r0
    166a:	11 24       	eor	r1, r1
    166c:	98 b3       	in	r25, 0x18	; 24
    166e:	9f 70       	andi	r25, 0x0F	; 15
    1670:	89 2b       	or	r24, r25
    1672:	88 bb       	out	0x18, r24	; 24
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	62 e0       	ldi	r22, 0x02	; 2
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    167e:	8f e9       	ldi	r24, 0x9F	; 159
    1680:	9f e0       	ldi	r25, 0x0F	; 15
    1682:	01 97       	sbiw	r24, 0x01	; 1
    1684:	f1 f7       	brne	.-4      	; 0x1682 <LCD_Write_CMD+0x6c>
    1686:	00 c0       	rjmp	.+0      	; 0x1688 <LCD_Write_CMD+0x72>
    1688:	00 00       	nop
    168a:	41 e0       	ldi	r20, 0x01	; 1
    168c:	62 e0       	ldi	r22, 0x02	; 2
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1694:	8f e1       	ldi	r24, 0x1F	; 31
    1696:	9e e4       	ldi	r25, 0x4E	; 78
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <LCD_Write_CMD+0x82>
    169c:	00 c0       	rjmp	.+0      	; 0x169e <LCD_Write_CMD+0x88>
    169e:	00 00       	nop
    16a0:	cf 91       	pop	r28
    16a2:	08 95       	ret

000016a4 <LCD_Init>:
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	60 e0       	ldi	r22, 0x00	; 0
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	81 e0       	ldi	r24, 0x01	; 1
    16b4:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    16b8:	41 e0       	ldi	r20, 0x01	; 1
    16ba:	62 e0       	ldi	r22, 0x02	; 2
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    16c2:	41 e0       	ldi	r20, 0x01	; 1
    16c4:	64 e0       	ldi	r22, 0x04	; 4
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    16cc:	41 e0       	ldi	r20, 0x01	; 1
    16ce:	65 e0       	ldi	r22, 0x05	; 5
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    16d6:	41 e0       	ldi	r20, 0x01	; 1
    16d8:	66 e0       	ldi	r22, 0x06	; 6
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    16e0:	41 e0       	ldi	r20, 0x01	; 1
    16e2:	67 e0       	ldi	r22, 0x07	; 7
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    16ea:	41 e0       	ldi	r20, 0x01	; 1
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    16fe:	41 e0       	ldi	r20, 0x01	; 1
    1700:	62 e0       	ldi	r22, 0x02	; 2
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1708:	41 e0       	ldi	r20, 0x01	; 1
    170a:	64 e0       	ldi	r22, 0x04	; 4
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1712:	41 e0       	ldi	r20, 0x01	; 1
    1714:	65 e0       	ldi	r22, 0x05	; 5
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    171c:	41 e0       	ldi	r20, 0x01	; 1
    171e:	66 e0       	ldi	r22, 0x06	; 6
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1726:	41 e0       	ldi	r20, 0x01	; 1
    1728:	67 e0       	ldi	r22, 0x07	; 7
    172a:	81 e0       	ldi	r24, 0x01	; 1
    172c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1730:	2f ef       	ldi	r18, 0xFF	; 255
    1732:	81 ee       	ldi	r24, 0xE1	; 225
    1734:	94 e0       	ldi	r25, 0x04	; 4
    1736:	21 50       	subi	r18, 0x01	; 1
    1738:	80 40       	sbci	r24, 0x00	; 0
    173a:	90 40       	sbci	r25, 0x00	; 0
    173c:	e1 f7       	brne	.-8      	; 0x1736 <LCD_Init+0x92>
    173e:	00 c0       	rjmp	.+0      	; 0x1740 <LCD_Init+0x9c>
    1740:	00 00       	nop
    1742:	83 e3       	ldi	r24, 0x33	; 51
    1744:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    1748:	82 e3       	ldi	r24, 0x32	; 50
    174a:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    174e:	88 e2       	ldi	r24, 0x28	; 40
    1750:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    175a:	82 e0       	ldi	r24, 0x02	; 2
    175c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    1760:	86 e0       	ldi	r24, 0x06	; 6
    1762:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    1766:	8e e0       	ldi	r24, 0x0E	; 14
    1768:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    176c:	08 95       	ret

0000176e <LCD_Write_Char>:
    176e:	cf 93       	push	r28
    1770:	c8 2f       	mov	r28, r24
    1772:	40 e0       	ldi	r20, 0x00	; 0
    1774:	60 e0       	ldi	r22, 0x00	; 0
    1776:	81 e0       	ldi	r24, 0x01	; 1
    1778:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    177c:	41 e0       	ldi	r20, 0x01	; 1
    177e:	61 e0       	ldi	r22, 0x01	; 1
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1786:	41 e0       	ldi	r20, 0x01	; 1
    1788:	62 e0       	ldi	r22, 0x02	; 2
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1790:	88 b3       	in	r24, 0x18	; 24
    1792:	9c 2f       	mov	r25, r28
    1794:	90 7f       	andi	r25, 0xF0	; 240
    1796:	8f 70       	andi	r24, 0x0F	; 15
    1798:	89 2b       	or	r24, r25
    179a:	88 bb       	out	0x18, r24	; 24
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	62 e0       	ldi	r22, 0x02	; 2
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    17a6:	8f e9       	ldi	r24, 0x9F	; 159
    17a8:	9f e0       	ldi	r25, 0x0F	; 15
    17aa:	01 97       	sbiw	r24, 0x01	; 1
    17ac:	f1 f7       	brne	.-4      	; 0x17aa <LCD_Write_Char+0x3c>
    17ae:	00 c0       	rjmp	.+0      	; 0x17b0 <LCD_Write_Char+0x42>
    17b0:	00 00       	nop
    17b2:	41 e0       	ldi	r20, 0x01	; 1
    17b4:	62 e0       	ldi	r22, 0x02	; 2
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    17bc:	20 e1       	ldi	r18, 0x10	; 16
    17be:	c2 9f       	mul	r28, r18
    17c0:	c0 01       	movw	r24, r0
    17c2:	11 24       	eor	r1, r1
    17c4:	98 b3       	in	r25, 0x18	; 24
    17c6:	9f 70       	andi	r25, 0x0F	; 15
    17c8:	89 2b       	or	r24, r25
    17ca:	88 bb       	out	0x18, r24	; 24
    17cc:	40 e0       	ldi	r20, 0x00	; 0
    17ce:	62 e0       	ldi	r22, 0x02	; 2
    17d0:	81 e0       	ldi	r24, 0x01	; 1
    17d2:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    17d6:	8f e9       	ldi	r24, 0x9F	; 159
    17d8:	9f e0       	ldi	r25, 0x0F	; 15
    17da:	01 97       	sbiw	r24, 0x01	; 1
    17dc:	f1 f7       	brne	.-4      	; 0x17da <LCD_Write_Char+0x6c>
    17de:	00 c0       	rjmp	.+0      	; 0x17e0 <LCD_Write_Char+0x72>
    17e0:	00 00       	nop
    17e2:	41 e0       	ldi	r20, 0x01	; 1
    17e4:	62 e0       	ldi	r22, 0x02	; 2
    17e6:	81 e0       	ldi	r24, 0x01	; 1
    17e8:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    17ec:	cf 91       	pop	r28
    17ee:	08 95       	ret

000017f0 <LCD_Write_String>:
    17f0:	0f 93       	push	r16
    17f2:	1f 93       	push	r17
    17f4:	cf 93       	push	r28
    17f6:	8c 01       	movw	r16, r24
    17f8:	c0 e0       	ldi	r28, 0x00	; 0
    17fa:	03 c0       	rjmp	.+6      	; 0x1802 <LCD_Write_String+0x12>
    17fc:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_Write_Char>
    1800:	cf 5f       	subi	r28, 0xFF	; 255
    1802:	f8 01       	movw	r30, r16
    1804:	ec 0f       	add	r30, r28
    1806:	f1 1d       	adc	r31, r1
    1808:	80 81       	ld	r24, Z
    180a:	81 11       	cpse	r24, r1
    180c:	f7 cf       	rjmp	.-18     	; 0x17fc <LCD_Write_String+0xc>
    180e:	cf 91       	pop	r28
    1810:	1f 91       	pop	r17
    1812:	0f 91       	pop	r16
    1814:	08 95       	ret

00001816 <LCD_Write_Integer>:
    1816:	8f 92       	push	r8
    1818:	9f 92       	push	r9
    181a:	af 92       	push	r10
    181c:	bf 92       	push	r11
    181e:	ef 92       	push	r14
    1820:	ff 92       	push	r15
    1822:	0f 93       	push	r16
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	4b 01       	movw	r8, r22
    182c:	5c 01       	movw	r10, r24
    182e:	67 2b       	or	r22, r23
    1830:	68 2b       	or	r22, r24
    1832:	69 2b       	or	r22, r25
    1834:	19 f4       	brne	.+6      	; 0x183c <LCD_Write_Integer+0x26>
    1836:	80 e3       	ldi	r24, 0x30	; 48
    1838:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_Write_Char>
    183c:	01 e0       	ldi	r16, 0x01	; 1
    183e:	10 e0       	ldi	r17, 0x00	; 0
    1840:	e1 2c       	mov	r14, r1
    1842:	f1 2c       	mov	r15, r1
    1844:	2f c0       	rjmp	.+94     	; 0x18a4 <LCD_Write_Integer+0x8e>
    1846:	c7 01       	movw	r24, r14
    1848:	88 0f       	add	r24, r24
    184a:	99 1f       	adc	r25, r25
    184c:	b7 01       	movw	r22, r14
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	66 0f       	add	r22, r22
    1854:	77 1f       	adc	r23, r23
    1856:	66 0f       	add	r22, r22
    1858:	77 1f       	adc	r23, r23
    185a:	7c 01       	movw	r14, r24
    185c:	e6 0e       	add	r14, r22
    185e:	f7 1e       	adc	r15, r23
    1860:	c5 01       	movw	r24, r10
    1862:	b4 01       	movw	r22, r8
    1864:	2a e0       	ldi	r18, 0x0A	; 10
    1866:	30 e0       	ldi	r19, 0x00	; 0
    1868:	40 e0       	ldi	r20, 0x00	; 0
    186a:	50 e0       	ldi	r21, 0x00	; 0
    186c:	0e 94 66 21 	call	0x42cc	; 0x42cc <__udivmodsi4>
    1870:	e6 0e       	add	r14, r22
    1872:	f7 1e       	adc	r15, r23
    1874:	e1 14       	cp	r14, r1
    1876:	f1 04       	cpc	r15, r1
    1878:	59 f4       	brne	.+22     	; 0x1890 <LCD_Write_Integer+0x7a>
    187a:	c8 01       	movw	r24, r16
    187c:	88 0f       	add	r24, r24
    187e:	99 1f       	adc	r25, r25
    1880:	00 0f       	add	r16, r16
    1882:	11 1f       	adc	r17, r17
    1884:	00 0f       	add	r16, r16
    1886:	11 1f       	adc	r17, r17
    1888:	00 0f       	add	r16, r16
    188a:	11 1f       	adc	r17, r17
    188c:	08 0f       	add	r16, r24
    188e:	19 1f       	adc	r17, r25
    1890:	c5 01       	movw	r24, r10
    1892:	b4 01       	movw	r22, r8
    1894:	2a e0       	ldi	r18, 0x0A	; 10
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e0       	ldi	r20, 0x00	; 0
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	0e 94 66 21 	call	0x42cc	; 0x42cc <__udivmodsi4>
    18a0:	49 01       	movw	r8, r18
    18a2:	5a 01       	movw	r10, r20
    18a4:	81 14       	cp	r8, r1
    18a6:	91 04       	cpc	r9, r1
    18a8:	a1 04       	cpc	r10, r1
    18aa:	b1 04       	cpc	r11, r1
    18ac:	61 f6       	brne	.-104    	; 0x1846 <LCD_Write_Integer+0x30>
    18ae:	a1 2c       	mov	r10, r1
    18b0:	b1 2c       	mov	r11, r1
    18b2:	16 c0       	rjmp	.+44     	; 0x18e0 <LCD_Write_Integer+0xca>
    18b4:	c7 01       	movw	r24, r14
    18b6:	6a e0       	ldi	r22, 0x0A	; 10
    18b8:	70 e0       	ldi	r23, 0x00	; 0
    18ba:	0e 94 52 21 	call	0x42a4	; 0x42a4 <__divmodhi4>
    18be:	d6 2f       	mov	r29, r22
    18c0:	c7 2f       	mov	r28, r23
    18c2:	80 5d       	subi	r24, 0xD0	; 208
    18c4:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_Write_Char>
    18c8:	ed 2e       	mov	r14, r29
    18ca:	fc 2e       	mov	r15, r28
    18cc:	e1 14       	cp	r14, r1
    18ce:	f1 04       	cpc	r15, r1
    18d0:	39 f4       	brne	.+14     	; 0x18e0 <LCD_Write_Integer+0xca>
    18d2:	0a 30       	cpi	r16, 0x0A	; 10
    18d4:	11 05       	cpc	r17, r1
    18d6:	24 f0       	brlt	.+8      	; 0x18e0 <LCD_Write_Integer+0xca>
    18d8:	78 01       	movw	r14, r16
    18da:	aa 24       	eor	r10, r10
    18dc:	a3 94       	inc	r10
    18de:	b1 2c       	mov	r11, r1
    18e0:	ea 14       	cp	r14, r10
    18e2:	fb 04       	cpc	r15, r11
    18e4:	39 f7       	brne	.-50     	; 0x18b4 <LCD_Write_Integer+0x9e>
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	0f 91       	pop	r16
    18ee:	ff 90       	pop	r15
    18f0:	ef 90       	pop	r14
    18f2:	bf 90       	pop	r11
    18f4:	af 90       	pop	r10
    18f6:	9f 90       	pop	r9
    18f8:	8f 90       	pop	r8
    18fa:	08 95       	ret

000018fc <LCD_Clear>:
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    1902:	08 95       	ret

00001904 <LCD_Goto>:
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	00 d0       	rcall	.+0      	; 0x190a <LCD_Goto+0x6>
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	90 e8       	ldi	r25, 0x80	; 128
    1910:	99 83       	std	Y+1, r25	; 0x01
    1912:	90 ec       	ldi	r25, 0xC0	; 192
    1914:	9a 83       	std	Y+2, r25	; 0x02
    1916:	82 30       	cpi	r24, 0x02	; 2
    1918:	08 f0       	brcs	.+2      	; 0x191c <LCD_Goto+0x18>
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	68 32       	cpi	r22, 0x28	; 40
    191e:	08 f0       	brcs	.+2      	; 0x1922 <LCD_Goto+0x1e>
    1920:	60 e0       	ldi	r22, 0x00	; 0
    1922:	e1 e0       	ldi	r30, 0x01	; 1
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	ec 0f       	add	r30, r28
    1928:	fd 1f       	adc	r31, r29
    192a:	e8 0f       	add	r30, r24
    192c:	f1 1d       	adc	r31, r1
    192e:	80 81       	ld	r24, Z
    1930:	86 0f       	add	r24, r22
    1932:	0e 94 0b 0b 	call	0x1616	; 0x1616 <LCD_Write_CMD>
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <LED0_Init>:
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	62 e0       	ldi	r22, 0x02	; 2
    1944:	82 e0       	ldi	r24, 0x02	; 2
    1946:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    194a:	41 e0       	ldi	r20, 0x01	; 1
    194c:	62 e0       	ldi	r22, 0x02	; 2
    194e:	82 e0       	ldi	r24, 0x02	; 2
    1950:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1954:	08 95       	ret

00001956 <LED0_ON>:
    1956:	40 e0       	ldi	r20, 0x00	; 0
    1958:	62 e0       	ldi	r22, 0x02	; 2
    195a:	82 e0       	ldi	r24, 0x02	; 2
    195c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1960:	08 95       	ret

00001962 <LED0_OFF>:
    1962:	41 e0       	ldi	r20, 0x01	; 1
    1964:	62 e0       	ldi	r22, 0x02	; 2
    1966:	82 e0       	ldi	r24, 0x02	; 2
    1968:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    196c:	08 95       	ret

0000196e <LED0_Toggle>:
    196e:	62 e0       	ldi	r22, 0x02	; 2
    1970:	82 e0       	ldi	r24, 0x02	; 2
    1972:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <DIO_TogglePin_Value>
    1976:	08 95       	ret

00001978 <LED1_Init>:
    1978:	41 e0       	ldi	r20, 0x01	; 1
    197a:	63 e0       	ldi	r22, 0x03	; 3
    197c:	82 e0       	ldi	r24, 0x02	; 2
    197e:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	63 e0       	ldi	r22, 0x03	; 3
    1986:	82 e0       	ldi	r24, 0x02	; 2
    1988:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    198c:	08 95       	ret

0000198e <LED1_ON>:
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	63 e0       	ldi	r22, 0x03	; 3
    1992:	82 e0       	ldi	r24, 0x02	; 2
    1994:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1998:	08 95       	ret

0000199a <LED1_OFF>:
    199a:	41 e0       	ldi	r20, 0x01	; 1
    199c:	63 e0       	ldi	r22, 0x03	; 3
    199e:	82 e0       	ldi	r24, 0x02	; 2
    19a0:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    19a4:	08 95       	ret

000019a6 <LED1_Toggle>:
    19a6:	63 e0       	ldi	r22, 0x03	; 3
    19a8:	82 e0       	ldi	r24, 0x02	; 2
    19aa:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <DIO_TogglePin_Value>
    19ae:	08 95       	ret

000019b0 <LED2_Init>:
    19b0:	41 e0       	ldi	r20, 0x01	; 1
    19b2:	64 e0       	ldi	r22, 0x04	; 4
    19b4:	82 e0       	ldi	r24, 0x02	; 2
    19b6:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    19ba:	41 e0       	ldi	r20, 0x01	; 1
    19bc:	64 e0       	ldi	r22, 0x04	; 4
    19be:	82 e0       	ldi	r24, 0x02	; 2
    19c0:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    19c4:	08 95       	ret

000019c6 <LED2_ON>:
    19c6:	40 e0       	ldi	r20, 0x00	; 0
    19c8:	64 e0       	ldi	r22, 0x04	; 4
    19ca:	82 e0       	ldi	r24, 0x02	; 2
    19cc:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    19d0:	08 95       	ret

000019d2 <LED2_OFF>:
    19d2:	41 e0       	ldi	r20, 0x01	; 1
    19d4:	64 e0       	ldi	r22, 0x04	; 4
    19d6:	82 e0       	ldi	r24, 0x02	; 2
    19d8:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    19dc:	08 95       	ret

000019de <LED2_Toggle>:
    19de:	64 e0       	ldi	r22, 0x04	; 4
    19e0:	82 e0       	ldi	r24, 0x02	; 2
    19e2:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <DIO_TogglePin_Value>
    19e6:	08 95       	ret

000019e8 <LED3_Init>:
    19e8:	41 e0       	ldi	r20, 0x01	; 1
    19ea:	65 e0       	ldi	r22, 0x05	; 5
    19ec:	82 e0       	ldi	r24, 0x02	; 2
    19ee:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    19f2:	41 e0       	ldi	r20, 0x01	; 1
    19f4:	65 e0       	ldi	r22, 0x05	; 5
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    19fc:	08 95       	ret

000019fe <LED3_ON>:
    19fe:	40 e0       	ldi	r20, 0x00	; 0
    1a00:	65 e0       	ldi	r22, 0x05	; 5
    1a02:	82 e0       	ldi	r24, 0x02	; 2
    1a04:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1a08:	08 95       	ret

00001a0a <LED3_OFF>:
    1a0a:	41 e0       	ldi	r20, 0x01	; 1
    1a0c:	65 e0       	ldi	r22, 0x05	; 5
    1a0e:	82 e0       	ldi	r24, 0x02	; 2
    1a10:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1a14:	08 95       	ret

00001a16 <LED3_Toggle>:
    1a16:	65 e0       	ldi	r22, 0x05	; 5
    1a18:	82 e0       	ldi	r24, 0x02	; 2
    1a1a:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <DIO_TogglePin_Value>
    1a1e:	08 95       	ret

00001a20 <LED4_Init>:
    1a20:	41 e0       	ldi	r20, 0x01	; 1
    1a22:	66 e0       	ldi	r22, 0x06	; 6
    1a24:	82 e0       	ldi	r24, 0x02	; 2
    1a26:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    1a2a:	41 e0       	ldi	r20, 0x01	; 1
    1a2c:	66 e0       	ldi	r22, 0x06	; 6
    1a2e:	82 e0       	ldi	r24, 0x02	; 2
    1a30:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1a34:	08 95       	ret

00001a36 <LED4_ON>:
    1a36:	40 e0       	ldi	r20, 0x00	; 0
    1a38:	66 e0       	ldi	r22, 0x06	; 6
    1a3a:	82 e0       	ldi	r24, 0x02	; 2
    1a3c:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1a40:	08 95       	ret

00001a42 <LED4_OFF>:
    1a42:	41 e0       	ldi	r20, 0x01	; 1
    1a44:	66 e0       	ldi	r22, 0x06	; 6
    1a46:	82 e0       	ldi	r24, 0x02	; 2
    1a48:	0e 94 bd 03 	call	0x77a	; 0x77a <DIO_SetPin_Value>
    1a4c:	08 95       	ret

00001a4e <LED4_Toggle>:
    1a4e:	66 e0       	ldi	r22, 0x06	; 6
    1a50:	82 e0       	ldi	r24, 0x02	; 2
    1a52:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <DIO_TogglePin_Value>
    1a56:	08 95       	ret

00001a58 <main>:
    1a58:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
    1a5c:	0e 94 b4 00 	call	0x168	; 0x168 <Buzzer_Init>
    1a60:	0e 94 c4 04 	call	0x988	; 0x988 <EEPROM_INIT>
    1a64:	0e 94 06 05 	call	0xa0c	; 0xa0c <INT0_Init>
    1a68:	0e 94 93 0a 	call	0x1526	; 0x1526 <Keypad_Init>
    1a6c:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <LCD_Init>
    1a70:	0e 94 a0 0c 	call	0x1940	; 0x1940 <LED0_Init>
    1a74:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LED1_Init>
    1a78:	0e 94 d8 0c 	call	0x19b0	; 0x19b0 <LED2_Init>
    1a7c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <LED3_Init>
    1a80:	0e 94 10 0d 	call	0x1a20	; 0x1a20 <LED4_Init>
    1a84:	0e 94 b6 0d 	call	0x1b6c	; 0x1b6c <Servo_Init>
    1a88:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <Timer0_Init>
    1a8c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <Timer0_Start>
    1a90:	60 e0       	ldi	r22, 0x00	; 0
    1a92:	70 e0       	ldi	r23, 0x00	; 0
    1a94:	cb 01       	movw	r24, r22
    1a96:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <PWM0_Gen>
    1a9a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <Timer2_Init>
    1a9e:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <UART_Init>
    1aa2:	0e 94 11 03 	call	0x622	; 0x622 <DC_Motor1_INIT>
    1aa6:	60 e0       	ldi	r22, 0x00	; 0
    1aa8:	84 e0       	ldi	r24, 0x04	; 4
    1aaa:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    1aae:	8f 3f       	cpi	r24, 0xFF	; 255
    1ab0:	31 f0       	breq	.+12     	; 0x1abe <main+0x66>
    1ab2:	60 e0       	ldi	r22, 0x00	; 0
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    1aba:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <KP_Counter>
    1abe:	61 e0       	ldi	r22, 0x01	; 1
    1ac0:	84 e0       	ldi	r24, 0x04	; 4
    1ac2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    1ac6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ac8:	31 f0       	breq	.+12     	; 0x1ad6 <main+0x7e>
    1aca:	61 e0       	ldi	r22, 0x01	; 1
    1acc:	84 e0       	ldi	r24, 0x04	; 4
    1ace:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    1ad2:	80 93 8a 07 	sts	0x078A, r24	; 0x80078a <KP_Counter>
    1ad6:	62 e0       	ldi	r22, 0x02	; 2
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    1ade:	8f 3f       	cpi	r24, 0xFF	; 255
    1ae0:	31 f0       	breq	.+12     	; 0x1aee <main+0x96>
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	84 e0       	ldi	r24, 0x04	; 4
    1ae6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    1aea:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <AD_Counter>
    1aee:	c1 e0       	ldi	r28, 0x01	; 1
    1af0:	0b c0       	rjmp	.+22     	; 0x1b08 <main+0xb0>
    1af2:	41 e3       	ldi	r20, 0x31	; 49
    1af4:	6c 2f       	mov	r22, r28
    1af6:	85 e0       	ldi	r24, 0x05	; 5
    1af8:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
    1afc:	41 e3       	ldi	r20, 0x31	; 49
    1afe:	6c 2f       	mov	r22, r28
    1b00:	86 e0       	ldi	r24, 0x06	; 6
    1b02:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
    1b06:	cf 5f       	subi	r28, 0xFF	; 255
    1b08:	c5 30       	cpi	r28, 0x05	; 5
    1b0a:	98 f3       	brcs	.-26     	; 0x1af2 <main+0x9a>
    1b0c:	8b e4       	ldi	r24, 0x4B	; 75
    1b0e:	92 e0       	ldi	r25, 0x02	; 2
    1b10:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    1b14:	8b e5       	ldi	r24, 0x5B	; 91
    1b16:	92 e0       	ldi	r25, 0x02	; 2
    1b18:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    1b1c:	89 eb       	ldi	r24, 0xB9	; 185
    1b1e:	92 e0       	ldi	r25, 0x02	; 2
    1b20:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    1b24:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <Timer2_Start>
    1b28:	65 e0       	ldi	r22, 0x05	; 5
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	90 e0       	ldi	r25, 0x00	; 0
    1b30:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    1b34:	87 e0       	ldi	r24, 0x07	; 7
    1b36:	0e 94 63 00 	call	0xc6	; 0xc6 <ADC_Read>
    1b3a:	02 c0       	rjmp	.+4      	; 0x1b40 <main+0xe8>
    1b3c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <emergency_case>
    1b40:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    1b44:	90 91 6a 07 	lds	r25, 0x076A	; 0x80076a <eme_check+0x1>
    1b48:	89 2b       	or	r24, r25
    1b4a:	c1 f7       	brne	.-16     	; 0x1b3c <main+0xe4>
    1b4c:	f9 cf       	rjmp	.-14     	; 0x1b40 <main+0xe8>

00001b4e <Servoo_Motor>:
    1b4e:	1d bc       	out	0x2d, r1	; 45
    1b50:	1c bc       	out	0x2c, r1	; 44
    1b52:	27 e8       	ldi	r18, 0x87	; 135
    1b54:	33 e1       	ldi	r19, 0x13	; 19
    1b56:	37 bd       	out	0x27, r19	; 39
    1b58:	26 bd       	out	0x26, r18	; 38
    1b5a:	7b bd       	out	0x2b, r23	; 43
    1b5c:	6a bd       	out	0x2a, r22	; 42
    1b5e:	8f b5       	in	r24, 0x2f	; 47
    1b60:	82 6a       	ori	r24, 0xA2	; 162
    1b62:	8f bd       	out	0x2f, r24	; 47
    1b64:	8e b5       	in	r24, 0x2e	; 46
    1b66:	8b 61       	ori	r24, 0x1B	; 27
    1b68:	8e bd       	out	0x2e, r24	; 46
    1b6a:	08 95       	ret

00001b6c <Servo_Init>:
    1b6c:	81 b3       	in	r24, 0x11	; 17
    1b6e:	80 62       	ori	r24, 0x20	; 32
    1b70:	81 bb       	out	0x11, r24	; 17
    1b72:	61 e6       	ldi	r22, 0x61	; 97
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Servoo_Motor>
    1b7e:	08 95       	ret

00001b80 <Timer0_Init>:
    1b80:	8f b7       	in	r24, 0x3f	; 63
    1b82:	80 68       	ori	r24, 0x80	; 128
    1b84:	8f bf       	out	0x3f, r24	; 63
    1b86:	83 b7       	in	r24, 0x33	; 51
    1b88:	88 60       	ori	r24, 0x08	; 8
    1b8a:	83 bf       	out	0x33, r24	; 51
    1b8c:	83 b7       	in	r24, 0x33	; 51
    1b8e:	80 64       	ori	r24, 0x40	; 64
    1b90:	83 bf       	out	0x33, r24	; 51
    1b92:	83 b7       	in	r24, 0x33	; 51
    1b94:	8f 7c       	andi	r24, 0xCF	; 207
    1b96:	80 62       	ori	r24, 0x20	; 32
    1b98:	83 bf       	out	0x33, r24	; 51
    1b9a:	89 b7       	in	r24, 0x39	; 57
    1b9c:	81 60       	ori	r24, 0x01	; 1
    1b9e:	89 bf       	out	0x39, r24	; 57
    1ba0:	41 e0       	ldi	r20, 0x01	; 1
    1ba2:	63 e0       	ldi	r22, 0x03	; 3
    1ba4:	81 e0       	ldi	r24, 0x01	; 1
    1ba6:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
    1baa:	08 95       	ret

00001bac <PWM0_Gen>:
    1bac:	cf 92       	push	r12
    1bae:	df 92       	push	r13
    1bb0:	ef 92       	push	r14
    1bb2:	ff 92       	push	r15
    1bb4:	6b 01       	movw	r12, r22
    1bb6:	7c 01       	movw	r14, r24
    1bb8:	20 e0       	ldi	r18, 0x00	; 0
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	a9 01       	movw	r20, r18
    1bbe:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    1bc2:	88 23       	and	r24, r24
    1bc4:	5c f0       	brlt	.+22     	; 0x1bdc <PWM0_Gen+0x30>
    1bc6:	20 e0       	ldi	r18, 0x00	; 0
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	48 ec       	ldi	r20, 0xC8	; 200
    1bcc:	52 e4       	ldi	r21, 0x42	; 66
    1bce:	c7 01       	movw	r24, r14
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__gesf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	2c f0       	brlt	.+10     	; 0x1be4 <PWM0_Gen+0x38>
    1bda:	0c c0       	rjmp	.+24     	; 0x1bf4 <PWM0_Gen+0x48>
    1bdc:	c1 2c       	mov	r12, r1
    1bde:	d1 2c       	mov	r13, r1
    1be0:	76 01       	movw	r14, r12
    1be2:	08 c0       	rjmp	.+16     	; 0x1bf4 <PWM0_Gen+0x48>
    1be4:	0f 2e       	mov	r0, r31
    1be6:	c1 2c       	mov	r12, r1
    1be8:	d1 2c       	mov	r13, r1
    1bea:	f8 ec       	ldi	r31, 0xC8	; 200
    1bec:	ef 2e       	mov	r14, r31
    1bee:	f2 e4       	ldi	r31, 0x42	; 66
    1bf0:	ff 2e       	mov	r15, r31
    1bf2:	f0 2d       	mov	r31, r0
    1bf4:	20 e0       	ldi	r18, 0x00	; 0
    1bf6:	30 e0       	ldi	r19, 0x00	; 0
    1bf8:	a9 01       	movw	r20, r18
    1bfa:	c7 01       	movw	r24, r14
    1bfc:	b6 01       	movw	r22, r12
    1bfe:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    1c02:	88 23       	and	r24, r24
    1c04:	b9 f0       	breq	.+46     	; 0x1c34 <PWM0_Gen+0x88>
    1c06:	20 e0       	ldi	r18, 0x00	; 0
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	48 ec       	ldi	r20, 0xC8	; 200
    1c0c:	52 e4       	ldi	r21, 0x42	; 66
    1c0e:	c7 01       	movw	r24, r14
    1c10:	b6 01       	movw	r22, r12
    1c12:	0e 94 8d 1f 	call	0x3f1a	; 0x3f1a <__divsf3>
    1c16:	20 e0       	ldi	r18, 0x00	; 0
    1c18:	30 e0       	ldi	r19, 0x00	; 0
    1c1a:	40 e8       	ldi	r20, 0x80	; 128
    1c1c:	53 e4       	ldi	r21, 0x43	; 67
    1c1e:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__mulsf3>
    1c22:	20 e0       	ldi	r18, 0x00	; 0
    1c24:	30 e0       	ldi	r19, 0x00	; 0
    1c26:	40 e8       	ldi	r20, 0x80	; 128
    1c28:	5f e3       	ldi	r21, 0x3F	; 63
    1c2a:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__subsf3>
    1c2e:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <__fixunssfsi>
    1c32:	01 c0       	rjmp	.+2      	; 0x1c36 <PWM0_Gen+0x8a>
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	6c bf       	out	0x3c, r22	; 60
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <Timer0_Start>:
    1c42:	83 b7       	in	r24, 0x33	; 51
    1c44:	88 7f       	andi	r24, 0xF8	; 248
    1c46:	85 60       	ori	r24, 0x05	; 5
    1c48:	83 bf       	out	0x33, r24	; 51
    1c4a:	08 95       	ret

00001c4c <__vector_11>:
    1c4c:	1f 92       	push	r1
    1c4e:	0f 92       	push	r0
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	0f 92       	push	r0
    1c54:	11 24       	eor	r1, r1
    1c56:	4f 93       	push	r20
    1c58:	5f 93       	push	r21
    1c5a:	6f 93       	push	r22
    1c5c:	7f 93       	push	r23
    1c5e:	8f 93       	push	r24
    1c60:	9f 93       	push	r25
    1c62:	af 93       	push	r26
    1c64:	bf 93       	push	r27
    1c66:	80 91 77 07 	lds	r24, 0x0777	; 0x800777 <Count.1709>
    1c6a:	90 91 78 07 	lds	r25, 0x0778	; 0x800778 <Count.1709+0x1>
    1c6e:	a0 91 79 07 	lds	r26, 0x0779	; 0x800779 <Count.1709+0x2>
    1c72:	b0 91 7a 07 	lds	r27, 0x077A	; 0x80077a <Count.1709+0x3>
    1c76:	01 96       	adiw	r24, 0x01	; 1
    1c78:	a1 1d       	adc	r26, r1
    1c7a:	b1 1d       	adc	r27, r1
    1c7c:	80 93 77 07 	sts	0x0777, r24	; 0x800777 <Count.1709>
    1c80:	90 93 78 07 	sts	0x0778, r25	; 0x800778 <Count.1709+0x1>
    1c84:	a0 93 79 07 	sts	0x0779, r26	; 0x800779 <Count.1709+0x2>
    1c88:	b0 93 7a 07 	sts	0x077A, r27	; 0x80077a <Count.1709+0x3>
    1c8c:	40 91 7f 07 	lds	r20, 0x077F	; 0x80077f <Timer0_Num_OVF>
    1c90:	50 91 80 07 	lds	r21, 0x0780	; 0x800780 <Timer0_Num_OVF+0x1>
    1c94:	60 e0       	ldi	r22, 0x00	; 0
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	84 17       	cp	r24, r20
    1c9a:	95 07       	cpc	r25, r21
    1c9c:	a6 07       	cpc	r26, r22
    1c9e:	b7 07       	cpc	r27, r23
    1ca0:	59 f4       	brne	.+22     	; 0x1cb8 <__vector_11+0x6c>
    1ca2:	10 92 77 07 	sts	0x0777, r1	; 0x800777 <Count.1709>
    1ca6:	10 92 78 07 	sts	0x0778, r1	; 0x800778 <Count.1709+0x1>
    1caa:	10 92 79 07 	sts	0x0779, r1	; 0x800779 <Count.1709+0x2>
    1cae:	10 92 7a 07 	sts	0x077A, r1	; 0x80077a <Count.1709+0x3>
    1cb2:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <Timer0_Init_Value>
    1cb6:	82 bf       	out	0x32, r24	; 50
    1cb8:	bf 91       	pop	r27
    1cba:	af 91       	pop	r26
    1cbc:	9f 91       	pop	r25
    1cbe:	8f 91       	pop	r24
    1cc0:	7f 91       	pop	r23
    1cc2:	6f 91       	pop	r22
    1cc4:	5f 91       	pop	r21
    1cc6:	4f 91       	pop	r20
    1cc8:	0f 90       	pop	r0
    1cca:	0f be       	out	0x3f, r0	; 63
    1ccc:	0f 90       	pop	r0
    1cce:	1f 90       	pop	r1
    1cd0:	18 95       	reti

00001cd2 <__vector_10>:
    1cd2:	1f 92       	push	r1
    1cd4:	0f 92       	push	r0
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	0f 92       	push	r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	4f 93       	push	r20
    1cde:	5f 93       	push	r21
    1ce0:	6f 93       	push	r22
    1ce2:	7f 93       	push	r23
    1ce4:	8f 93       	push	r24
    1ce6:	9f 93       	push	r25
    1ce8:	af 93       	push	r26
    1cea:	bf 93       	push	r27
    1cec:	80 91 73 07 	lds	r24, 0x0773	; 0x800773 <Count.1715>
    1cf0:	90 91 74 07 	lds	r25, 0x0774	; 0x800774 <Count.1715+0x1>
    1cf4:	a0 91 75 07 	lds	r26, 0x0775	; 0x800775 <Count.1715+0x2>
    1cf8:	b0 91 76 07 	lds	r27, 0x0776	; 0x800776 <Count.1715+0x3>
    1cfc:	01 96       	adiw	r24, 0x01	; 1
    1cfe:	a1 1d       	adc	r26, r1
    1d00:	b1 1d       	adc	r27, r1
    1d02:	80 93 73 07 	sts	0x0773, r24	; 0x800773 <Count.1715>
    1d06:	90 93 74 07 	sts	0x0774, r25	; 0x800774 <Count.1715+0x1>
    1d0a:	a0 93 75 07 	sts	0x0775, r26	; 0x800775 <Count.1715+0x2>
    1d0e:	b0 93 76 07 	sts	0x0776, r27	; 0x800776 <Count.1715+0x3>
    1d12:	81 30       	cpi	r24, 0x01	; 1
    1d14:	91 05       	cpc	r25, r1
    1d16:	a1 05       	cpc	r26, r1
    1d18:	b1 05       	cpc	r27, r1
    1d1a:	b9 f4       	brne	.+46     	; 0x1d4a <__vector_10+0x78>
    1d1c:	40 91 7f 07 	lds	r20, 0x077F	; 0x80077f <Timer0_Num_OVF>
    1d20:	50 91 80 07 	lds	r21, 0x0780	; 0x800780 <Timer0_Num_OVF+0x1>
    1d24:	60 e0       	ldi	r22, 0x00	; 0
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	84 17       	cp	r24, r20
    1d2a:	95 07       	cpc	r25, r21
    1d2c:	a6 07       	cpc	r26, r22
    1d2e:	b7 07       	cpc	r27, r23
    1d30:	61 f4       	brne	.+24     	; 0x1d4a <__vector_10+0x78>
    1d32:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <Count.1715>
    1d36:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <Count.1715+0x1>
    1d3a:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <Count.1715+0x2>
    1d3e:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <Count.1715+0x3>
    1d42:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <Timer0_Init_Value>
    1d46:	8c bf       	out	0x3c, r24	; 60
    1d48:	1e c0       	rjmp	.+60     	; 0x1d86 <__vector_10+0xb4>
    1d4a:	81 30       	cpi	r24, 0x01	; 1
    1d4c:	91 05       	cpc	r25, r1
    1d4e:	a1 05       	cpc	r26, r1
    1d50:	b1 05       	cpc	r27, r1
    1d52:	19 f4       	brne	.+6      	; 0x1d5a <__vector_10+0x88>
    1d54:	8f ef       	ldi	r24, 0xFF	; 255
    1d56:	8c bf       	out	0x3c, r24	; 60
    1d58:	16 c0       	rjmp	.+44     	; 0x1d86 <__vector_10+0xb4>
    1d5a:	40 91 7f 07 	lds	r20, 0x077F	; 0x80077f <Timer0_Num_OVF>
    1d5e:	50 91 80 07 	lds	r21, 0x0780	; 0x800780 <Timer0_Num_OVF+0x1>
    1d62:	60 e0       	ldi	r22, 0x00	; 0
    1d64:	70 e0       	ldi	r23, 0x00	; 0
    1d66:	84 17       	cp	r24, r20
    1d68:	95 07       	cpc	r25, r21
    1d6a:	a6 07       	cpc	r26, r22
    1d6c:	b7 07       	cpc	r27, r23
    1d6e:	59 f4       	brne	.+22     	; 0x1d86 <__vector_10+0xb4>
    1d70:	10 92 73 07 	sts	0x0773, r1	; 0x800773 <Count.1715>
    1d74:	10 92 74 07 	sts	0x0774, r1	; 0x800774 <Count.1715+0x1>
    1d78:	10 92 75 07 	sts	0x0775, r1	; 0x800775 <Count.1715+0x2>
    1d7c:	10 92 76 07 	sts	0x0776, r1	; 0x800776 <Count.1715+0x3>
    1d80:	80 91 7e 07 	lds	r24, 0x077E	; 0x80077e <Timer0_Init_Value>
    1d84:	8c bf       	out	0x3c, r24	; 60
    1d86:	bf 91       	pop	r27
    1d88:	af 91       	pop	r26
    1d8a:	9f 91       	pop	r25
    1d8c:	8f 91       	pop	r24
    1d8e:	7f 91       	pop	r23
    1d90:	6f 91       	pop	r22
    1d92:	5f 91       	pop	r21
    1d94:	4f 91       	pop	r20
    1d96:	0f 90       	pop	r0
    1d98:	0f be       	out	0x3f, r0	; 63
    1d9a:	0f 90       	pop	r0
    1d9c:	1f 90       	pop	r1
    1d9e:	18 95       	reti

00001da0 <Timer2_Init>:
    1da0:	8f b7       	in	r24, 0x3f	; 63
    1da2:	80 68       	ori	r24, 0x80	; 128
    1da4:	8f bf       	out	0x3f, r24	; 63
    1da6:	85 b5       	in	r24, 0x25	; 37
    1da8:	87 7f       	andi	r24, 0xF7	; 247
    1daa:	85 bd       	out	0x25, r24	; 37
    1dac:	85 b5       	in	r24, 0x25	; 37
    1dae:	8f 7b       	andi	r24, 0xBF	; 191
    1db0:	85 bd       	out	0x25, r24	; 37
    1db2:	89 b7       	in	r24, 0x39	; 57
    1db4:	80 64       	ori	r24, 0x40	; 64
    1db6:	89 bf       	out	0x39, r24	; 57
    1db8:	08 95       	ret

00001dba <Timer2_SetDelay>:
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	9b 01       	movw	r18, r22
    1dc0:	ac 01       	movw	r20, r24
    1dc2:	a8 ee       	ldi	r26, 0xE8	; 232
    1dc4:	b3 e0       	ldi	r27, 0x03	; 3
    1dc6:	0e 94 88 21 	call	0x4310	; 0x4310 <__muluhisi3>
    1dca:	8b 01       	movw	r16, r22
    1dcc:	9c 01       	movw	r18, r24
    1dce:	68 94       	set
    1dd0:	15 f8       	bld	r1, 5
    1dd2:	36 95       	lsr	r19
    1dd4:	27 95       	ror	r18
    1dd6:	17 95       	ror	r17
    1dd8:	07 95       	ror	r16
    1dda:	16 94       	lsr	r1
    1ddc:	d1 f7       	brne	.-12     	; 0x1dd2 <Timer2_SetDelay+0x18>
    1dde:	01 30       	cpi	r16, 0x01	; 1
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	14 07       	cpc	r17, r20
    1de4:	21 05       	cpc	r18, r1
    1de6:	31 05       	cpc	r19, r1
    1de8:	60 f4       	brcc	.+24     	; 0x1e02 <Timer2_SetDelay+0x48>
    1dea:	80 2f       	mov	r24, r16
    1dec:	81 95       	neg	r24
    1dee:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <Timer2_Init_Value>
    1df2:	84 bd       	out	0x24, r24	; 36
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	90 e0       	ldi	r25, 0x00	; 0
    1df8:	90 93 7d 07 	sts	0x077D, r25	; 0x80077d <Timer2_Num_OVF+0x1>
    1dfc:	80 93 7c 07 	sts	0x077C, r24	; 0x80077c <Timer2_Num_OVF>
    1e00:	24 c0       	rjmp	.+72     	; 0x1e4a <Timer2_SetDelay+0x90>
    1e02:	01 11       	cpse	r16, r1
    1e04:	0c c0       	rjmp	.+24     	; 0x1e1e <Timer2_SetDelay+0x64>
    1e06:	ab 01       	movw	r20, r22
    1e08:	bc 01       	movw	r22, r24
    1e0a:	03 2e       	mov	r0, r19
    1e0c:	3e e0       	ldi	r19, 0x0E	; 14
    1e0e:	76 95       	lsr	r23
    1e10:	67 95       	ror	r22
    1e12:	57 95       	ror	r21
    1e14:	47 95       	ror	r20
    1e16:	3a 95       	dec	r19
    1e18:	d1 f7       	brne	.-12     	; 0x1e0e <Timer2_SetDelay+0x54>
    1e1a:	30 2d       	mov	r19, r0
    1e1c:	0d c0       	rjmp	.+26     	; 0x1e38 <Timer2_SetDelay+0x7e>
    1e1e:	ab 01       	movw	r20, r22
    1e20:	bc 01       	movw	r22, r24
    1e22:	03 2e       	mov	r0, r19
    1e24:	3e e0       	ldi	r19, 0x0E	; 14
    1e26:	76 95       	lsr	r23
    1e28:	67 95       	ror	r22
    1e2a:	57 95       	ror	r21
    1e2c:	47 95       	ror	r20
    1e2e:	3a 95       	dec	r19
    1e30:	d1 f7       	brne	.-12     	; 0x1e26 <Timer2_SetDelay+0x6c>
    1e32:	30 2d       	mov	r19, r0
    1e34:	4f 5f       	subi	r20, 0xFF	; 255
    1e36:	5f 4f       	sbci	r21, 0xFF	; 255
    1e38:	50 93 7d 07 	sts	0x077D, r21	; 0x80077d <Timer2_Num_OVF+0x1>
    1e3c:	40 93 7c 07 	sts	0x077C, r20	; 0x80077c <Timer2_Num_OVF>
    1e40:	80 2f       	mov	r24, r16
    1e42:	81 95       	neg	r24
    1e44:	80 93 7b 07 	sts	0x077B, r24	; 0x80077b <Timer2_Init_Value>
    1e48:	84 bd       	out	0x24, r24	; 36
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	08 95       	ret

00001e50 <Timer2_Start>:
    1e50:	85 b5       	in	r24, 0x25	; 37
    1e52:	87 60       	ori	r24, 0x07	; 7
    1e54:	85 bd       	out	0x25, r24	; 37
    1e56:	08 95       	ret

00001e58 <Timer2_Stop>:
    1e58:	85 b5       	in	r24, 0x25	; 37
    1e5a:	88 7f       	andi	r24, 0xF8	; 248
    1e5c:	85 bd       	out	0x25, r24	; 37
    1e5e:	08 95       	ret

00001e60 <__vector_5>:
    1e60:	1f 92       	push	r1
    1e62:	0f 92       	push	r0
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	0f 92       	push	r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	2f 93       	push	r18
    1e6c:	3f 93       	push	r19
    1e6e:	4f 93       	push	r20
    1e70:	5f 93       	push	r21
    1e72:	6f 93       	push	r22
    1e74:	7f 93       	push	r23
    1e76:	8f 93       	push	r24
    1e78:	9f 93       	push	r25
    1e7a:	af 93       	push	r26
    1e7c:	bf 93       	push	r27
    1e7e:	ef 93       	push	r30
    1e80:	ff 93       	push	r31
    1e82:	80 91 6f 07 	lds	r24, 0x076F	; 0x80076f <Count.1759>
    1e86:	90 91 70 07 	lds	r25, 0x0770	; 0x800770 <Count.1759+0x1>
    1e8a:	a0 91 71 07 	lds	r26, 0x0771	; 0x800771 <Count.1759+0x2>
    1e8e:	b0 91 72 07 	lds	r27, 0x0772	; 0x800772 <Count.1759+0x3>
    1e92:	01 96       	adiw	r24, 0x01	; 1
    1e94:	a1 1d       	adc	r26, r1
    1e96:	b1 1d       	adc	r27, r1
    1e98:	80 93 6f 07 	sts	0x076F, r24	; 0x80076f <Count.1759>
    1e9c:	90 93 70 07 	sts	0x0770, r25	; 0x800770 <Count.1759+0x1>
    1ea0:	a0 93 71 07 	sts	0x0771, r26	; 0x800771 <Count.1759+0x2>
    1ea4:	b0 93 72 07 	sts	0x0772, r27	; 0x800772 <Count.1759+0x3>
    1ea8:	40 91 7c 07 	lds	r20, 0x077C	; 0x80077c <Timer2_Num_OVF>
    1eac:	50 91 7d 07 	lds	r21, 0x077D	; 0x80077d <Timer2_Num_OVF+0x1>
    1eb0:	60 e0       	ldi	r22, 0x00	; 0
    1eb2:	70 e0       	ldi	r23, 0x00	; 0
    1eb4:	84 17       	cp	r24, r20
    1eb6:	95 07       	cpc	r25, r21
    1eb8:	a6 07       	cpc	r26, r22
    1eba:	b7 07       	cpc	r27, r23
    1ebc:	a1 f4       	brne	.+40     	; 0x1ee6 <__vector_5+0x86>
    1ebe:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    1ec2:	81 11       	cpse	r24, r1
    1ec4:	03 c0       	rjmp	.+6      	; 0x1ecc <__vector_5+0x6c>
    1ec6:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
    1eca:	02 c0       	rjmp	.+4      	; 0x1ed0 <__vector_5+0x70>
    1ecc:	0e 94 2c 0f 	call	0x1e58	; 0x1e58 <Timer2_Stop>
    1ed0:	10 92 6f 07 	sts	0x076F, r1	; 0x80076f <Count.1759>
    1ed4:	10 92 70 07 	sts	0x0770, r1	; 0x800770 <Count.1759+0x1>
    1ed8:	10 92 71 07 	sts	0x0771, r1	; 0x800771 <Count.1759+0x2>
    1edc:	10 92 72 07 	sts	0x0772, r1	; 0x800772 <Count.1759+0x3>
    1ee0:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <Timer2_Init_Value>
    1ee4:	84 bd       	out	0x24, r24	; 36
    1ee6:	ff 91       	pop	r31
    1ee8:	ef 91       	pop	r30
    1eea:	bf 91       	pop	r27
    1eec:	af 91       	pop	r26
    1eee:	9f 91       	pop	r25
    1ef0:	8f 91       	pop	r24
    1ef2:	7f 91       	pop	r23
    1ef4:	6f 91       	pop	r22
    1ef6:	5f 91       	pop	r21
    1ef8:	4f 91       	pop	r20
    1efa:	3f 91       	pop	r19
    1efc:	2f 91       	pop	r18
    1efe:	0f 90       	pop	r0
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	0f 90       	pop	r0
    1f04:	1f 90       	pop	r1
    1f06:	18 95       	reti

00001f08 <__vector_4>:
    1f08:	1f 92       	push	r1
    1f0a:	0f 92       	push	r0
    1f0c:	0f b6       	in	r0, 0x3f	; 63
    1f0e:	0f 92       	push	r0
    1f10:	11 24       	eor	r1, r1
    1f12:	4f 93       	push	r20
    1f14:	5f 93       	push	r21
    1f16:	6f 93       	push	r22
    1f18:	7f 93       	push	r23
    1f1a:	8f 93       	push	r24
    1f1c:	9f 93       	push	r25
    1f1e:	af 93       	push	r26
    1f20:	bf 93       	push	r27
    1f22:	80 91 6b 07 	lds	r24, 0x076B	; 0x80076b <Count.1765>
    1f26:	90 91 6c 07 	lds	r25, 0x076C	; 0x80076c <Count.1765+0x1>
    1f2a:	a0 91 6d 07 	lds	r26, 0x076D	; 0x80076d <Count.1765+0x2>
    1f2e:	b0 91 6e 07 	lds	r27, 0x076E	; 0x80076e <Count.1765+0x3>
    1f32:	01 96       	adiw	r24, 0x01	; 1
    1f34:	a1 1d       	adc	r26, r1
    1f36:	b1 1d       	adc	r27, r1
    1f38:	80 93 6b 07 	sts	0x076B, r24	; 0x80076b <Count.1765>
    1f3c:	90 93 6c 07 	sts	0x076C, r25	; 0x80076c <Count.1765+0x1>
    1f40:	a0 93 6d 07 	sts	0x076D, r26	; 0x80076d <Count.1765+0x2>
    1f44:	b0 93 6e 07 	sts	0x076E, r27	; 0x80076e <Count.1765+0x3>
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	a1 05       	cpc	r26, r1
    1f4e:	b1 05       	cpc	r27, r1
    1f50:	b9 f4       	brne	.+46     	; 0x1f80 <__vector_4+0x78>
    1f52:	40 91 7c 07 	lds	r20, 0x077C	; 0x80077c <Timer2_Num_OVF>
    1f56:	50 91 7d 07 	lds	r21, 0x077D	; 0x80077d <Timer2_Num_OVF+0x1>
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	84 17       	cp	r24, r20
    1f60:	95 07       	cpc	r25, r21
    1f62:	a6 07       	cpc	r26, r22
    1f64:	b7 07       	cpc	r27, r23
    1f66:	61 f4       	brne	.+24     	; 0x1f80 <__vector_4+0x78>
    1f68:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <Count.1765>
    1f6c:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <Count.1765+0x1>
    1f70:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <Count.1765+0x2>
    1f74:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <Count.1765+0x3>
    1f78:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <Timer2_Init_Value>
    1f7c:	83 bd       	out	0x23, r24	; 35
    1f7e:	1e c0       	rjmp	.+60     	; 0x1fbc <__vector_4+0xb4>
    1f80:	81 30       	cpi	r24, 0x01	; 1
    1f82:	91 05       	cpc	r25, r1
    1f84:	a1 05       	cpc	r26, r1
    1f86:	b1 05       	cpc	r27, r1
    1f88:	19 f4       	brne	.+6      	; 0x1f90 <__vector_4+0x88>
    1f8a:	8f ef       	ldi	r24, 0xFF	; 255
    1f8c:	83 bd       	out	0x23, r24	; 35
    1f8e:	16 c0       	rjmp	.+44     	; 0x1fbc <__vector_4+0xb4>
    1f90:	40 91 7c 07 	lds	r20, 0x077C	; 0x80077c <Timer2_Num_OVF>
    1f94:	50 91 7d 07 	lds	r21, 0x077D	; 0x80077d <Timer2_Num_OVF+0x1>
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	70 e0       	ldi	r23, 0x00	; 0
    1f9c:	84 17       	cp	r24, r20
    1f9e:	95 07       	cpc	r25, r21
    1fa0:	a6 07       	cpc	r26, r22
    1fa2:	b7 07       	cpc	r27, r23
    1fa4:	59 f4       	brne	.+22     	; 0x1fbc <__vector_4+0xb4>
    1fa6:	10 92 6b 07 	sts	0x076B, r1	; 0x80076b <Count.1765>
    1faa:	10 92 6c 07 	sts	0x076C, r1	; 0x80076c <Count.1765+0x1>
    1fae:	10 92 6d 07 	sts	0x076D, r1	; 0x80076d <Count.1765+0x2>
    1fb2:	10 92 6e 07 	sts	0x076E, r1	; 0x80076e <Count.1765+0x3>
    1fb6:	80 91 7b 07 	lds	r24, 0x077B	; 0x80077b <Timer2_Init_Value>
    1fba:	83 bd       	out	0x23, r24	; 35
    1fbc:	bf 91       	pop	r27
    1fbe:	af 91       	pop	r26
    1fc0:	9f 91       	pop	r25
    1fc2:	8f 91       	pop	r24
    1fc4:	7f 91       	pop	r23
    1fc6:	6f 91       	pop	r22
    1fc8:	5f 91       	pop	r21
    1fca:	4f 91       	pop	r20
    1fcc:	0f 90       	pop	r0
    1fce:	0f be       	out	0x3f, r0	; 63
    1fd0:	0f 90       	pop	r0
    1fd2:	1f 90       	pop	r1
    1fd4:	18 95       	reti

00001fd6 <UART_Init>:
extern Uint8 eme_check;

void UART_Init(void)
{
	// Global Interrupt
	SREG |= Global_INT << 7;
    1fd6:	8f b7       	in	r24, 0x3f	; 63
    1fd8:	80 68       	ori	r24, 0x80	; 128
    1fda:	8f bf       	out	0x3f, r24	; 63
	
	// Peripheral Interrupt
	UCSRB = (UART_TX_INT << 6) | (UART_RX_INT << 7) | (UCSRB & 0X3F);
    1fdc:	8a b1       	in	r24, 0x0a	; 10
    1fde:	80 6c       	ori	r24, 0xC0	; 192
    1fe0:	8a b9       	out	0x0a, r24	; 10
	
	// TX Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, PIN_1, PIN_OUT);
    1fe2:	41 e0       	ldi	r20, 0x01	; 1
    1fe4:	61 e0       	ldi	r22, 0x01	; 1
    1fe6:	83 e0       	ldi	r24, 0x03	; 3
    1fe8:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
	
	// RX Pin Direction
	DIO_SetPin_Dir(DIO_PORTD, PIN_0, PIN_IN);
    1fec:	40 e0       	ldi	r20, 0x00	; 0
    1fee:	60 e0       	ldi	r22, 0x00	; 0
    1ff0:	83 e0       	ldi	r24, 0x03	; 3
    1ff2:	0e 94 4c 03 	call	0x698	; 0x698 <DIO_SetPin_Dir>
	
	// UART Receiver/ Transmitter Enable
	UCSRB = (1 << 3) | (1 << 4) | (UCSRB & 0XE7);
    1ff6:	8a b1       	in	r24, 0x0a	; 10
    1ff8:	88 61       	ori	r24, 0x18	; 24
    1ffa:	8a b9       	out	0x0a, r24	; 10
	
	// UART Doubled Speed Mode
	UCSRA = (UART_Doubled_Speed << 1) | (UCSRA & 0XFD);
    1ffc:	8b b1       	in	r24, 0x0b	; 11
    1ffe:	82 60       	ori	r24, 0x02	; 2
    2000:	8b b9       	out	0x0b, r24	; 11
	
	// Parity Bit Mode
	// Data Bits Mode
	// Stop Bit  Mode
	UCSRC = (1 << 7) | (UART_Data_Bits << 1) | (UART_Stop_Bits << 3) | (UART_Parity_Mode << 4) | (UCSRC & 0X41);
    2002:	80 b5       	in	r24, 0x20	; 32
    2004:	81 74       	andi	r24, 0x41	; 65
    2006:	86 6a       	ori	r24, 0xA6	; 166
    2008:	80 bd       	out	0x20, r24	; 32
	
	// UART Baud Rate
	UBRRL = (Uint8)UART_Baud_Rate;
    200a:	8f ec       	ldi	r24, 0xCF	; 207
    200c:	89 b9       	out	0x09, r24	; 9
	UBRRH = (UART_Baud_Rate >> 8);
    200e:	10 bc       	out	0x20, r1	; 32
    2010:	08 95       	ret

00002012 <UART_TX_Char>:
}

void UART_TX_Char(Uint8 data)
{
	// Sending Data
	UDR = data;
    2012:	8c b9       	out	0x0c, r24	; 12
	
	// Checking the data is sent
	while(!Get_Bit(UCSRA, 5));
    2014:	5d 9b       	sbis	0x0b, 5	; 11
    2016:	fe cf       	rjmp	.-4      	; 0x2014 <UART_TX_Char+0x2>
}
    2018:	08 95       	ret

0000201a <UART_TX_Str>:

void UART_TX_Str(Uint8 *str)
{
    201a:	0f 93       	push	r16
    201c:	1f 93       	push	r17
    201e:	cf 93       	push	r28
    2020:	8c 01       	movw	r16, r24
	for(Uint8 i = 0; str[i] != '\n'; i++)
    2022:	c0 e0       	ldi	r28, 0x00	; 0
    2024:	03 c0       	rjmp	.+6      	; 0x202c <UART_TX_Str+0x12>
	{
		UART_TX_Char(str[i]);
    2026:	0e 94 09 10 	call	0x2012	; 0x2012 <UART_TX_Char>
	while(!Get_Bit(UCSRA, 5));
}

void UART_TX_Str(Uint8 *str)
{
	for(Uint8 i = 0; str[i] != '\n'; i++)
    202a:	cf 5f       	subi	r28, 0xFF	; 255
    202c:	f8 01       	movw	r30, r16
    202e:	ec 0f       	add	r30, r28
    2030:	f1 1d       	adc	r31, r1
    2032:	80 81       	ld	r24, Z
    2034:	8a 30       	cpi	r24, 0x0A	; 10
    2036:	b9 f7       	brne	.-18     	; 0x2026 <UART_TX_Str+0xc>
	{
		UART_TX_Char(str[i]);
	}
}
    2038:	cf 91       	pop	r28
    203a:	1f 91       	pop	r17
    203c:	0f 91       	pop	r16
    203e:	08 95       	ret

00002040 <UART_RX_Char>:

Uint8 UART_RX_Char(void)
{
	Uint8 Value = 0;
	while(!Get_Bit(UCSRA, 5));
    2040:	5d 9b       	sbis	0x0b, 5	; 11
    2042:	fe cf       	rjmp	.-4      	; 0x2040 <UART_RX_Char>
	Value = UDR;
    2044:	8c b1       	in	r24, 0x0c	; 12
	return Value;
}
    2046:	08 95       	ret

00002048 <__vector_13>:

ISR(USART_RXC_vect)
{
    2048:	1f 92       	push	r1
    204a:	0f 92       	push	r0
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	0f 92       	push	r0
    2050:	11 24       	eor	r1, r1
    2052:	4f 92       	push	r4
    2054:	5f 92       	push	r5
    2056:	6f 92       	push	r6
    2058:	7f 92       	push	r7
    205a:	8f 92       	push	r8
    205c:	9f 92       	push	r9
    205e:	af 92       	push	r10
    2060:	bf 92       	push	r11
    2062:	cf 92       	push	r12
    2064:	df 92       	push	r13
    2066:	ef 92       	push	r14
    2068:	ff 92       	push	r15
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	2f 93       	push	r18
    2070:	3f 93       	push	r19
    2072:	4f 93       	push	r20
    2074:	5f 93       	push	r21
    2076:	6f 93       	push	r22
    2078:	7f 93       	push	r23
    207a:	8f 93       	push	r24
    207c:	9f 93       	push	r25
    207e:	af 93       	push	r26
    2080:	bf 93       	push	r27
    2082:	ef 93       	push	r30
    2084:	ff 93       	push	r31
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	cd b7       	in	r28, 0x3d	; 61
    208c:	de b7       	in	r29, 0x3e	; 62
    208e:	66 97       	sbiw	r28, 0x16	; 22
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	cd bf       	out	0x3d, r28	; 61
	Uint8 KP_User[4] = { 0 };
    2094:	19 82       	std	Y+1, r1	; 0x01
    2096:	1a 82       	std	Y+2, r1	; 0x02
    2098:	1b 82       	std	Y+3, r1	; 0x03
    209a:	1c 82       	std	Y+4, r1	; 0x04
	Uint8 KP_Pass[4] = { 0 };
	Uint8 PC_User[4] = { 0 };
    209c:	1d 82       	std	Y+5, r1	; 0x05
    209e:	1e 82       	std	Y+6, r1	; 0x06
    20a0:	1f 82       	std	Y+7, r1	; 0x07
    20a2:	18 86       	std	Y+8, r1	; 0x08
	Uint8 PC_Pass[4] = { 0 };
    20a4:	19 86       	std	Y+9, r1	; 0x09
    20a6:	1a 86       	std	Y+10, r1	; 0x0a
    20a8:	1b 86       	std	Y+11, r1	; 0x0b
    20aa:	1c 86       	std	Y+12, r1	; 0x0c
	Uint8 AD_User[4] = { 0 };
    20ac:	1d 86       	std	Y+13, r1	; 0x0d
    20ae:	1e 86       	std	Y+14, r1	; 0x0e
    20b0:	1f 86       	std	Y+15, r1	; 0x0f
    20b2:	18 8a       	std	Y+16, r1	; 0x10
	Uint8 AD_Pass[4] = { 0 };
    20b4:	19 8a       	std	Y+17, r1	; 0x11
    20b6:	1a 8a       	std	Y+18, r1	; 0x12
    20b8:	1b 8a       	std	Y+19, r1	; 0x13
    20ba:	1c 8a       	std	Y+20, r1	; 0x14
	
	if(!eme_check)
    20bc:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    20c0:	81 11       	cpse	r24, r1
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <__vector_13+0x80>
		Timer2_Start();		
    20c4:	0e 94 28 0f 	call	0x1e50	; 0x1e50 <Timer2_Start>
	// Write UART receive handler here
	if(!SYS_Check)
    20c8:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <SYS_Check>
    20cc:	88 23       	and	r24, r24
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <__vector_13+0x8a>
    20d0:	2f c5       	rjmp	.+2654   	; 0x2b30 <__vector_13+0xae8>
    20d2:	33 c5       	rjmp	.+2662   	; 0x2b3a <__vector_13+0xaf2>
	{
			
		// Commands check
		for(Uint8 i = 0; i < 4; i++)
		{
			while(!Get_Bit(UCSRA,7));
    20d4:	5f 9b       	sbis	0x0b, 7	; 11
    20d6:	fe cf       	rjmp	.-4      	; 0x20d4 <__vector_13+0x8c>
			A_U_Check = UDR;
    20d8:	8c b1       	in	r24, 0x0c	; 12
    20da:	80 93 8c 07 	sts	0x078C, r24	; 0x80078c <A_U_Check>
			
			if(A_U_Check == '1')
    20de:	81 33       	cpi	r24, 0x31	; 49
    20e0:	09 f0       	breq	.+2      	; 0x20e4 <__vector_13+0x9c>
    20e2:	e0 c0       	rjmp	.+448    	; 0x22a4 <__vector_13+0x25c>
			{
				// Admin enter the system
				/*------------->Entering Username<-------------*/
				UART_TX_Str("\r\n");
    20e4:	89 eb       	ldi	r24, 0xB9	; 185
    20e6:	92 e0       	ldi	r25, 0x02	; 2
    20e8:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter your username\r\n");
    20ec:	8a e6       	ldi	r24, 0x6A	; 106
    20ee:	92 e0       	ldi	r25, 0x02	; 2
    20f0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    20f4:	89 eb       	ldi	r24, 0xB9	; 185
    20f6:	92 e0       	ldi	r25, 0x02	; 2
    20f8:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		
				for(Uint8 i = 0; i < 4; i++)
    20fc:	10 e0       	ldi	r17, 0x00	; 0
    20fe:	0e c0       	rjmp	.+28     	; 0x211c <__vector_13+0xd4>
				{
					while(!Get_Bit(UCSRA,7));       // Polling until the user enter a character
    2100:	5f 9b       	sbis	0x0b, 7	; 11
    2102:	fe cf       	rjmp	.-4      	; 0x2100 <__vector_13+0xb8>
					AD_User[i] = UART_RX_Char();	// Receiving the character in username array
    2104:	e1 2e       	mov	r14, r17
    2106:	f1 2c       	mov	r15, r1
    2108:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    210c:	ed e0       	ldi	r30, 0x0D	; 13
    210e:	f0 e0       	ldi	r31, 0x00	; 0
    2110:	ec 0f       	add	r30, r28
    2112:	fd 1f       	adc	r31, r29
    2114:	ee 0d       	add	r30, r14
    2116:	ff 1d       	adc	r31, r15
    2118:	80 83       	st	Z, r24
				/*------------->Entering Username<-------------*/
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter your username\r\n");
				UART_TX_Str("\r\n");
		
				for(Uint8 i = 0; i < 4; i++)
    211a:	1f 5f       	subi	r17, 0xFF	; 255
    211c:	14 30       	cpi	r17, 0x04	; 4
    211e:	80 f3       	brcs	.-32     	; 0x2100 <__vector_13+0xb8>
					while(!Get_Bit(UCSRA,7));       // Polling until the user enter a character
					AD_User[i] = UART_RX_Char();	// Receiving the character in username array
				}
		
				/*------------->Entering Password<-------------*/
				UART_TX_Str("\r\n");
    2120:	89 eb       	ldi	r24, 0xB9	; 185
    2122:	92 e0       	ldi	r25, 0x02	; 2
    2124:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    2128:	89 eb       	ldi	r24, 0xB9	; 185
    212a:	92 e0       	ldi	r25, 0x02	; 2
    212c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter your password\r\n");
    2130:	87 e8       	ldi	r24, 0x87	; 135
    2132:	92 e0       	ldi	r25, 0x02	; 2
    2134:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    2138:	89 eb       	ldi	r24, 0xB9	; 185
    213a:	92 e0       	ldi	r25, 0x02	; 2
    213c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		
				for(Uint8 i = 0; i < 4; i++)
    2140:	10 e0       	ldi	r17, 0x00	; 0
    2142:	0e c0       	rjmp	.+28     	; 0x2160 <__vector_13+0x118>
				{
					while(!Get_Bit(UCSRA,7));		// Polling until the user enter a character
    2144:	5f 9b       	sbis	0x0b, 7	; 11
    2146:	fe cf       	rjmp	.-4      	; 0x2144 <__vector_13+0xfc>
					AD_Pass[i] = UART_RX_Char();	// Receiving the character in password array
    2148:	e1 2e       	mov	r14, r17
    214a:	f1 2c       	mov	r15, r1
    214c:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    2150:	e1 e1       	ldi	r30, 0x11	; 17
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	ec 0f       	add	r30, r28
    2156:	fd 1f       	adc	r31, r29
    2158:	ee 0d       	add	r30, r14
    215a:	ff 1d       	adc	r31, r15
    215c:	80 83       	st	Z, r24
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter your password\r\n");
				UART_TX_Str("\r\n");
		
				for(Uint8 i = 0; i < 4; i++)
    215e:	1f 5f       	subi	r17, 0xFF	; 255
    2160:	14 30       	cpi	r17, 0x04	; 4
    2162:	80 f3       	brcs	.-32     	; 0x2144 <__vector_13+0xfc>
    2164:	81 2c       	mov	r8, r1
    2166:	84 c0       	rjmp	.+264    	; 0x2270 <__vector_13+0x228>
		
				/*---------------> Checking Username & Password<---------------*/
				for(Uint8 Check_Counter = 0; Check_Counter <= AD_Counter; Check_Counter += 4)
				{
					/*----------------->Username Check<------------------*/
					if(AD_User[0] == EEPROM_ReadByte(5, Check_Counter + 1) && AD_User[1] == EEPROM_ReadByte(5,Check_Counter + 2) && AD_User[2] == EEPROM_ReadByte(5,Check_Counter + 3) && AD_User[3] == EEPROM_ReadByte(5,Check_Counter + 4))
    2168:	cd 84       	ldd	r12, Y+13	; 0x0d
    216a:	d1 2c       	mov	r13, r1
    216c:	08 2d       	mov	r16, r8
    216e:	10 e0       	ldi	r17, 0x00	; 0
    2170:	78 01       	movw	r14, r16
    2172:	2f ef       	ldi	r18, 0xFF	; 255
    2174:	e2 1a       	sub	r14, r18
    2176:	f2 0a       	sbc	r15, r18
    2178:	b7 01       	movw	r22, r14
    217a:	85 e0       	ldi	r24, 0x05	; 5
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    2182:	c8 16       	cp	r12, r24
    2184:	d9 06       	cpc	r13, r25
    2186:	09 f0       	breq	.+2      	; 0x218a <__vector_13+0x142>
    2188:	71 c0       	rjmp	.+226    	; 0x226c <__vector_13+0x224>
    218a:	ce 84       	ldd	r12, Y+14	; 0x0e
    218c:	d1 2c       	mov	r13, r1
    218e:	38 01       	movw	r6, r16
    2190:	82 e0       	ldi	r24, 0x02	; 2
    2192:	68 0e       	add	r6, r24
    2194:	71 1c       	adc	r7, r1
    2196:	b3 01       	movw	r22, r6
    2198:	85 e0       	ldi	r24, 0x05	; 5
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    21a0:	c8 16       	cp	r12, r24
    21a2:	d9 06       	cpc	r13, r25
    21a4:	09 f0       	breq	.+2      	; 0x21a8 <__vector_13+0x160>
    21a6:	62 c0       	rjmp	.+196    	; 0x226c <__vector_13+0x224>
    21a8:	af 84       	ldd	r10, Y+15	; 0x0f
    21aa:	b1 2c       	mov	r11, r1
    21ac:	68 01       	movw	r12, r16
    21ae:	93 e0       	ldi	r25, 0x03	; 3
    21b0:	c9 0e       	add	r12, r25
    21b2:	d1 1c       	adc	r13, r1
    21b4:	b6 01       	movw	r22, r12
    21b6:	85 e0       	ldi	r24, 0x05	; 5
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    21be:	a8 16       	cp	r10, r24
    21c0:	b9 06       	cpc	r11, r25
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <__vector_13+0x17e>
    21c4:	53 c0       	rjmp	.+166    	; 0x226c <__vector_13+0x224>
    21c6:	a8 88       	ldd	r10, Y+16	; 0x10
    21c8:	b1 2c       	mov	r11, r1
    21ca:	0c 5f       	subi	r16, 0xFC	; 252
    21cc:	1f 4f       	sbci	r17, 0xFF	; 255
    21ce:	b8 01       	movw	r22, r16
    21d0:	85 e0       	ldi	r24, 0x05	; 5
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    21d8:	a8 16       	cp	r10, r24
    21da:	b9 06       	cpc	r11, r25
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <__vector_13+0x198>
    21de:	46 c0       	rjmp	.+140    	; 0x226c <__vector_13+0x224>
					{
						/*----------------->Password Check<------------------*/
						if(AD_Pass[0] == EEPROM_ReadByte(6,Check_Counter + 1) && AD_Pass[1] == EEPROM_ReadByte(6,Check_Counter + 2) && AD_Pass[2] == EEPROM_ReadByte(6,Check_Counter + 3) && AD_Pass[3] == EEPROM_ReadByte(6,Check_Counter + 4))
    21e0:	a9 88       	ldd	r10, Y+17	; 0x11
    21e2:	b1 2c       	mov	r11, r1
    21e4:	b7 01       	movw	r22, r14
    21e6:	86 e0       	ldi	r24, 0x06	; 6
    21e8:	90 e0       	ldi	r25, 0x00	; 0
    21ea:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    21ee:	a8 16       	cp	r10, r24
    21f0:	b9 06       	cpc	r11, r25
    21f2:	e1 f5       	brne	.+120    	; 0x226c <__vector_13+0x224>
    21f4:	ea 88       	ldd	r14, Y+18	; 0x12
    21f6:	f1 2c       	mov	r15, r1
    21f8:	b3 01       	movw	r22, r6
    21fa:	86 e0       	ldi	r24, 0x06	; 6
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    2202:	e8 16       	cp	r14, r24
    2204:	f9 06       	cpc	r15, r25
    2206:	91 f5       	brne	.+100    	; 0x226c <__vector_13+0x224>
    2208:	eb 88       	ldd	r14, Y+19	; 0x13
    220a:	f1 2c       	mov	r15, r1
    220c:	b6 01       	movw	r22, r12
    220e:	86 e0       	ldi	r24, 0x06	; 6
    2210:	90 e0       	ldi	r25, 0x00	; 0
    2212:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    2216:	e8 16       	cp	r14, r24
    2218:	f9 06       	cpc	r15, r25
    221a:	41 f5       	brne	.+80     	; 0x226c <__vector_13+0x224>
    221c:	ec 88       	ldd	r14, Y+20	; 0x14
    221e:	f1 2c       	mov	r15, r1
    2220:	b8 01       	movw	r22, r16
    2222:	86 e0       	ldi	r24, 0x06	; 6
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    222a:	e8 16       	cp	r14, r24
    222c:	f9 06       	cpc	r15, r25
    222e:	f1 f4       	brne	.+60     	; 0x226c <__vector_13+0x224>
						{
							/*----------------->Wright Username & Password<-----------------*/
							UART_TX_Str("\r\n");
    2230:	89 eb       	ldi	r24, 0xB9	; 185
    2232:	92 e0       	ldi	r25, 0x02	; 2
    2234:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("\r\n");
    2238:	89 eb       	ldi	r24, 0xB9	; 185
    223a:	92 e0       	ldi	r25, 0x02	; 2
    223c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("Admin exist, Welcome!\r\n");
    2240:	84 ea       	ldi	r24, 0xA4	; 164
    2242:	92 e0       	ldi	r25, 0x02	; 2
    2244:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("\r\n");
    2248:	89 eb       	ldi	r24, 0xB9	; 185
    224a:	92 e0       	ldi	r25, 0x02	; 2
    224c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							Check_Counter = AD_Counter + 1;
    2250:	80 90 70 00 	lds	r8, 0x0070	; 0x800070 <AD_Counter>
    2254:	83 94       	inc	r8
							SYS_Check = 1;
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <SYS_Check>
							CMD_Check = 1;
    225c:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <CMD_Check>
							i = 5;
							A_U_Check = 0;
    2260:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <A_U_Check>
							UART_TX_Str("Admin exist, Welcome!\r\n");
							UART_TX_Str("\r\n");
							Check_Counter = AD_Counter + 1;
							SYS_Check = 1;
							CMD_Check = 1;
							i = 5;
    2264:	0f 2e       	mov	r0, r31
    2266:	f5 e0       	ldi	r31, 0x05	; 5
    2268:	9f 2e       	mov	r9, r31
    226a:	f0 2d       	mov	r31, r0
					while(!Get_Bit(UCSRA,7));		// Polling until the user enter a character
					AD_Pass[i] = UART_RX_Char();	// Receiving the character in password array
				}
		
				/*---------------> Checking Username & Password<---------------*/
				for(Uint8 Check_Counter = 0; Check_Counter <= AD_Counter; Check_Counter += 4)
    226c:	24 e0       	ldi	r18, 0x04	; 4
    226e:	82 0e       	add	r8, r18
    2270:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <AD_Counter>
    2274:	88 15       	cp	r24, r8
    2276:	08 f0       	brcs	.+2      	; 0x227a <__vector_13+0x232>
    2278:	77 cf       	rjmp	.-274    	; 0x2168 <__vector_13+0x120>
						}
					}
				}
		
				/*----------------->Wrong Username or Password<-----------------*/
				if(!SYS_Check)
    227a:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <SYS_Check>
    227e:	81 11       	cpse	r24, r1
    2280:	16 c1       	rjmp	.+556    	; 0x24ae <__vector_13+0x466>
				{
					UART_TX_Str("\r\n");
    2282:	89 eb       	ldi	r24, 0xB9	; 185
    2284:	92 e0       	ldi	r25, 0x02	; 2
    2286:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("\r\n");
    228a:	89 eb       	ldi	r24, 0xB9	; 185
    228c:	92 e0       	ldi	r25, 0x02	; 2
    228e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("Admin does not exist. Please try again\r\n");
    2292:	8c eb       	ldi	r24, 0xBC	; 188
    2294:	92 e0       	ldi	r25, 0x02	; 2
    2296:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("\r\n");
    229a:	89 eb       	ldi	r24, 0xB9	; 185
    229c:	92 e0       	ldi	r25, 0x02	; 2
    229e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    22a2:	05 c1       	rjmp	.+522    	; 0x24ae <__vector_13+0x466>
				}
			}
			else if(A_U_Check == '2')
    22a4:	82 33       	cpi	r24, 0x32	; 50
    22a6:	09 f0       	breq	.+2      	; 0x22aa <__vector_13+0x262>
    22a8:	e1 c0       	rjmp	.+450    	; 0x246c <__vector_13+0x424>
			{
				// PC user enter the system
				/*------------->Entering Username<-------------*/
				UART_TX_Str("\r\n");
    22aa:	89 eb       	ldi	r24, 0xB9	; 185
    22ac:	92 e0       	ldi	r25, 0x02	; 2
    22ae:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter your username\r\n");
    22b2:	8a e6       	ldi	r24, 0x6A	; 106
    22b4:	92 e0       	ldi	r25, 0x02	; 2
    22b6:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    22ba:	89 eb       	ldi	r24, 0xB9	; 185
    22bc:	92 e0       	ldi	r25, 0x02	; 2
    22be:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
				for(Uint8 i = 0; i < 4; i++)
    22c2:	10 e0       	ldi	r17, 0x00	; 0
    22c4:	0e c0       	rjmp	.+28     	; 0x22e2 <__vector_13+0x29a>
				{
					while(!Get_Bit(UCSRA,7));       // Polling until the user enter a character
    22c6:	5f 9b       	sbis	0x0b, 7	; 11
    22c8:	fe cf       	rjmp	.-4      	; 0x22c6 <__vector_13+0x27e>
					PC_User[i] = UART_RX_Char();	// Receiving the character in username array
    22ca:	e1 2e       	mov	r14, r17
    22cc:	f1 2c       	mov	r15, r1
    22ce:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    22d2:	e5 e0       	ldi	r30, 0x05	; 5
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	ec 0f       	add	r30, r28
    22d8:	fd 1f       	adc	r31, r29
    22da:	ee 0d       	add	r30, r14
    22dc:	ff 1d       	adc	r31, r15
    22de:	80 83       	st	Z, r24
				/*------------->Entering Username<-------------*/
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter your username\r\n");
				UART_TX_Str("\r\n");
			
				for(Uint8 i = 0; i < 4; i++)
    22e0:	1f 5f       	subi	r17, 0xFF	; 255
    22e2:	14 30       	cpi	r17, 0x04	; 4
    22e4:	80 f3       	brcs	.-32     	; 0x22c6 <__vector_13+0x27e>
					while(!Get_Bit(UCSRA,7));       // Polling until the user enter a character
					PC_User[i] = UART_RX_Char();	// Receiving the character in username array
				}
			
				/*------------->Entering Password<-------------*/
				UART_TX_Str("\r\n");
    22e6:	89 eb       	ldi	r24, 0xB9	; 185
    22e8:	92 e0       	ldi	r25, 0x02	; 2
    22ea:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    22ee:	89 eb       	ldi	r24, 0xB9	; 185
    22f0:	92 e0       	ldi	r25, 0x02	; 2
    22f2:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter your password\r\n");
    22f6:	87 e8       	ldi	r24, 0x87	; 135
    22f8:	92 e0       	ldi	r25, 0x02	; 2
    22fa:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    22fe:	89 eb       	ldi	r24, 0xB9	; 185
    2300:	92 e0       	ldi	r25, 0x02	; 2
    2302:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
				for(Uint8 i = 0; i < 4; i++)
    2306:	10 e0       	ldi	r17, 0x00	; 0
    2308:	0e c0       	rjmp	.+28     	; 0x2326 <__vector_13+0x2de>
				{
					while(!Get_Bit(UCSRA,7));		// Polling until the user enter a character
    230a:	5f 9b       	sbis	0x0b, 7	; 11
    230c:	fe cf       	rjmp	.-4      	; 0x230a <__vector_13+0x2c2>
					PC_Pass[i] = UART_RX_Char();	// Receiving the character in password array
    230e:	e1 2e       	mov	r14, r17
    2310:	f1 2c       	mov	r15, r1
    2312:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    2316:	e9 e0       	ldi	r30, 0x09	; 9
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	ec 0f       	add	r30, r28
    231c:	fd 1f       	adc	r31, r29
    231e:	ee 0d       	add	r30, r14
    2320:	ff 1d       	adc	r31, r15
    2322:	80 83       	st	Z, r24
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter your password\r\n");
				UART_TX_Str("\r\n");
			
				for(Uint8 i = 0; i < 4; i++)
    2324:	1f 5f       	subi	r17, 0xFF	; 255
    2326:	14 30       	cpi	r17, 0x04	; 4
    2328:	80 f3       	brcs	.-32     	; 0x230a <__vector_13+0x2c2>
    232a:	b1 2c       	mov	r11, r1
    232c:	85 c0       	rjmp	.+266    	; 0x2438 <__vector_13+0x3f0>
			
				/*---------------> Checking Username & Password<---------------*/
				for(Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4)
				{
					/*----------------->Username Check<------------------*/
					if(PC_User[0] == EEPROM_ReadByte(2, Check_Counter + 1) && PC_User[1] == EEPROM_ReadByte(2,Check_Counter + 2) && PC_User[2] == EEPROM_ReadByte(2,Check_Counter + 3) && PC_User[3] == EEPROM_ReadByte(2,Check_Counter + 4))
    232e:	cd 80       	ldd	r12, Y+5	; 0x05
    2330:	d1 2c       	mov	r13, r1
    2332:	0b 2d       	mov	r16, r11
    2334:	10 e0       	ldi	r17, 0x00	; 0
    2336:	78 01       	movw	r14, r16
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	e8 1a       	sub	r14, r24
    233c:	f8 0a       	sbc	r15, r24
    233e:	b7 01       	movw	r22, r14
    2340:	82 e0       	ldi	r24, 0x02	; 2
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    2348:	c8 16       	cp	r12, r24
    234a:	d9 06       	cpc	r13, r25
    234c:	09 f0       	breq	.+2      	; 0x2350 <__vector_13+0x308>
    234e:	72 c0       	rjmp	.+228    	; 0x2434 <__vector_13+0x3ec>
    2350:	ce 80       	ldd	r12, Y+6	; 0x06
    2352:	d1 2c       	mov	r13, r1
    2354:	28 01       	movw	r4, r16
    2356:	92 e0       	ldi	r25, 0x02	; 2
    2358:	49 0e       	add	r4, r25
    235a:	51 1c       	adc	r5, r1
    235c:	b2 01       	movw	r22, r4
    235e:	82 e0       	ldi	r24, 0x02	; 2
    2360:	90 e0       	ldi	r25, 0x00	; 0
    2362:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    2366:	c8 16       	cp	r12, r24
    2368:	d9 06       	cpc	r13, r25
    236a:	09 f0       	breq	.+2      	; 0x236e <__vector_13+0x326>
    236c:	63 c0       	rjmp	.+198    	; 0x2434 <__vector_13+0x3ec>
    236e:	cf 80       	ldd	r12, Y+7	; 0x07
    2370:	d1 2c       	mov	r13, r1
    2372:	38 01       	movw	r6, r16
    2374:	23 e0       	ldi	r18, 0x03	; 3
    2376:	62 0e       	add	r6, r18
    2378:	71 1c       	adc	r7, r1
    237a:	b3 01       	movw	r22, r6
    237c:	82 e0       	ldi	r24, 0x02	; 2
    237e:	90 e0       	ldi	r25, 0x00	; 0
    2380:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    2384:	c8 16       	cp	r12, r24
    2386:	d9 06       	cpc	r13, r25
    2388:	09 f0       	breq	.+2      	; 0x238c <__vector_13+0x344>
    238a:	54 c0       	rjmp	.+168    	; 0x2434 <__vector_13+0x3ec>
    238c:	c8 84       	ldd	r12, Y+8	; 0x08
    238e:	d1 2c       	mov	r13, r1
    2390:	0c 5f       	subi	r16, 0xFC	; 252
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	b8 01       	movw	r22, r16
    2396:	82 e0       	ldi	r24, 0x02	; 2
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    239e:	c8 16       	cp	r12, r24
    23a0:	d9 06       	cpc	r13, r25
    23a2:	09 f0       	breq	.+2      	; 0x23a6 <__vector_13+0x35e>
    23a4:	47 c0       	rjmp	.+142    	; 0x2434 <__vector_13+0x3ec>
					{
						/*----------------->Password Check<------------------*/
						if(PC_Pass[0] == EEPROM_ReadByte(3,Check_Counter + 1) && PC_Pass[1] == EEPROM_ReadByte(3,Check_Counter + 2) && PC_Pass[2] == EEPROM_ReadByte(3,Check_Counter + 3) && PC_Pass[3] == EEPROM_ReadByte(3,Check_Counter + 4))
    23a6:	c9 84       	ldd	r12, Y+9	; 0x09
    23a8:	d1 2c       	mov	r13, r1
    23aa:	b7 01       	movw	r22, r14
    23ac:	83 e0       	ldi	r24, 0x03	; 3
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    23b4:	c8 16       	cp	r12, r24
    23b6:	d9 06       	cpc	r13, r25
    23b8:	e9 f5       	brne	.+122    	; 0x2434 <__vector_13+0x3ec>
    23ba:	ea 84       	ldd	r14, Y+10	; 0x0a
    23bc:	f1 2c       	mov	r15, r1
    23be:	b2 01       	movw	r22, r4
    23c0:	83 e0       	ldi	r24, 0x03	; 3
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    23c8:	e8 16       	cp	r14, r24
    23ca:	f9 06       	cpc	r15, r25
    23cc:	99 f5       	brne	.+102    	; 0x2434 <__vector_13+0x3ec>
    23ce:	eb 84       	ldd	r14, Y+11	; 0x0b
    23d0:	f1 2c       	mov	r15, r1
    23d2:	b3 01       	movw	r22, r6
    23d4:	83 e0       	ldi	r24, 0x03	; 3
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    23dc:	e8 16       	cp	r14, r24
    23de:	f9 06       	cpc	r15, r25
    23e0:	49 f5       	brne	.+82     	; 0x2434 <__vector_13+0x3ec>
    23e2:	ec 84       	ldd	r14, Y+12	; 0x0c
    23e4:	f1 2c       	mov	r15, r1
    23e6:	b8 01       	movw	r22, r16
    23e8:	83 e0       	ldi	r24, 0x03	; 3
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    23f0:	e8 16       	cp	r14, r24
    23f2:	f9 06       	cpc	r15, r25
    23f4:	f9 f4       	brne	.+62     	; 0x2434 <__vector_13+0x3ec>
						{
							/*----------------->Wright Username & Password<-----------------*/
							UART_TX_Str("\r\n");
    23f6:	89 eb       	ldi	r24, 0xB9	; 185
    23f8:	92 e0       	ldi	r25, 0x02	; 2
    23fa:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("\r\n");
    23fe:	89 eb       	ldi	r24, 0xB9	; 185
    2400:	92 e0       	ldi	r25, 0x02	; 2
    2402:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("User exist, Welcome!\r\n");
    2406:	85 ee       	ldi	r24, 0xE5	; 229
    2408:	92 e0       	ldi	r25, 0x02	; 2
    240a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							UART_TX_Str("\r\n");
    240e:	89 eb       	ldi	r24, 0xB9	; 185
    2410:	92 e0       	ldi	r25, 0x02	; 2
    2412:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
							Check_Counter = PC_Counter + 1;
    2416:	b0 90 89 07 	lds	r11, 0x0789	; 0x800789 <PC_Counter>
    241a:	b3 94       	inc	r11
							SYS_Check = 2;
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	80 93 8d 07 	sts	0x078D, r24	; 0x80078d <SYS_Check>
							CMD_Check = 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	80 93 8b 07 	sts	0x078B, r24	; 0x80078b <CMD_Check>
							i = 5;
							A_U_Check = 0;
    2428:	10 92 8c 07 	sts	0x078C, r1	; 0x80078c <A_U_Check>
							UART_TX_Str("User exist, Welcome!\r\n");
							UART_TX_Str("\r\n");
							Check_Counter = PC_Counter + 1;
							SYS_Check = 2;
							CMD_Check = 1;
							i = 5;
    242c:	0f 2e       	mov	r0, r31
    242e:	f5 e0       	ldi	r31, 0x05	; 5
    2430:	9f 2e       	mov	r9, r31
    2432:	f0 2d       	mov	r31, r0
					while(!Get_Bit(UCSRA,7));		// Polling until the user enter a character
					PC_Pass[i] = UART_RX_Char();	// Receiving the character in password array
				}
			
				/*---------------> Checking Username & Password<---------------*/
				for(Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4)
    2434:	84 e0       	ldi	r24, 0x04	; 4
    2436:	b8 0e       	add	r11, r24
    2438:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <PC_Counter>
    243c:	8b 15       	cp	r24, r11
    243e:	08 f0       	brcs	.+2      	; 0x2442 <__vector_13+0x3fa>
    2440:	76 cf       	rjmp	.-276    	; 0x232e <__vector_13+0x2e6>
						}
					}
				}
			
				/*----------------->Wrong Username or Password<-----------------*/
				if(!SYS_Check)
    2442:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <SYS_Check>
    2446:	81 11       	cpse	r24, r1
    2448:	32 c0       	rjmp	.+100    	; 0x24ae <__vector_13+0x466>
				{
					UART_TX_Str("\r\n");
    244a:	89 eb       	ldi	r24, 0xB9	; 185
    244c:	92 e0       	ldi	r25, 0x02	; 2
    244e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("\r\n");
    2452:	89 eb       	ldi	r24, 0xB9	; 185
    2454:	92 e0       	ldi	r25, 0x02	; 2
    2456:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("User does not exist. Please try again\r\n");
    245a:	8c ef       	ldi	r24, 0xFC	; 252
    245c:	92 e0       	ldi	r25, 0x02	; 2
    245e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("\r\n");
    2462:	89 eb       	ldi	r24, 0xB9	; 185
    2464:	92 e0       	ldi	r25, 0x02	; 2
    2466:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    246a:	21 c0       	rjmp	.+66     	; 0x24ae <__vector_13+0x466>
				}	
			}
			
			else
			{
				UART_TX_Str("\r\n");
    246c:	89 eb       	ldi	r24, 0xB9	; 185
    246e:	92 e0       	ldi	r25, 0x02	; 2
    2470:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    2474:	89 eb       	ldi	r24, 0xB9	; 185
    2476:	92 e0       	ldi	r25, 0x02	; 2
    2478:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter command number\r\n");
    247c:	84 e2       	ldi	r24, 0x24	; 36
    247e:	93 e0       	ldi	r25, 0x03	; 3
    2480:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    2484:	89 eb       	ldi	r24, 0xB9	; 185
    2486:	92 e0       	ldi	r25, 0x02	; 2
    2488:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    248c:	89 eb       	ldi	r24, 0xB9	; 185
    248e:	92 e0       	ldi	r25, 0x02	; 2
    2490:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("1.Enter Admin\r\n");
    2494:	8b e4       	ldi	r24, 0x4B	; 75
    2496:	92 e0       	ldi	r25, 0x02	; 2
    2498:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("2.Enter User\r\n");
    249c:	8b e5       	ldi	r24, 0x5B	; 91
    249e:	92 e0       	ldi	r25, 0x02	; 2
    24a0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    24a4:	89 eb       	ldi	r24, 0xB9	; 185
    24a6:	92 e0       	ldi	r25, 0x02	; 2
    24a8:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				
				i--;
    24ac:	9a 94       	dec	r9
			}
			
			if(i == 2)
    24ae:	92 e0       	ldi	r25, 0x02	; 2
    24b0:	99 12       	cpse	r9, r25
    24b2:	3c c3       	rjmp	.+1656   	; 0x2b2c <__vector_13+0xae4>
			{
				LCD_Clear();
    24b4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Firing Alarm!");
    24b8:	86 e0       	ldi	r24, 0x06	; 6
    24ba:	92 e0       	ldi	r25, 0x02	; 2
    24bc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				
				while (1)
				{
					Buzzer_ON();
    24c0:	0e 94 bf 00 	call	0x17e	; 0x17e <Buzzer_ON>
					LED3_ON();
    24c4:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
					LED4_ON();
    24c8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LED4_ON>
					
					LED0_ON();
    24cc:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    24d0:	2f ef       	ldi	r18, 0xFF	; 255
    24d2:	8d ee       	ldi	r24, 0xED	; 237
    24d4:	92 e0       	ldi	r25, 0x02	; 2
    24d6:	21 50       	subi	r18, 0x01	; 1
    24d8:	80 40       	sbci	r24, 0x00	; 0
    24da:	90 40       	sbci	r25, 0x00	; 0
    24dc:	e1 f7       	brne	.-8      	; 0x24d6 <__vector_13+0x48e>
    24de:	00 c0       	rjmp	.+0      	; 0x24e0 <__vector_13+0x498>
    24e0:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    24e2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
    24e6:	2f ef       	ldi	r18, 0xFF	; 255
    24e8:	8d ee       	ldi	r24, 0xED	; 237
    24ea:	92 e0       	ldi	r25, 0x02	; 2
    24ec:	21 50       	subi	r18, 0x01	; 1
    24ee:	80 40       	sbci	r24, 0x00	; 0
    24f0:	90 40       	sbci	r25, 0x00	; 0
    24f2:	e1 f7       	brne	.-8      	; 0x24ec <__vector_13+0x4a4>
    24f4:	00 c0       	rjmp	.+0      	; 0x24f6 <__vector_13+0x4ae>
    24f6:	00 00       	nop
					_delay_ms(Delay);
					LED3_ON();
    24f8:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
					
					LED0_ON();
    24fc:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    2500:	2f ef       	ldi	r18, 0xFF	; 255
    2502:	8d ee       	ldi	r24, 0xED	; 237
    2504:	92 e0       	ldi	r25, 0x02	; 2
    2506:	21 50       	subi	r18, 0x01	; 1
    2508:	80 40       	sbci	r24, 0x00	; 0
    250a:	90 40       	sbci	r25, 0x00	; 0
    250c:	e1 f7       	brne	.-8      	; 0x2506 <__vector_13+0x4be>
    250e:	00 c0       	rjmp	.+0      	; 0x2510 <__vector_13+0x4c8>
    2510:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    2512:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
    2516:	2f ef       	ldi	r18, 0xFF	; 255
    2518:	8d ee       	ldi	r24, 0xED	; 237
    251a:	92 e0       	ldi	r25, 0x02	; 2
    251c:	21 50       	subi	r18, 0x01	; 1
    251e:	80 40       	sbci	r24, 0x00	; 0
    2520:	90 40       	sbci	r25, 0x00	; 0
    2522:	e1 f7       	brne	.-8      	; 0x251c <__vector_13+0x4d4>
    2524:	00 c0       	rjmp	.+0      	; 0x2526 <__vector_13+0x4de>
    2526:	00 00       	nop
					_delay_ms(Delay);
					
					
					LED2_ON();
    2528:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    252c:	2f ef       	ldi	r18, 0xFF	; 255
    252e:	8d ee       	ldi	r24, 0xED	; 237
    2530:	92 e0       	ldi	r25, 0x02	; 2
    2532:	21 50       	subi	r18, 0x01	; 1
    2534:	80 40       	sbci	r24, 0x00	; 0
    2536:	90 40       	sbci	r25, 0x00	; 0
    2538:	e1 f7       	brne	.-8      	; 0x2532 <__vector_13+0x4ea>
    253a:	00 c0       	rjmp	.+0      	; 0x253c <__vector_13+0x4f4>
    253c:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    253e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    2542:	2f ef       	ldi	r18, 0xFF	; 255
    2544:	8d ee       	ldi	r24, 0xED	; 237
    2546:	92 e0       	ldi	r25, 0x02	; 2
    2548:	21 50       	subi	r18, 0x01	; 1
    254a:	80 40       	sbci	r24, 0x00	; 0
    254c:	90 40       	sbci	r25, 0x00	; 0
    254e:	e1 f7       	brne	.-8      	; 0x2548 <__vector_13+0x500>
    2550:	00 c0       	rjmp	.+0      	; 0x2552 <__vector_13+0x50a>
    2552:	00 00       	nop
					_delay_ms(Delay);
					
					
					LED2_ON();
    2554:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    2558:	2f ef       	ldi	r18, 0xFF	; 255
    255a:	8d ee       	ldi	r24, 0xED	; 237
    255c:	92 e0       	ldi	r25, 0x02	; 2
    255e:	21 50       	subi	r18, 0x01	; 1
    2560:	80 40       	sbci	r24, 0x00	; 0
    2562:	90 40       	sbci	r25, 0x00	; 0
    2564:	e1 f7       	brne	.-8      	; 0x255e <__vector_13+0x516>
    2566:	00 c0       	rjmp	.+0      	; 0x2568 <__vector_13+0x520>
    2568:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    256a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    256e:	2f ef       	ldi	r18, 0xFF	; 255
    2570:	8d ee       	ldi	r24, 0xED	; 237
    2572:	92 e0       	ldi	r25, 0x02	; 2
    2574:	21 50       	subi	r18, 0x01	; 1
    2576:	80 40       	sbci	r24, 0x00	; 0
    2578:	90 40       	sbci	r25, 0x00	; 0
    257a:	e1 f7       	brne	.-8      	; 0x2574 <__vector_13+0x52c>
    257c:	00 c0       	rjmp	.+0      	; 0x257e <__vector_13+0x536>
    257e:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    2580:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
					LED2_ON();
    2584:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    2588:	2f ef       	ldi	r18, 0xFF	; 255
    258a:	8d ee       	ldi	r24, 0xED	; 237
    258c:	92 e0       	ldi	r25, 0x02	; 2
    258e:	21 50       	subi	r18, 0x01	; 1
    2590:	80 40       	sbci	r24, 0x00	; 0
    2592:	90 40       	sbci	r25, 0x00	; 0
    2594:	e1 f7       	brne	.-8      	; 0x258e <__vector_13+0x546>
    2596:	00 c0       	rjmp	.+0      	; 0x2598 <__vector_13+0x550>
    2598:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_OFF();
    259a:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
    259e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    25a2:	2f ef       	ldi	r18, 0xFF	; 255
    25a4:	8d ee       	ldi	r24, 0xED	; 237
    25a6:	92 e0       	ldi	r25, 0x02	; 2
    25a8:	21 50       	subi	r18, 0x01	; 1
    25aa:	80 40       	sbci	r24, 0x00	; 0
    25ac:	90 40       	sbci	r25, 0x00	; 0
    25ae:	e1 f7       	brne	.-8      	; 0x25a8 <__vector_13+0x560>
    25b0:	00 c0       	rjmp	.+0      	; 0x25b2 <__vector_13+0x56a>
    25b2:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_OFF();
    25b4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
    25b8:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    25bc:	2f ef       	ldi	r18, 0xFF	; 255
    25be:	8d ee       	ldi	r24, 0xED	; 237
    25c0:	92 e0       	ldi	r25, 0x02	; 2
    25c2:	21 50       	subi	r18, 0x01	; 1
    25c4:	80 40       	sbci	r24, 0x00	; 0
    25c6:	90 40       	sbci	r25, 0x00	; 0
    25c8:	e1 f7       	brne	.-8      	; 0x25c2 <__vector_13+0x57a>
    25ca:	00 c0       	rjmp	.+0      	; 0x25cc <__vector_13+0x584>
    25cc:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    25ce:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
					LED2_ON();
    25d2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    25d6:	2f ef       	ldi	r18, 0xFF	; 255
    25d8:	8d ee       	ldi	r24, 0xED	; 237
    25da:	92 e0       	ldi	r25, 0x02	; 2
    25dc:	21 50       	subi	r18, 0x01	; 1
    25de:	80 40       	sbci	r24, 0x00	; 0
    25e0:	90 40       	sbci	r25, 0x00	; 0
    25e2:	e1 f7       	brne	.-8      	; 0x25dc <__vector_13+0x594>
    25e4:	00 c0       	rjmp	.+0      	; 0x25e6 <__vector_13+0x59e>
    25e6:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_OFF();
    25e8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
    25ec:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    25f0:	2f ef       	ldi	r18, 0xFF	; 255
    25f2:	8d ee       	ldi	r24, 0xED	; 237
    25f4:	92 e0       	ldi	r25, 0x02	; 2
    25f6:	21 50       	subi	r18, 0x01	; 1
    25f8:	80 40       	sbci	r24, 0x00	; 0
    25fa:	90 40       	sbci	r25, 0x00	; 0
    25fc:	e1 f7       	brne	.-8      	; 0x25f6 <__vector_13+0x5ae>
    25fe:	00 c0       	rjmp	.+0      	; 0x2600 <__vector_13+0x5b8>
    2600:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    2602:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    2606:	2f ef       	ldi	r18, 0xFF	; 255
    2608:	8d ee       	ldi	r24, 0xED	; 237
    260a:	92 e0       	ldi	r25, 0x02	; 2
    260c:	21 50       	subi	r18, 0x01	; 1
    260e:	80 40       	sbci	r24, 0x00	; 0
    2610:	90 40       	sbci	r25, 0x00	; 0
    2612:	e1 f7       	brne	.-8      	; 0x260c <__vector_13+0x5c4>
    2614:	00 c0       	rjmp	.+0      	; 0x2616 <__vector_13+0x5ce>
    2616:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    2618:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
    261c:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    2620:	2f ef       	ldi	r18, 0xFF	; 255
    2622:	8d ee       	ldi	r24, 0xED	; 237
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	21 50       	subi	r18, 0x01	; 1
    2628:	80 40       	sbci	r24, 0x00	; 0
    262a:	90 40       	sbci	r25, 0x00	; 0
    262c:	e1 f7       	brne	.-8      	; 0x2626 <__vector_13+0x5de>
    262e:	00 c0       	rjmp	.+0      	; 0x2630 <__vector_13+0x5e8>
    2630:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    2632:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    2636:	2f ef       	ldi	r18, 0xFF	; 255
    2638:	8d ee       	ldi	r24, 0xED	; 237
    263a:	92 e0       	ldi	r25, 0x02	; 2
    263c:	21 50       	subi	r18, 0x01	; 1
    263e:	80 40       	sbci	r24, 0x00	; 0
    2640:	90 40       	sbci	r25, 0x00	; 0
    2642:	e1 f7       	brne	.-8      	; 0x263c <__vector_13+0x5f4>
    2644:	00 c0       	rjmp	.+0      	; 0x2646 <__vector_13+0x5fe>
    2646:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    2648:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    264c:	2f ef       	ldi	r18, 0xFF	; 255
    264e:	8d ee       	ldi	r24, 0xED	; 237
    2650:	92 e0       	ldi	r25, 0x02	; 2
    2652:	21 50       	subi	r18, 0x01	; 1
    2654:	80 40       	sbci	r24, 0x00	; 0
    2656:	90 40       	sbci	r25, 0x00	; 0
    2658:	e1 f7       	brne	.-8      	; 0x2652 <__vector_13+0x60a>
    265a:	00 c0       	rjmp	.+0      	; 0x265c <__vector_13+0x614>
    265c:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    265e:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
    2662:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    2666:	2f ef       	ldi	r18, 0xFF	; 255
    2668:	8d ee       	ldi	r24, 0xED	; 237
    266a:	92 e0       	ldi	r25, 0x02	; 2
    266c:	21 50       	subi	r18, 0x01	; 1
    266e:	80 40       	sbci	r24, 0x00	; 0
    2670:	90 40       	sbci	r25, 0x00	; 0
    2672:	e1 f7       	brne	.-8      	; 0x266c <__vector_13+0x624>
    2674:	00 c0       	rjmp	.+0      	; 0x2676 <__vector_13+0x62e>
    2676:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    2678:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    267c:	2f ef       	ldi	r18, 0xFF	; 255
    267e:	8d ee       	ldi	r24, 0xED	; 237
    2680:	92 e0       	ldi	r25, 0x02	; 2
    2682:	21 50       	subi	r18, 0x01	; 1
    2684:	80 40       	sbci	r24, 0x00	; 0
    2686:	90 40       	sbci	r25, 0x00	; 0
    2688:	e1 f7       	brne	.-8      	; 0x2682 <__vector_13+0x63a>
    268a:	00 c0       	rjmp	.+0      	; 0x268c <__vector_13+0x644>
    268c:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    268e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    2692:	2f ef       	ldi	r18, 0xFF	; 255
    2694:	8d ee       	ldi	r24, 0xED	; 237
    2696:	92 e0       	ldi	r25, 0x02	; 2
    2698:	21 50       	subi	r18, 0x01	; 1
    269a:	80 40       	sbci	r24, 0x00	; 0
    269c:	90 40       	sbci	r25, 0x00	; 0
    269e:	e1 f7       	brne	.-8      	; 0x2698 <__vector_13+0x650>
    26a0:	00 c0       	rjmp	.+0      	; 0x26a2 <__vector_13+0x65a>
    26a2:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    26a4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
    26a8:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    26ac:	2f ef       	ldi	r18, 0xFF	; 255
    26ae:	8d ee       	ldi	r24, 0xED	; 237
    26b0:	92 e0       	ldi	r25, 0x02	; 2
    26b2:	21 50       	subi	r18, 0x01	; 1
    26b4:	80 40       	sbci	r24, 0x00	; 0
    26b6:	90 40       	sbci	r25, 0x00	; 0
    26b8:	e1 f7       	brne	.-8      	; 0x26b2 <__vector_13+0x66a>
    26ba:	00 c0       	rjmp	.+0      	; 0x26bc <__vector_13+0x674>
    26bc:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    26be:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    26c2:	2f ef       	ldi	r18, 0xFF	; 255
    26c4:	8d ee       	ldi	r24, 0xED	; 237
    26c6:	92 e0       	ldi	r25, 0x02	; 2
    26c8:	21 50       	subi	r18, 0x01	; 1
    26ca:	80 40       	sbci	r24, 0x00	; 0
    26cc:	90 40       	sbci	r25, 0x00	; 0
    26ce:	e1 f7       	brne	.-8      	; 0x26c8 <__vector_13+0x680>
    26d0:	00 c0       	rjmp	.+0      	; 0x26d2 <__vector_13+0x68a>
    26d2:	00 00       	nop
					_delay_ms(Delay);
					Buzzer_OFF();
    26d4:	0e 94 c5 00 	call	0x18a	; 0x18a <Buzzer_OFF>
					
					LED0_ON();
    26d8:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    26dc:	2f ef       	ldi	r18, 0xFF	; 255
    26de:	8d ee       	ldi	r24, 0xED	; 237
    26e0:	92 e0       	ldi	r25, 0x02	; 2
    26e2:	21 50       	subi	r18, 0x01	; 1
    26e4:	80 40       	sbci	r24, 0x00	; 0
    26e6:	90 40       	sbci	r25, 0x00	; 0
    26e8:	e1 f7       	brne	.-8      	; 0x26e2 <__vector_13+0x69a>
    26ea:	00 c0       	rjmp	.+0      	; 0x26ec <__vector_13+0x6a4>
    26ec:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    26ee:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
    26f2:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    26f6:	2f ef       	ldi	r18, 0xFF	; 255
    26f8:	8d ee       	ldi	r24, 0xED	; 237
    26fa:	92 e0       	ldi	r25, 0x02	; 2
    26fc:	21 50       	subi	r18, 0x01	; 1
    26fe:	80 40       	sbci	r24, 0x00	; 0
    2700:	90 40       	sbci	r25, 0x00	; 0
    2702:	e1 f7       	brne	.-8      	; 0x26fc <__vector_13+0x6b4>
    2704:	00 c0       	rjmp	.+0      	; 0x2706 <__vector_13+0x6be>
    2706:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    2708:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    270c:	2f ef       	ldi	r18, 0xFF	; 255
    270e:	8d ee       	ldi	r24, 0xED	; 237
    2710:	92 e0       	ldi	r25, 0x02	; 2
    2712:	21 50       	subi	r18, 0x01	; 1
    2714:	80 40       	sbci	r24, 0x00	; 0
    2716:	90 40       	sbci	r25, 0x00	; 0
    2718:	e1 f7       	brne	.-8      	; 0x2712 <__vector_13+0x6ca>
    271a:	00 c0       	rjmp	.+0      	; 0x271c <__vector_13+0x6d4>
    271c:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    271e:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    2722:	2f ef       	ldi	r18, 0xFF	; 255
    2724:	8d ee       	ldi	r24, 0xED	; 237
    2726:	92 e0       	ldi	r25, 0x02	; 2
    2728:	21 50       	subi	r18, 0x01	; 1
    272a:	80 40       	sbci	r24, 0x00	; 0
    272c:	90 40       	sbci	r25, 0x00	; 0
    272e:	e1 f7       	brne	.-8      	; 0x2728 <__vector_13+0x6e0>
    2730:	00 c0       	rjmp	.+0      	; 0x2732 <__vector_13+0x6ea>
    2732:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    2734:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
    2738:	2f ef       	ldi	r18, 0xFF	; 255
    273a:	8d ee       	ldi	r24, 0xED	; 237
    273c:	92 e0       	ldi	r25, 0x02	; 2
    273e:	21 50       	subi	r18, 0x01	; 1
    2740:	80 40       	sbci	r24, 0x00	; 0
    2742:	90 40       	sbci	r25, 0x00	; 0
    2744:	e1 f7       	brne	.-8      	; 0x273e <__vector_13+0x6f6>
    2746:	00 c0       	rjmp	.+0      	; 0x2748 <__vector_13+0x700>
    2748:	00 00       	nop
					_delay_ms(Delay);
					
					
					LED2_ON();
    274a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    274e:	2f ef       	ldi	r18, 0xFF	; 255
    2750:	8d ee       	ldi	r24, 0xED	; 237
    2752:	92 e0       	ldi	r25, 0x02	; 2
    2754:	21 50       	subi	r18, 0x01	; 1
    2756:	80 40       	sbci	r24, 0x00	; 0
    2758:	90 40       	sbci	r25, 0x00	; 0
    275a:	e1 f7       	brne	.-8      	; 0x2754 <__vector_13+0x70c>
    275c:	00 c0       	rjmp	.+0      	; 0x275e <__vector_13+0x716>
    275e:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    2760:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    2764:	2f ef       	ldi	r18, 0xFF	; 255
    2766:	8d ee       	ldi	r24, 0xED	; 237
    2768:	92 e0       	ldi	r25, 0x02	; 2
    276a:	21 50       	subi	r18, 0x01	; 1
    276c:	80 40       	sbci	r24, 0x00	; 0
    276e:	90 40       	sbci	r25, 0x00	; 0
    2770:	e1 f7       	brne	.-8      	; 0x276a <__vector_13+0x722>
    2772:	00 c0       	rjmp	.+0      	; 0x2774 <__vector_13+0x72c>
    2774:	00 00       	nop
					_delay_ms(Delay);
					
					LED2_ON();
    2776:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    277a:	2f ef       	ldi	r18, 0xFF	; 255
    277c:	8d ee       	ldi	r24, 0xED	; 237
    277e:	92 e0       	ldi	r25, 0x02	; 2
    2780:	21 50       	subi	r18, 0x01	; 1
    2782:	80 40       	sbci	r24, 0x00	; 0
    2784:	90 40       	sbci	r25, 0x00	; 0
    2786:	e1 f7       	brne	.-8      	; 0x2780 <__vector_13+0x738>
    2788:	00 c0       	rjmp	.+0      	; 0x278a <__vector_13+0x742>
    278a:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    278c:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    2790:	2f ef       	ldi	r18, 0xFF	; 255
    2792:	8d ee       	ldi	r24, 0xED	; 237
    2794:	92 e0       	ldi	r25, 0x02	; 2
    2796:	21 50       	subi	r18, 0x01	; 1
    2798:	80 40       	sbci	r24, 0x00	; 0
    279a:	90 40       	sbci	r25, 0x00	; 0
    279c:	e1 f7       	brne	.-8      	; 0x2796 <__vector_13+0x74e>
    279e:	00 c0       	rjmp	.+0      	; 0x27a0 <__vector_13+0x758>
    27a0:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    27a2:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
					LED2_ON();
    27a6:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    27aa:	2f ef       	ldi	r18, 0xFF	; 255
    27ac:	8d ee       	ldi	r24, 0xED	; 237
    27ae:	92 e0       	ldi	r25, 0x02	; 2
    27b0:	21 50       	subi	r18, 0x01	; 1
    27b2:	80 40       	sbci	r24, 0x00	; 0
    27b4:	90 40       	sbci	r25, 0x00	; 0
    27b6:	e1 f7       	brne	.-8      	; 0x27b0 <__vector_13+0x768>
    27b8:	00 c0       	rjmp	.+0      	; 0x27ba <__vector_13+0x772>
    27ba:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_OFF();
    27bc:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
    27c0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    27c4:	2f ef       	ldi	r18, 0xFF	; 255
    27c6:	8d ee       	ldi	r24, 0xED	; 237
    27c8:	92 e0       	ldi	r25, 0x02	; 2
    27ca:	21 50       	subi	r18, 0x01	; 1
    27cc:	80 40       	sbci	r24, 0x00	; 0
    27ce:	90 40       	sbci	r25, 0x00	; 0
    27d0:	e1 f7       	brne	.-8      	; 0x27ca <__vector_13+0x782>
    27d2:	00 c0       	rjmp	.+0      	; 0x27d4 <__vector_13+0x78c>
    27d4:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    27d6:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
					LED2_ON();
    27da:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    27de:	2f ef       	ldi	r18, 0xFF	; 255
    27e0:	8d ee       	ldi	r24, 0xED	; 237
    27e2:	92 e0       	ldi	r25, 0x02	; 2
    27e4:	21 50       	subi	r18, 0x01	; 1
    27e6:	80 40       	sbci	r24, 0x00	; 0
    27e8:	90 40       	sbci	r25, 0x00	; 0
    27ea:	e1 f7       	brne	.-8      	; 0x27e4 <__vector_13+0x79c>
    27ec:	00 c0       	rjmp	.+0      	; 0x27ee <__vector_13+0x7a6>
    27ee:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_OFF();
    27f0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_OFF();
    27f4:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    27f8:	2f ef       	ldi	r18, 0xFF	; 255
    27fa:	8d ee       	ldi	r24, 0xED	; 237
    27fc:	92 e0       	ldi	r25, 0x02	; 2
    27fe:	21 50       	subi	r18, 0x01	; 1
    2800:	80 40       	sbci	r24, 0x00	; 0
    2802:	90 40       	sbci	r25, 0x00	; 0
    2804:	e1 f7       	brne	.-8      	; 0x27fe <__vector_13+0x7b6>
    2806:	00 c0       	rjmp	.+0      	; 0x2808 <__vector_13+0x7c0>
    2808:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    280a:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    280e:	2f ef       	ldi	r18, 0xFF	; 255
    2810:	8d ee       	ldi	r24, 0xED	; 237
    2812:	92 e0       	ldi	r25, 0x02	; 2
    2814:	21 50       	subi	r18, 0x01	; 1
    2816:	80 40       	sbci	r24, 0x00	; 0
    2818:	90 40       	sbci	r25, 0x00	; 0
    281a:	e1 f7       	brne	.-8      	; 0x2814 <__vector_13+0x7cc>
    281c:	00 c0       	rjmp	.+0      	; 0x281e <__vector_13+0x7d6>
    281e:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    2820:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
    2824:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    2828:	2f ef       	ldi	r18, 0xFF	; 255
    282a:	8d ee       	ldi	r24, 0xED	; 237
    282c:	92 e0       	ldi	r25, 0x02	; 2
    282e:	21 50       	subi	r18, 0x01	; 1
    2830:	80 40       	sbci	r24, 0x00	; 0
    2832:	90 40       	sbci	r25, 0x00	; 0
    2834:	e1 f7       	brne	.-8      	; 0x282e <__vector_13+0x7e6>
    2836:	00 c0       	rjmp	.+0      	; 0x2838 <__vector_13+0x7f0>
    2838:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    283a:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    283e:	2f ef       	ldi	r18, 0xFF	; 255
    2840:	8d ee       	ldi	r24, 0xED	; 237
    2842:	92 e0       	ldi	r25, 0x02	; 2
    2844:	21 50       	subi	r18, 0x01	; 1
    2846:	80 40       	sbci	r24, 0x00	; 0
    2848:	90 40       	sbci	r25, 0x00	; 0
    284a:	e1 f7       	brne	.-8      	; 0x2844 <__vector_13+0x7fc>
    284c:	00 c0       	rjmp	.+0      	; 0x284e <__vector_13+0x806>
    284e:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_ON();
    2850:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
    2854:	2f ef       	ldi	r18, 0xFF	; 255
    2856:	8d ee       	ldi	r24, 0xED	; 237
    2858:	92 e0       	ldi	r25, 0x02	; 2
    285a:	21 50       	subi	r18, 0x01	; 1
    285c:	80 40       	sbci	r24, 0x00	; 0
    285e:	90 40       	sbci	r25, 0x00	; 0
    2860:	e1 f7       	brne	.-8      	; 0x285a <__vector_13+0x812>
    2862:	00 c0       	rjmp	.+0      	; 0x2864 <__vector_13+0x81c>
    2864:	00 00       	nop
					_delay_ms(Delay);
					LED0_OFF();
    2866:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
					LED2_ON();
    286a:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
    286e:	2f ef       	ldi	r18, 0xFF	; 255
    2870:	8d ee       	ldi	r24, 0xED	; 237
    2872:	92 e0       	ldi	r25, 0x02	; 2
    2874:	21 50       	subi	r18, 0x01	; 1
    2876:	80 40       	sbci	r24, 0x00	; 0
    2878:	90 40       	sbci	r25, 0x00	; 0
    287a:	e1 f7       	brne	.-8      	; 0x2874 <__vector_13+0x82c>
    287c:	00 c0       	rjmp	.+0      	; 0x287e <__vector_13+0x836>
    287e:	00 00       	nop
					_delay_ms(Delay);
					LED2_OFF();
    2880:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
    2884:	2f ef       	ldi	r18, 0xFF	; 255
    2886:	8d ee       	ldi	r24, 0xED	; 237
    2888:	92 e0       	ldi	r25, 0x02	; 2
    288a:	21 50       	subi	r18, 0x01	; 1
    288c:	80 40       	sbci	r24, 0x00	; 0
    288e:	90 40       	sbci	r25, 0x00	; 0
    2890:	e1 f7       	brne	.-8      	; 0x288a <__vector_13+0x842>
    2892:	00 c0       	rjmp	.+0      	; 0x2894 <__vector_13+0x84c>
    2894:	00 00       	nop
					_delay_ms(Delay);
					
					
					
					
					LED0_Toggle();
    2896:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    289a:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    289e:	2f ef       	ldi	r18, 0xFF	; 255
    28a0:	8d ee       	ldi	r24, 0xED	; 237
    28a2:	92 e0       	ldi	r25, 0x02	; 2
    28a4:	21 50       	subi	r18, 0x01	; 1
    28a6:	80 40       	sbci	r24, 0x00	; 0
    28a8:	90 40       	sbci	r25, 0x00	; 0
    28aa:	e1 f7       	brne	.-8      	; 0x28a4 <__vector_13+0x85c>
    28ac:	00 c0       	rjmp	.+0      	; 0x28ae <__vector_13+0x866>
    28ae:	00 00       	nop
					_delay_ms(Delay);
					LED0_Toggle();
    28b0:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    28b4:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    28b8:	2f ef       	ldi	r18, 0xFF	; 255
    28ba:	83 ec       	ldi	r24, 0xC3	; 195
    28bc:	99 e0       	ldi	r25, 0x09	; 9
    28be:	21 50       	subi	r18, 0x01	; 1
    28c0:	80 40       	sbci	r24, 0x00	; 0
    28c2:	90 40       	sbci	r25, 0x00	; 0
    28c4:	e1 f7       	brne	.-8      	; 0x28be <__vector_13+0x876>
    28c6:	00 c0       	rjmp	.+0      	; 0x28c8 <__vector_13+0x880>
    28c8:	00 00       	nop
					_delay_ms(200);
					LED0_Toggle();
    28ca:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    28ce:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    28d2:	2f ef       	ldi	r18, 0xFF	; 255
    28d4:	89 e6       	ldi	r24, 0x69	; 105
    28d6:	98 e1       	ldi	r25, 0x18	; 24
    28d8:	21 50       	subi	r18, 0x01	; 1
    28da:	80 40       	sbci	r24, 0x00	; 0
    28dc:	90 40       	sbci	r25, 0x00	; 0
    28de:	e1 f7       	brne	.-8      	; 0x28d8 <__vector_13+0x890>
    28e0:	00 c0       	rjmp	.+0      	; 0x28e2 <__vector_13+0x89a>
    28e2:	00 00       	nop
					_delay_ms(500);
					LED0_Toggle();
    28e4:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    28e8:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    28ec:	2f ef       	ldi	r18, 0xFF	; 255
    28ee:	81 ee       	ldi	r24, 0xE1	; 225
    28f0:	94 e0       	ldi	r25, 0x04	; 4
    28f2:	21 50       	subi	r18, 0x01	; 1
    28f4:	80 40       	sbci	r24, 0x00	; 0
    28f6:	90 40       	sbci	r25, 0x00	; 0
    28f8:	e1 f7       	brne	.-8      	; 0x28f2 <__vector_13+0x8aa>
    28fa:	00 c0       	rjmp	.+0      	; 0x28fc <__vector_13+0x8b4>
    28fc:	00 00       	nop
					_delay_ms(100);
					LED0_Toggle();
    28fe:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    2902:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2906:	2f ef       	ldi	r18, 0xFF	; 255
    2908:	8d ee       	ldi	r24, 0xED	; 237
    290a:	92 e0       	ldi	r25, 0x02	; 2
    290c:	21 50       	subi	r18, 0x01	; 1
    290e:	80 40       	sbci	r24, 0x00	; 0
    2910:	90 40       	sbci	r25, 0x00	; 0
    2912:	e1 f7       	brne	.-8      	; 0x290c <__vector_13+0x8c4>
    2914:	00 c0       	rjmp	.+0      	; 0x2916 <__vector_13+0x8ce>
    2916:	00 00       	nop
					_delay_ms(Delay);
					LED0_Toggle();
    2918:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    291c:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2920:	2f ef       	ldi	r18, 0xFF	; 255
    2922:	8d ee       	ldi	r24, 0xED	; 237
    2924:	92 e0       	ldi	r25, 0x02	; 2
    2926:	21 50       	subi	r18, 0x01	; 1
    2928:	80 40       	sbci	r24, 0x00	; 0
    292a:	90 40       	sbci	r25, 0x00	; 0
    292c:	e1 f7       	brne	.-8      	; 0x2926 <__vector_13+0x8de>
    292e:	00 c0       	rjmp	.+0      	; 0x2930 <__vector_13+0x8e8>
    2930:	00 00       	nop
					_delay_ms(Delay);
					LED0_Toggle();
    2932:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    2936:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    293a:	8f e3       	ldi	r24, 0x3F	; 63
    293c:	9c e9       	ldi	r25, 0x9C	; 156
    293e:	01 97       	sbiw	r24, 0x01	; 1
    2940:	f1 f7       	brne	.-4      	; 0x293e <__vector_13+0x8f6>
    2942:	00 c0       	rjmp	.+0      	; 0x2944 <__vector_13+0x8fc>
    2944:	00 00       	nop
					_delay_ms(10);
					LED0_Toggle();
    2946:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    294a:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    294e:	9f ef       	ldi	r25, 0xFF	; 255
    2950:	2d ee       	ldi	r18, 0xED	; 237
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	91 50       	subi	r25, 0x01	; 1
    2956:	20 40       	sbci	r18, 0x00	; 0
    2958:	80 40       	sbci	r24, 0x00	; 0
    295a:	e1 f7       	brne	.-8      	; 0x2954 <__vector_13+0x90c>
    295c:	00 c0       	rjmp	.+0      	; 0x295e <__vector_13+0x916>
    295e:	00 00       	nop
					_delay_ms(Delay);
					LED0_Toggle();
    2960:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    2964:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2968:	9f ef       	ldi	r25, 0xFF	; 255
    296a:	2d ee       	ldi	r18, 0xED	; 237
    296c:	82 e0       	ldi	r24, 0x02	; 2
    296e:	91 50       	subi	r25, 0x01	; 1
    2970:	20 40       	sbci	r18, 0x00	; 0
    2972:	80 40       	sbci	r24, 0x00	; 0
    2974:	e1 f7       	brne	.-8      	; 0x296e <__vector_13+0x926>
    2976:	00 c0       	rjmp	.+0      	; 0x2978 <__vector_13+0x930>
    2978:	00 00       	nop
					_delay_ms(Delay);
					
					LED0_Toggle();
    297a:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    297e:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2982:	9f ef       	ldi	r25, 0xFF	; 255
    2984:	2d ee       	ldi	r18, 0xED	; 237
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	91 50       	subi	r25, 0x01	; 1
    298a:	20 40       	sbci	r18, 0x00	; 0
    298c:	80 40       	sbci	r24, 0x00	; 0
    298e:	e1 f7       	brne	.-8      	; 0x2988 <__vector_13+0x940>
    2990:	00 c0       	rjmp	.+0      	; 0x2992 <__vector_13+0x94a>
    2992:	00 00       	nop
					_delay_ms(Delay);
					LED2_Toggle();
    2994:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    2998:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    299c:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    29a0:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    29a4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    29a8:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    29ac:	9f ef       	ldi	r25, 0xFF	; 255
    29ae:	23 ec       	ldi	r18, 0xC3	; 195
    29b0:	89 e0       	ldi	r24, 0x09	; 9
    29b2:	91 50       	subi	r25, 0x01	; 1
    29b4:	20 40       	sbci	r18, 0x00	; 0
    29b6:	80 40       	sbci	r24, 0x00	; 0
    29b8:	e1 f7       	brne	.-8      	; 0x29b2 <__vector_13+0x96a>
    29ba:	00 c0       	rjmp	.+0      	; 0x29bc <__vector_13+0x974>
    29bc:	00 00       	nop
					_delay_ms(200);
					LED0_Toggle();
    29be:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED2_Toggle();
    29c2:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    29c6:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED1_Toggle();
    29ca:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    29ce:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    29d2:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    29d6:	9f ef       	ldi	r25, 0xFF	; 255
    29d8:	2d ee       	ldi	r18, 0xED	; 237
    29da:	82 e0       	ldi	r24, 0x02	; 2
    29dc:	91 50       	subi	r25, 0x01	; 1
    29de:	20 40       	sbci	r18, 0x00	; 0
    29e0:	80 40       	sbci	r24, 0x00	; 0
    29e2:	e1 f7       	brne	.-8      	; 0x29dc <__vector_13+0x994>
    29e4:	00 c0       	rjmp	.+0      	; 0x29e6 <__vector_13+0x99e>
    29e6:	00 00       	nop
					_delay_ms(Delay);
					LED2_Toggle();
    29e8:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    29ec:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    29f0:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    29f4:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    29f8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    29fc:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2a00:	9f ef       	ldi	r25, 0xFF	; 255
    2a02:	21 ee       	ldi	r18, 0xE1	; 225
    2a04:	84 e0       	ldi	r24, 0x04	; 4
    2a06:	91 50       	subi	r25, 0x01	; 1
    2a08:	20 40       	sbci	r18, 0x00	; 0
    2a0a:	80 40       	sbci	r24, 0x00	; 0
    2a0c:	e1 f7       	brne	.-8      	; 0x2a06 <__vector_13+0x9be>
    2a0e:	00 c0       	rjmp	.+0      	; 0x2a10 <__vector_13+0x9c8>
    2a10:	00 00       	nop
					_delay_ms(100);
					LED2_Toggle();
    2a12:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    2a16:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    2a1a:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    2a1e:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    2a22:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    2a26:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2a2a:	9f ef       	ldi	r25, 0xFF	; 255
    2a2c:	2d ee       	ldi	r18, 0xED	; 237
    2a2e:	82 e0       	ldi	r24, 0x02	; 2
    2a30:	91 50       	subi	r25, 0x01	; 1
    2a32:	20 40       	sbci	r18, 0x00	; 0
    2a34:	80 40       	sbci	r24, 0x00	; 0
    2a36:	e1 f7       	brne	.-8      	; 0x2a30 <__vector_13+0x9e8>
    2a38:	00 c0       	rjmp	.+0      	; 0x2a3a <__vector_13+0x9f2>
    2a3a:	00 00       	nop
					_delay_ms(Delay);
					LED2_Toggle();
    2a3c:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    2a40:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    2a44:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    2a48:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    2a4c:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    2a50:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2a54:	9f ef       	ldi	r25, 0xFF	; 255
    2a56:	23 ed       	ldi	r18, 0xD3	; 211
    2a58:	80 e3       	ldi	r24, 0x30	; 48
    2a5a:	91 50       	subi	r25, 0x01	; 1
    2a5c:	20 40       	sbci	r18, 0x00	; 0
    2a5e:	80 40       	sbci	r24, 0x00	; 0
    2a60:	e1 f7       	brne	.-8      	; 0x2a5a <__vector_13+0xa12>
    2a62:	00 c0       	rjmp	.+0      	; 0x2a64 <__vector_13+0xa1c>
    2a64:	00 00       	nop
					_delay_ms(1000);
					LED2_Toggle();
    2a66:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    2a6a:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    2a6e:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    2a72:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    2a76:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    2a7a:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2a7e:	8f e3       	ldi	r24, 0x3F	; 63
    2a80:	9c e9       	ldi	r25, 0x9C	; 156
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <__vector_13+0xa3a>
    2a86:	00 c0       	rjmp	.+0      	; 0x2a88 <__vector_13+0xa40>
    2a88:	00 00       	nop
					_delay_ms(10);
					LED2_Toggle();
    2a8a:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    2a8e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    2a92:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    2a96:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    2a9a:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    2a9e:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2aa2:	8f e3       	ldi	r24, 0x3F	; 63
    2aa4:	9c e9       	ldi	r25, 0x9C	; 156
    2aa6:	01 97       	sbiw	r24, 0x01	; 1
    2aa8:	f1 f7       	brne	.-4      	; 0x2aa6 <__vector_13+0xa5e>
    2aaa:	00 c0       	rjmp	.+0      	; 0x2aac <__vector_13+0xa64>
    2aac:	00 00       	nop
					_delay_ms(10);
					LED2_Toggle();
    2aae:	0e 94 ef 0c 	call	0x19de	; 0x19de <LED2_Toggle>
					LED3_Toggle();
    2ab2:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <LED3_Toggle>
					LED0_Toggle();
    2ab6:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					LED1_Toggle();
    2aba:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <LED1_Toggle>
					LED4_Toggle();
    2abe:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <LED4_Toggle>
					Buzzer_Toggle();
    2ac2:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2ac6:	9f ef       	ldi	r25, 0xFF	; 255
    2ac8:	21 ee       	ldi	r18, 0xE1	; 225
    2aca:	84 e0       	ldi	r24, 0x04	; 4
    2acc:	91 50       	subi	r25, 0x01	; 1
    2ace:	20 40       	sbci	r18, 0x00	; 0
    2ad0:	80 40       	sbci	r24, 0x00	; 0
    2ad2:	e1 f7       	brne	.-8      	; 0x2acc <__vector_13+0xa84>
    2ad4:	00 c0       	rjmp	.+0      	; 0x2ad6 <__vector_13+0xa8e>
    2ad6:	00 00       	nop
					_delay_ms(100);
					
					LED0_Toggle();
    2ad8:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_ON();
    2adc:	0e 94 bf 00 	call	0x17e	; 0x17e <Buzzer_ON>
    2ae0:	9f ef       	ldi	r25, 0xFF	; 255
    2ae2:	24 e3       	ldi	r18, 0x34	; 52
    2ae4:	8c e0       	ldi	r24, 0x0C	; 12
    2ae6:	91 50       	subi	r25, 0x01	; 1
    2ae8:	20 40       	sbci	r18, 0x00	; 0
    2aea:	80 40       	sbci	r24, 0x00	; 0
    2aec:	e1 f7       	brne	.-8      	; 0x2ae6 <__vector_13+0xa9e>
    2aee:	00 c0       	rjmp	.+0      	; 0x2af0 <__vector_13+0xaa8>
    2af0:	00 00       	nop
					_delay_ms(250);
					LED0_Toggle();
    2af2:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_Toggle();
    2af6:	0e 94 cb 00 	call	0x196	; 0x196 <Buzzer_Toggle>
    2afa:	9f ef       	ldi	r25, 0xFF	; 255
    2afc:	24 e3       	ldi	r18, 0x34	; 52
    2afe:	8c e0       	ldi	r24, 0x0C	; 12
    2b00:	91 50       	subi	r25, 0x01	; 1
    2b02:	20 40       	sbci	r18, 0x00	; 0
    2b04:	80 40       	sbci	r24, 0x00	; 0
    2b06:	e1 f7       	brne	.-8      	; 0x2b00 <__vector_13+0xab8>
    2b08:	00 c0       	rjmp	.+0      	; 0x2b0a <__vector_13+0xac2>
    2b0a:	00 00       	nop
					_delay_ms(250);
					LED0_Toggle();
    2b0c:	0e 94 b7 0c 	call	0x196e	; 0x196e <LED0_Toggle>
					Buzzer_ON();
    2b10:	0e 94 bf 00 	call	0x17e	; 0x17e <Buzzer_ON>
    2b14:	9f ef       	ldi	r25, 0xFF	; 255
    2b16:	2d ee       	ldi	r18, 0xED	; 237
    2b18:	82 e0       	ldi	r24, 0x02	; 2
    2b1a:	91 50       	subi	r25, 0x01	; 1
    2b1c:	20 40       	sbci	r18, 0x00	; 0
    2b1e:	80 40       	sbci	r24, 0x00	; 0
    2b20:	e1 f7       	brne	.-8      	; 0x2b1a <__vector_13+0xad2>
    2b22:	00 c0       	rjmp	.+0      	; 0x2b24 <__vector_13+0xadc>
    2b24:	00 00       	nop
					_delay_ms(Delay);
					Buzzer_OFF();
    2b26:	0e 94 c5 00 	call	0x18a	; 0x18a <Buzzer_OFF>
    2b2a:	ca cc       	rjmp	.-1644   	; 0x24c0 <__vector_13+0x478>
	// Write UART receive handler here
	if(!SYS_Check)
	{
			
		// Commands check
		for(Uint8 i = 0; i < 4; i++)
    2b2c:	93 94       	inc	r9
    2b2e:	01 c0       	rjmp	.+2      	; 0x2b32 <__vector_13+0xaea>
    2b30:	91 2c       	mov	r9, r1
    2b32:	93 e0       	ldi	r25, 0x03	; 3
    2b34:	99 15       	cp	r25, r9
    2b36:	08 f0       	brcs	.+2      	; 0x2b3a <__vector_13+0xaf2>
    2b38:	cd ca       	rjmp	.-2662   	; 0x20d4 <__vector_13+0x8c>
					Buzzer_OFF();
				}
			}
		}
	}
	if(SYS_Check == 1)
    2b3a:	80 91 8d 07 	lds	r24, 0x078D	; 0x80078d <SYS_Check>
    2b3e:	81 30       	cpi	r24, 0x01	; 1
    2b40:	09 f0       	breq	.+2      	; 0x2b44 <__vector_13+0xafc>
    2b42:	c2 c6       	rjmp	.+3460   	; 0x38c8 <__vector_13+0x1880>
	{
		UART_GetValue = UDR;
    2b44:	8c b1       	in	r24, 0x0c	; 12
    2b46:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
		
		if(CMD_Check)
    2b4a:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <CMD_Check>
    2b4e:	88 23       	and	r24, r24
    2b50:	29 f0       	breq	.+10     	; 0x2b5c <__vector_13+0xb14>
		{
			UART_GetValue = 8;
    2b52:	88 e0       	ldi	r24, 0x08	; 8
    2b54:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			CMD_Check = 0;
    2b58:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <CMD_Check>
		}
	
		if(UART_GetValue == '1')
    2b5c:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <UART_GetValue>
    2b60:	81 33       	cpi	r24, 0x31	; 49
    2b62:	b9 f4       	brne	.+46     	; 0x2b92 <__vector_13+0xb4a>
		{
			// Open the door
			Servoo_Motor(316);
    2b64:	6c e3       	ldi	r22, 0x3C	; 60
    2b66:	71 e0       	ldi	r23, 0x01	; 1
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Servoo_Motor>
			if(!eme_check)
    2b70:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2b74:	81 11       	cpse	r24, r1
    2b76:	73 c6       	rjmp	.+3302   	; 0x385e <__vector_13+0x1816>
			{
				LCD_Clear();
    2b78:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Door Opened!");
    2b7c:	82 e4       	ldi	r24, 0x42	; 66
    2b7e:	93 e0       	ldi	r25, 0x03	; 3
    2b80:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				Timer2_SetDelay(2000);
    2b84:	60 ed       	ldi	r22, 0xD0	; 208
    2b86:	77 e0       	ldi	r23, 0x07	; 7
    2b88:	80 e0       	ldi	r24, 0x00	; 0
    2b8a:	90 e0       	ldi	r25, 0x00	; 0
    2b8c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    2b90:	66 c6       	rjmp	.+3276   	; 0x385e <__vector_13+0x1816>
			}
		}
		
		else if(UART_GetValue == '2')
    2b92:	82 33       	cpi	r24, 0x32	; 50
    2b94:	b9 f4       	brne	.+46     	; 0x2bc4 <__vector_13+0xb7c>
		{
			// Close the door
			Servoo_Motor(97);
    2b96:	61 e6       	ldi	r22, 0x61	; 97
    2b98:	70 e0       	ldi	r23, 0x00	; 0
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	90 e0       	ldi	r25, 0x00	; 0
    2b9e:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <Servoo_Motor>
			if(!eme_check)
    2ba2:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2ba6:	81 11       	cpse	r24, r1
    2ba8:	5a c6       	rjmp	.+3252   	; 0x385e <__vector_13+0x1816>
			{
				LCD_Clear();
    2baa:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Door Closed!");
    2bae:	8f e4       	ldi	r24, 0x4F	; 79
    2bb0:	93 e0       	ldi	r25, 0x03	; 3
    2bb2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				Timer2_SetDelay(2000);
    2bb6:	60 ed       	ldi	r22, 0xD0	; 208
    2bb8:	77 e0       	ldi	r23, 0x07	; 7
    2bba:	80 e0       	ldi	r24, 0x00	; 0
    2bbc:	90 e0       	ldi	r25, 0x00	; 0
    2bbe:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    2bc2:	4d c6       	rjmp	.+3226   	; 0x385e <__vector_13+0x1816>
			}
		}
		
		else if(UART_GetValue == '3')
    2bc4:	83 33       	cpi	r24, 0x33	; 51
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <__vector_13+0xb82>
    2bc8:	8a c0       	rjmp	.+276    	; 0x2cde <__vector_13+0xc96>
		{
			// Open lamps
			UART_TX_Str("\r\n");
    2bca:	89 eb       	ldi	r24, 0xB9	; 185
    2bcc:	92 e0       	ldi	r25, 0x02	; 2
    2bce:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    2bd2:	89 eb       	ldi	r24, 0xB9	; 185
    2bd4:	92 e0       	ldi	r25, 0x02	; 2
    2bd6:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Which lamp do you want to be opened(From 1 to 5)\r\n");
    2bda:	8c e5       	ldi	r24, 0x5C	; 92
    2bdc:	93 e0       	ldi	r25, 0x03	; 3
    2bde:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("6.All Lamps\r\n");
    2be2:	8f e8       	ldi	r24, 0x8F	; 143
    2be4:	93 e0       	ldi	r25, 0x03	; 3
    2be6:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    2bea:	89 eb       	ldi	r24, 0xB9	; 185
    2bec:	92 e0       	ldi	r25, 0x02	; 2
    2bee:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			while(!Get_Bit(UCSRA,7));			// Polling until the user enter a character
    2bf2:	5f 9b       	sbis	0x0b, 7	; 11
    2bf4:	fe cf       	rjmp	.-4      	; 0x2bf2 <__vector_13+0xbaa>
			UART_GetValue = UART_RX_Char();		// Receiving the command
    2bf6:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    2bfa:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			
			if(UART_GetValue == '1')
    2bfe:	81 33       	cpi	r24, 0x31	; 49
    2c00:	69 f4       	brne	.+26     	; 0x2c1c <__vector_13+0xbd4>
			{	
				LED0_ON();
    2c02:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
				if(!eme_check)
    2c06:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2c0a:	81 11       	cpse	r24, r1
    2c0c:	61 c0       	rjmp	.+194    	; 0x2cd0 <__vector_13+0xc88>
				{
					LCD_Clear();
    2c0e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(1) Opened");
    2c12:	8d e9       	ldi	r24, 0x9D	; 157
    2c14:	93 e0       	ldi	r25, 0x03	; 3
    2c16:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2c1a:	5a c0       	rjmp	.+180    	; 0x2cd0 <__vector_13+0xc88>
				}
			}
			else if(UART_GetValue == '2')
    2c1c:	82 33       	cpi	r24, 0x32	; 50
    2c1e:	69 f4       	brne	.+26     	; 0x2c3a <__vector_13+0xbf2>
			{
				LED1_ON();
    2c20:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED1_ON>
				if(!eme_check)
    2c24:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2c28:	81 11       	cpse	r24, r1
    2c2a:	52 c0       	rjmp	.+164    	; 0x2cd0 <__vector_13+0xc88>
				{
					LCD_Clear();
    2c2c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(2) Opened");
    2c30:	8c ea       	ldi	r24, 0xAC	; 172
    2c32:	93 e0       	ldi	r25, 0x03	; 3
    2c34:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2c38:	4b c0       	rjmp	.+150    	; 0x2cd0 <__vector_13+0xc88>
				}
			}
			else if(UART_GetValue == '3')		
    2c3a:	83 33       	cpi	r24, 0x33	; 51
    2c3c:	69 f4       	brne	.+26     	; 0x2c58 <__vector_13+0xc10>
			{
				LED2_ON();
    2c3e:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
				if(!eme_check)
    2c42:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2c46:	81 11       	cpse	r24, r1
    2c48:	43 c0       	rjmp	.+134    	; 0x2cd0 <__vector_13+0xc88>
				{
					LCD_Clear();
    2c4a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(3) Opened");
    2c4e:	8b eb       	ldi	r24, 0xBB	; 187
    2c50:	93 e0       	ldi	r25, 0x03	; 3
    2c52:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2c56:	3c c0       	rjmp	.+120    	; 0x2cd0 <__vector_13+0xc88>
				}
			}
			else if(UART_GetValue == '4')
    2c58:	84 33       	cpi	r24, 0x34	; 52
    2c5a:	69 f4       	brne	.+26     	; 0x2c76 <__vector_13+0xc2e>
			{
				LED3_ON();
    2c5c:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
				if(!eme_check)
    2c60:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2c64:	81 11       	cpse	r24, r1
    2c66:	34 c0       	rjmp	.+104    	; 0x2cd0 <__vector_13+0xc88>
				{
					LCD_Clear();
    2c68:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(4) Opened");
    2c6c:	8a ec       	ldi	r24, 0xCA	; 202
    2c6e:	93 e0       	ldi	r25, 0x03	; 3
    2c70:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2c74:	2d c0       	rjmp	.+90     	; 0x2cd0 <__vector_13+0xc88>
				}
			}
			else if(UART_GetValue == '5')
    2c76:	85 33       	cpi	r24, 0x35	; 53
    2c78:	69 f4       	brne	.+26     	; 0x2c94 <__vector_13+0xc4c>
			{
				LED4_ON();
    2c7a:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LED4_ON>
				if(!eme_check)
    2c7e:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2c82:	81 11       	cpse	r24, r1
    2c84:	25 c0       	rjmp	.+74     	; 0x2cd0 <__vector_13+0xc88>
				{
					LCD_Clear();
    2c86:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(5) Opened");
    2c8a:	89 ed       	ldi	r24, 0xD9	; 217
    2c8c:	93 e0       	ldi	r25, 0x03	; 3
    2c8e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2c92:	1e c0       	rjmp	.+60     	; 0x2cd0 <__vector_13+0xc88>
				}
			}
			else if(UART_GetValue == '6')
    2c94:	86 33       	cpi	r24, 0x36	; 54
    2c96:	e1 f4       	brne	.+56     	; 0x2cd0 <__vector_13+0xc88>
			{	
				LED0_ON();
    2c98:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
				LED1_ON();
    2c9c:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED1_ON>
				LED2_ON();
    2ca0:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
				LED3_ON();
    2ca4:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
				LED4_ON();
    2ca8:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LED4_ON>
				if(!eme_check)
    2cac:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2cb0:	81 11       	cpse	r24, r1
    2cb2:	0e c0       	rjmp	.+28     	; 0x2cd0 <__vector_13+0xc88>
				{
					LCD_Clear();
    2cb4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("All Lamps Are");
    2cb8:	88 ee       	ldi	r24, 0xE8	; 232
    2cba:	93 e0       	ldi	r25, 0x03	; 3
    2cbc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
					LCD_Goto(1,0);
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
					LCD_Write_String("Opened");
    2cc8:	85 ea       	ldi	r24, 0xA5	; 165
    2cca:	93 e0       	ldi	r25, 0x03	; 3
    2ccc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				}
			}
			Timer2_SetDelay(2000);
    2cd0:	60 ed       	ldi	r22, 0xD0	; 208
    2cd2:	77 e0       	ldi	r23, 0x07	; 7
    2cd4:	80 e0       	ldi	r24, 0x00	; 0
    2cd6:	90 e0       	ldi	r25, 0x00	; 0
    2cd8:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    2cdc:	c0 c5       	rjmp	.+2944   	; 0x385e <__vector_13+0x1816>
		}
		
		else if(UART_GetValue == '4')
    2cde:	84 33       	cpi	r24, 0x34	; 52
    2ce0:	09 f0       	breq	.+2      	; 0x2ce4 <__vector_13+0xc9c>
    2ce2:	8a c0       	rjmp	.+276    	; 0x2df8 <__vector_13+0xdb0>
		{
			// Close lamps
			UART_TX_Str("\r\n");
    2ce4:	89 eb       	ldi	r24, 0xB9	; 185
    2ce6:	92 e0       	ldi	r25, 0x02	; 2
    2ce8:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    2cec:	89 eb       	ldi	r24, 0xB9	; 185
    2cee:	92 e0       	ldi	r25, 0x02	; 2
    2cf0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Which lamp do you want to be Closed(From 1 to 5)\r\n");
    2cf4:	86 ef       	ldi	r24, 0xF6	; 246
    2cf6:	93 e0       	ldi	r25, 0x03	; 3
    2cf8:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("6.All Lamps\r\n");
    2cfc:	8f e8       	ldi	r24, 0x8F	; 143
    2cfe:	93 e0       	ldi	r25, 0x03	; 3
    2d00:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    2d04:	89 eb       	ldi	r24, 0xB9	; 185
    2d06:	92 e0       	ldi	r25, 0x02	; 2
    2d08:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			while(!Get_Bit(UCSRA,7));			// Polling until the user enter a character
    2d0c:	5f 9b       	sbis	0x0b, 7	; 11
    2d0e:	fe cf       	rjmp	.-4      	; 0x2d0c <__vector_13+0xcc4>
			UART_GetValue = UART_RX_Char();	// Receiving the command
    2d10:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    2d14:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			
			if(UART_GetValue == '1')
    2d18:	81 33       	cpi	r24, 0x31	; 49
    2d1a:	69 f4       	brne	.+26     	; 0x2d36 <__vector_13+0xcee>
			{
				LED0_OFF();
    2d1c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
				if(!eme_check)
    2d20:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2d24:	81 11       	cpse	r24, r1
    2d26:	61 c0       	rjmp	.+194    	; 0x2dea <__vector_13+0xda2>
				{
					LCD_Clear();
    2d28:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(1) Closed");	
    2d2c:	89 e2       	ldi	r24, 0x29	; 41
    2d2e:	94 e0       	ldi	r25, 0x04	; 4
    2d30:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2d34:	5a c0       	rjmp	.+180    	; 0x2dea <__vector_13+0xda2>
				}
			}
			else if(UART_GetValue == '2')
    2d36:	82 33       	cpi	r24, 0x32	; 50
    2d38:	69 f4       	brne	.+26     	; 0x2d54 <__vector_13+0xd0c>
			{
				LED1_OFF();
    2d3a:	0e 94 cd 0c 	call	0x199a	; 0x199a <LED1_OFF>
				if(!eme_check)
    2d3e:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2d42:	81 11       	cpse	r24, r1
    2d44:	52 c0       	rjmp	.+164    	; 0x2dea <__vector_13+0xda2>
				{
					LCD_Clear();
    2d46:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(2) Closed");
    2d4a:	88 e3       	ldi	r24, 0x38	; 56
    2d4c:	94 e0       	ldi	r25, 0x04	; 4
    2d4e:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2d52:	4b c0       	rjmp	.+150    	; 0x2dea <__vector_13+0xda2>
				}
			}
			else if(UART_GetValue == '3')
    2d54:	83 33       	cpi	r24, 0x33	; 51
    2d56:	69 f4       	brne	.+26     	; 0x2d72 <__vector_13+0xd2a>
			{
				LED2_OFF();
    2d58:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
				if(!eme_check)
    2d5c:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2d60:	81 11       	cpse	r24, r1
    2d62:	43 c0       	rjmp	.+134    	; 0x2dea <__vector_13+0xda2>
				{
					LCD_Clear();
    2d64:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(3) Closed");
    2d68:	87 e4       	ldi	r24, 0x47	; 71
    2d6a:	94 e0       	ldi	r25, 0x04	; 4
    2d6c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2d70:	3c c0       	rjmp	.+120    	; 0x2dea <__vector_13+0xda2>
				}
			}
			else if(UART_GetValue == '4')
    2d72:	84 33       	cpi	r24, 0x34	; 52
    2d74:	69 f4       	brne	.+26     	; 0x2d90 <__vector_13+0xd48>
			{
				LED3_OFF();
    2d76:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LED3_OFF>
				if(!eme_check)
    2d7a:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2d7e:	81 11       	cpse	r24, r1
    2d80:	34 c0       	rjmp	.+104    	; 0x2dea <__vector_13+0xda2>
				{
					LCD_Clear();
    2d82:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(4) Closed");
    2d86:	86 e5       	ldi	r24, 0x56	; 86
    2d88:	94 e0       	ldi	r25, 0x04	; 4
    2d8a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2d8e:	2d c0       	rjmp	.+90     	; 0x2dea <__vector_13+0xda2>
				}
			}
			else if(UART_GetValue == '5')
    2d90:	85 33       	cpi	r24, 0x35	; 53
    2d92:	69 f4       	brne	.+26     	; 0x2dae <__vector_13+0xd66>
			{
				LED4_OFF();
    2d94:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LED4_OFF>
				if(!eme_check)
    2d98:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2d9c:	81 11       	cpse	r24, r1
    2d9e:	25 c0       	rjmp	.+74     	; 0x2dea <__vector_13+0xda2>
				{
					LCD_Clear();
    2da0:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(5) Closed");
    2da4:	85 e6       	ldi	r24, 0x65	; 101
    2da6:	94 e0       	ldi	r25, 0x04	; 4
    2da8:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    2dac:	1e c0       	rjmp	.+60     	; 0x2dea <__vector_13+0xda2>
				}
			}
			else if(UART_GetValue == '6')
    2dae:	86 33       	cpi	r24, 0x36	; 54
    2db0:	e1 f4       	brne	.+56     	; 0x2dea <__vector_13+0xda2>
			{
				LED0_OFF();
    2db2:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
				LED1_OFF();
    2db6:	0e 94 cd 0c 	call	0x199a	; 0x199a <LED1_OFF>
				LED2_OFF();
    2dba:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
				LED3_OFF();
    2dbe:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LED3_OFF>
				LED4_OFF();
    2dc2:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LED4_OFF>
				LCD_Clear();
    2dc6:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				if(!eme_check)
    2dca:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2dce:	81 11       	cpse	r24, r1
    2dd0:	0c c0       	rjmp	.+24     	; 0x2dea <__vector_13+0xda2>
				{
					LCD_Write_String("All Lamps Are");
    2dd2:	88 ee       	ldi	r24, 0xE8	; 232
    2dd4:	93 e0       	ldi	r25, 0x03	; 3
    2dd6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
					LCD_Goto(1,0);
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
					LCD_Write_String("Closed");
    2de2:	81 e3       	ldi	r24, 0x31	; 49
    2de4:	94 e0       	ldi	r25, 0x04	; 4
    2de6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				}
			}
			Timer2_SetDelay(2000);
    2dea:	60 ed       	ldi	r22, 0xD0	; 208
    2dec:	77 e0       	ldi	r23, 0x07	; 7
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    2df6:	33 c5       	rjmp	.+2662   	; 0x385e <__vector_13+0x1816>
		}
		
		else if(UART_GetValue == '5')
    2df8:	85 33       	cpi	r24, 0x35	; 53
    2dfa:	09 f0       	breq	.+2      	; 0x2dfe <__vector_13+0xdb6>
    2dfc:	cf c0       	rjmp	.+414    	; 0x2f9c <__vector_13+0xf54>
		{
			// Dimmer Circuit
			UART_TX_Str("\r\n");
    2dfe:	89 eb       	ldi	r24, 0xB9	; 185
    2e00:	92 e0       	ldi	r25, 0x02	; 2
    2e02:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    2e06:	89 eb       	ldi	r24, 0xB9	; 185
    2e08:	92 e0       	ldi	r25, 0x02	; 2
    2e0a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Please enter the percentage of the lamp\r\n");
    2e0e:	84 e7       	ldi	r24, 0x74	; 116
    2e10:	94 e0       	ldi	r25, 0x04	; 4
    2e12:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    2e16:	89 eb       	ldi	r24, 0xB9	; 185
    2e18:	92 e0       	ldi	r25, 0x02	; 2
    2e1a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			Dimmer_Value = 0;
    2e1e:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <Dimmer_Value>
    2e22:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <Dimmer_Value+0x1>
    2e26:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <Dimmer_Value+0x2>
    2e2a:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <Dimmer_Value+0x3>
			
			for(Uint8 i = 0; i < 3; i++)
    2e2e:	00 e0       	ldi	r16, 0x00	; 0
    2e30:	38 c0       	rjmp	.+112    	; 0x2ea2 <__vector_13+0xe5a>
			{
				while(!Get_Bit(UCSRA,7));
    2e32:	5f 9b       	sbis	0x0b, 7	; 11
    2e34:	fe cf       	rjmp	.-4      	; 0x2e32 <__vector_13+0xdea>
				Dimmer_Array[i] = UART_RX_Char();
    2e36:	e0 2e       	mov	r14, r16
    2e38:	f1 2c       	mov	r15, r1
    2e3a:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    2e3e:	18 2f       	mov	r17, r24
    2e40:	f7 01       	movw	r30, r14
    2e42:	ea 57       	subi	r30, 0x7A	; 122
    2e44:	f8 4f       	sbci	r31, 0xF8	; 248
    2e46:	80 83       	st	Z, r24
				
				if(Dimmer_Array[i] >= 48 && Dimmer_Array[i] <= 57)
    2e48:	80 ed       	ldi	r24, 0xD0	; 208
    2e4a:	81 0f       	add	r24, r17
    2e4c:	8a 30       	cpi	r24, 0x0A	; 10
    2e4e:	38 f5       	brcc	.+78     	; 0x2e9e <__vector_13+0xe56>
				{
					Dimmer_Value = Dimmer_Value*10 + (Dimmer_Array[i]-48);
    2e50:	20 e0       	ldi	r18, 0x00	; 0
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	40 e2       	ldi	r20, 0x20	; 32
    2e56:	51 e4       	ldi	r21, 0x41	; 65
    2e58:	60 91 82 07 	lds	r22, 0x0782	; 0x800782 <Dimmer_Value>
    2e5c:	70 91 83 07 	lds	r23, 0x0783	; 0x800783 <Dimmer_Value+0x1>
    2e60:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <Dimmer_Value+0x2>
    2e64:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <Dimmer_Value+0x3>
    2e68:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__mulsf3>
    2e6c:	6b 01       	movw	r12, r22
    2e6e:	7c 01       	movw	r14, r24
    2e70:	61 2f       	mov	r22, r17
    2e72:	70 e0       	ldi	r23, 0x00	; 0
    2e74:	60 53       	subi	r22, 0x30	; 48
    2e76:	71 09       	sbc	r23, r1
    2e78:	07 2e       	mov	r0, r23
    2e7a:	00 0c       	add	r0, r0
    2e7c:	88 0b       	sbc	r24, r24
    2e7e:	99 0b       	sbc	r25, r25
    2e80:	0e 94 30 20 	call	0x4060	; 0x4060 <__floatsisf>
    2e84:	a7 01       	movw	r20, r14
    2e86:	96 01       	movw	r18, r12
    2e88:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    2e8c:	60 93 82 07 	sts	0x0782, r22	; 0x800782 <Dimmer_Value>
    2e90:	70 93 83 07 	sts	0x0783, r23	; 0x800783 <Dimmer_Value+0x1>
    2e94:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <Dimmer_Value+0x2>
    2e98:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <Dimmer_Value+0x3>
    2e9c:	01 c0       	rjmp	.+2      	; 0x2ea0 <__vector_13+0xe58>
				}
				
				else
				{
					i = 5;
    2e9e:	05 e0       	ldi	r16, 0x05	; 5
			UART_TX_Str("Please enter the percentage of the lamp\r\n");
			UART_TX_Str("\r\n");
			
			Dimmer_Value = 0;
			
			for(Uint8 i = 0; i < 3; i++)
    2ea0:	0f 5f       	subi	r16, 0xFF	; 255
    2ea2:	03 30       	cpi	r16, 0x03	; 3
    2ea4:	30 f2       	brcs	.-116    	; 0x2e32 <__vector_13+0xdea>
					i = 5;
				}
				
			}
			
			if(!eme_check)
    2ea6:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    2eaa:	81 11       	cpse	r24, r1
    2eac:	23 c0       	rjmp	.+70     	; 0x2ef4 <__vector_13+0xeac>
			{
				LCD_Clear();
    2eae:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Lamp ON!");
    2eb2:	8e e9       	ldi	r24, 0x9E	; 158
    2eb4:	94 e0       	ldi	r25, 0x04	; 4
    2eb6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Goto(1,0);
    2eba:	60 e0       	ldi	r22, 0x00	; 0
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
				LCD_Write_String("Percentage:");
    2ec2:	87 ea       	ldi	r24, 0xA7	; 167
    2ec4:	94 e0       	ldi	r25, 0x04	; 4
    2ec6:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Write_Integer(Dimmer_Value);
    2eca:	60 91 82 07 	lds	r22, 0x0782	; 0x800782 <Dimmer_Value>
    2ece:	70 91 83 07 	lds	r23, 0x0783	; 0x800783 <Dimmer_Value+0x1>
    2ed2:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <Dimmer_Value+0x2>
    2ed6:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <Dimmer_Value+0x3>
    2eda:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <__fixunssfsi>
    2ede:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_Write_Integer>
				LCD_Write_Char('%');
    2ee2:	85 e2       	ldi	r24, 0x25	; 37
    2ee4:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_Write_Char>
				Timer2_SetDelay(2000);
    2ee8:	60 ed       	ldi	r22, 0xD0	; 208
    2eea:	77 e0       	ldi	r23, 0x07	; 7
    2eec:	80 e0       	ldi	r24, 0x00	; 0
    2eee:	90 e0       	ldi	r25, 0x00	; 0
    2ef0:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
			}
			
			if(Dimmer_Value >= 58 && Dimmer_Value <= 60)
    2ef4:	c0 90 82 07 	lds	r12, 0x0782	; 0x800782 <Dimmer_Value>
    2ef8:	d0 90 83 07 	lds	r13, 0x0783	; 0x800783 <Dimmer_Value+0x1>
    2efc:	e0 90 84 07 	lds	r14, 0x0784	; 0x800784 <Dimmer_Value+0x2>
    2f00:	f0 90 85 07 	lds	r15, 0x0785	; 0x800785 <Dimmer_Value+0x3>
    2f04:	20 e0       	ldi	r18, 0x00	; 0
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	48 e6       	ldi	r20, 0x68	; 104
    2f0a:	52 e4       	ldi	r21, 0x42	; 66
    2f0c:	c7 01       	movw	r24, r14
    2f0e:	b6 01       	movw	r22, r12
    2f10:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__gesf2>
    2f14:	88 23       	and	r24, r24
    2f16:	bc f0       	brlt	.+46     	; 0x2f46 <__vector_13+0xefe>
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	40 e7       	ldi	r20, 0x70	; 112
    2f1e:	52 e4       	ldi	r21, 0x42	; 66
    2f20:	c7 01       	movw	r24, r14
    2f22:	b6 01       	movw	r22, r12
    2f24:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    2f28:	18 16       	cp	r1, r24
    2f2a:	6c f0       	brlt	.+26     	; 0x2f46 <__vector_13+0xefe>
			{
				Dimmer_Value = 55;
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	ac e5       	ldi	r26, 0x5C	; 92
    2f32:	b2 e4       	ldi	r27, 0x42	; 66
    2f34:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <Dimmer_Value>
    2f38:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <Dimmer_Value+0x1>
    2f3c:	a0 93 84 07 	sts	0x0784, r26	; 0x800784 <Dimmer_Value+0x2>
    2f40:	b0 93 85 07 	sts	0x0785, r27	; 0x800785 <Dimmer_Value+0x3>
    2f44:	20 c0       	rjmp	.+64     	; 0x2f86 <__vector_13+0xf3e>
			}
			else if(Dimmer_Value > 60 && Dimmer_Value <= 62)
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e7       	ldi	r20, 0x70	; 112
    2f4c:	52 e4       	ldi	r21, 0x42	; 66
    2f4e:	c7 01       	movw	r24, r14
    2f50:	b6 01       	movw	r22, r12
    2f52:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__gesf2>
    2f56:	18 16       	cp	r1, r24
    2f58:	b4 f4       	brge	.+44     	; 0x2f86 <__vector_13+0xf3e>
    2f5a:	20 e0       	ldi	r18, 0x00	; 0
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	48 e7       	ldi	r20, 0x78	; 120
    2f60:	52 e4       	ldi	r21, 0x42	; 66
    2f62:	c7 01       	movw	r24, r14
    2f64:	b6 01       	movw	r22, r12
    2f66:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    2f6a:	18 16       	cp	r1, r24
    2f6c:	64 f0       	brlt	.+24     	; 0x2f86 <__vector_13+0xf3e>
			{
				Dimmer_Value = 65;
    2f6e:	80 e0       	ldi	r24, 0x00	; 0
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	a2 e8       	ldi	r26, 0x82	; 130
    2f74:	b2 e4       	ldi	r27, 0x42	; 66
    2f76:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <Dimmer_Value>
    2f7a:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <Dimmer_Value+0x1>
    2f7e:	a0 93 84 07 	sts	0x0784, r26	; 0x800784 <Dimmer_Value+0x2>
    2f82:	b0 93 85 07 	sts	0x0785, r27	; 0x800785 <Dimmer_Value+0x3>
			}
			
			PWM0_Gen(Dimmer_Value);
    2f86:	60 91 82 07 	lds	r22, 0x0782	; 0x800782 <Dimmer_Value>
    2f8a:	70 91 83 07 	lds	r23, 0x0783	; 0x800783 <Dimmer_Value+0x1>
    2f8e:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <Dimmer_Value+0x2>
    2f92:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <Dimmer_Value+0x3>
    2f96:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <PWM0_Gen>
    2f9a:	61 c4       	rjmp	.+2242   	; 0x385e <__vector_13+0x1816>
		}
		
		else if(UART_GetValue == '6')
    2f9c:	86 33       	cpi	r24, 0x36	; 54
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <__vector_13+0xf5a>
    2fa0:	50 c0       	rjmp	.+160    	; 0x3042 <__vector_13+0xffa>
		{
			// Display temperature
			Uint8 Temp_array[2] = { 0 };			
    2fa2:	1e 8a       	std	Y+22, r1	; 0x16
    2fa4:	1d 8a       	std	Y+21, r1	; 0x15
			Uint8 Temp_Divide = Temp;
    2fa6:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <__data_end>
			
			for(Uint8 i = 0; i < 2; i++)
    2faa:	20 e0       	ldi	r18, 0x00	; 0
    2fac:	17 c0       	rjmp	.+46     	; 0x2fdc <__vector_13+0xf94>
			{
				Temp_array[i] = Temp_Divide % 10;
    2fae:	e5 e1       	ldi	r30, 0x15	; 21
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	ec 0f       	add	r30, r28
    2fb4:	fd 1f       	adc	r31, r29
    2fb6:	e2 0f       	add	r30, r18
    2fb8:	f1 1d       	adc	r31, r1
    2fba:	8d ec       	ldi	r24, 0xCD	; 205
    2fbc:	98 9f       	mul	r25, r24
    2fbe:	81 2d       	mov	r24, r1
    2fc0:	11 24       	eor	r1, r1
    2fc2:	86 95       	lsr	r24
    2fc4:	86 95       	lsr	r24
    2fc6:	86 95       	lsr	r24
    2fc8:	48 2f       	mov	r20, r24
    2fca:	44 0f       	add	r20, r20
    2fcc:	34 2f       	mov	r19, r20
    2fce:	33 0f       	add	r19, r19
    2fd0:	33 0f       	add	r19, r19
    2fd2:	34 0f       	add	r19, r20
    2fd4:	93 1b       	sub	r25, r19
    2fd6:	90 83       	st	Z, r25
				Temp_Divide /= 10;
    2fd8:	98 2f       	mov	r25, r24
		{
			// Display temperature
			Uint8 Temp_array[2] = { 0 };			
			Uint8 Temp_Divide = Temp;
			
			for(Uint8 i = 0; i < 2; i++)
    2fda:	2f 5f       	subi	r18, 0xFF	; 255
    2fdc:	22 30       	cpi	r18, 0x02	; 2
    2fde:	38 f3       	brcs	.-50     	; 0x2fae <__vector_13+0xf66>
			{
				Temp_array[i] = Temp_Divide % 10;
				Temp_Divide /= 10;
			}
			
			UART_TX_Str("\r\n");
    2fe0:	89 eb       	ldi	r24, 0xB9	; 185
    2fe2:	92 e0       	ldi	r25, 0x02	; 2
    2fe4:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    2fe8:	89 eb       	ldi	r24, 0xB9	; 185
    2fea:	92 e0       	ldi	r25, 0x02	; 2
    2fec:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Temperature:\r\n");
    2ff0:	83 eb       	ldi	r24, 0xB3	; 179
    2ff2:	94 e0       	ldi	r25, 0x04	; 4
    2ff4:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Char(Temp_array[1]+48);
    2ff8:	8e 89       	ldd	r24, Y+22	; 0x16
    2ffa:	80 5d       	subi	r24, 0xD0	; 208
    2ffc:	0e 94 09 10 	call	0x2012	; 0x2012 <UART_TX_Char>
			UART_TX_Char(Temp_array[0]+48);
    3000:	8d 89       	ldd	r24, Y+21	; 0x15
    3002:	80 5d       	subi	r24, 0xD0	; 208
    3004:	0e 94 09 10 	call	0x2012	; 0x2012 <UART_TX_Char>
			UART_TX_Str("\r\n");
    3008:	89 eb       	ldi	r24, 0xB9	; 185
    300a:	92 e0       	ldi	r25, 0x02	; 2
    300c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			if(!eme_check)
    3010:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3014:	81 11       	cpse	r24, r1
    3016:	23 c4       	rjmp	.+2118   	; 0x385e <__vector_13+0x1816>
			{
				LCD_Clear();
    3018:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Temperature:");
    301c:	83 e2       	ldi	r24, 0x23	; 35
    301e:	91 e0       	ldi	r25, 0x01	; 1
    3020:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Write_Integer(Temp);
    3024:	60 91 66 07 	lds	r22, 0x0766	; 0x800766 <__data_end>
    3028:	70 91 67 07 	lds	r23, 0x0767	; 0x800767 <__data_end+0x1>
    302c:	80 e0       	ldi	r24, 0x00	; 0
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_Write_Integer>
				Timer2_SetDelay(2000);
    3034:	60 ed       	ldi	r22, 0xD0	; 208
    3036:	77 e0       	ldi	r23, 0x07	; 7
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	90 e0       	ldi	r25, 0x00	; 0
    303c:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    3040:	0e c4       	rjmp	.+2076   	; 0x385e <__vector_13+0x1816>
			}
		}
		
		else if(UART_GetValue == '7')
    3042:	87 33       	cpi	r24, 0x37	; 55
    3044:	09 f0       	breq	.+2      	; 0x3048 <__vector_13+0x1000>
    3046:	10 c1       	rjmp	.+544    	; 0x3268 <__vector_13+0x1220>
		{
			// Add new user
			
			/*-------------->Determine The Type of User<---------------*/
			UART_TX_Str("\r\n");
    3048:	89 eb       	ldi	r24, 0xB9	; 185
    304a:	92 e0       	ldi	r25, 0x02	; 2
    304c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3050:	89 eb       	ldi	r24, 0xB9	; 185
    3052:	92 e0       	ldi	r25, 0x02	; 2
    3054:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("1.Keypad user\r\n");
    3058:	82 ec       	ldi	r24, 0xC2	; 194
    305a:	94 e0       	ldi	r25, 0x04	; 4
    305c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("2.PC user\r\n");
    3060:	82 ed       	ldi	r24, 0xD2	; 210
    3062:	94 e0       	ldi	r25, 0x04	; 4
    3064:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("3.AD user\r\n");
    3068:	8e ed       	ldi	r24, 0xDE	; 222
    306a:	94 e0       	ldi	r25, 0x04	; 4
    306c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			while(!Get_Bit(UCSRA,7));			// Polling until the user enter a character
    3070:	5f 9b       	sbis	0x0b, 7	; 11
    3072:	fe cf       	rjmp	.-4      	; 0x3070 <__vector_13+0x1028>
			UART_GetValue = UART_RX_Char();	// Receiving the command
    3074:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    3078:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			
			if(UART_GetValue == '1')
    307c:	81 33       	cpi	r24, 0x31	; 49
    307e:	09 f0       	breq	.+2      	; 0x3082 <__vector_13+0x103a>
    3080:	4b c0       	rjmp	.+150    	; 0x3118 <__vector_13+0x10d0>
			{
				/*--------------->Adding Keypad User<-------------------*/
				Uint8 j = 0;
				
				/*----------------->Adding New Username<-----------------*/
				UART_TX_Str("\r\n");
    3082:	89 eb       	ldi	r24, 0xB9	; 185
    3084:	92 e0       	ldi	r25, 0x02	; 2
    3086:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    308a:	89 eb       	ldi	r24, 0xB9	; 185
    308c:	92 e0       	ldi	r25, 0x02	; 2
    308e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter 4 numbers as username\r\n");
    3092:	8a ee       	ldi	r24, 0xEA	; 234
    3094:	94 e0       	ldi	r25, 0x04	; 4
    3096:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				for(Uint8 i = 0; i < 4; i++)
    309a:	10 e0       	ldi	r17, 0x00	; 0
    309c:	0f c0       	rjmp	.+30     	; 0x30bc <__vector_13+0x1074>
				{
					j = i + 1;
    309e:	1f 5f       	subi	r17, 0xFF	; 255
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
    30a0:	5f 9b       	sbis	0x0b, 7	; 11
    30a2:	fe cf       	rjmp	.-4      	; 0x30a0 <__vector_13+0x1058>
					KP_User[i] = UART_RX_Char();						// Receiving the character in username array
    30a4:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
					EEPROM_WriteByte(0,j += KP_Counter,KP_User[i]);		// Adding the username in EEPROM
    30a8:	60 91 8a 07 	lds	r22, 0x078A	; 0x80078a <KP_Counter>
    30ac:	61 0f       	add	r22, r17
    30ae:	48 2f       	mov	r20, r24
    30b0:	50 e0       	ldi	r21, 0x00	; 0
    30b2:	70 e0       	ldi	r23, 0x00	; 0
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
				
				/*----------------->Adding New Username<-----------------*/
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter 4 numbers as username\r\n");
				for(Uint8 i = 0; i < 4; i++)
    30bc:	14 30       	cpi	r17, 0x04	; 4
    30be:	78 f3       	brcs	.-34     	; 0x309e <__vector_13+0x1056>
				}
				
				j = 0;
				
				/*----------------->Adding New Password<-----------------*/
				UART_TX_Str("\r\n");
    30c0:	89 eb       	ldi	r24, 0xB9	; 185
    30c2:	92 e0       	ldi	r25, 0x02	; 2
    30c4:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    30c8:	89 eb       	ldi	r24, 0xB9	; 185
    30ca:	92 e0       	ldi	r25, 0x02	; 2
    30cc:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter 4 numbers as password\r\n");
    30d0:	8f e0       	ldi	r24, 0x0F	; 15
    30d2:	95 e0       	ldi	r25, 0x05	; 5
    30d4:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				for(Uint8 i = 0; i < 4; i++)
    30d8:	10 e0       	ldi	r17, 0x00	; 0
    30da:	0f c0       	rjmp	.+30     	; 0x30fa <__vector_13+0x10b2>
				{
					j = i + 1;
    30dc:	1f 5f       	subi	r17, 0xFF	; 255
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
    30de:	5f 9b       	sbis	0x0b, 7	; 11
    30e0:	fe cf       	rjmp	.-4      	; 0x30de <__vector_13+0x1096>
					KP_Pass[i] = UART_RX_Char();						// Receiving the character in password array
    30e2:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
					EEPROM_WriteByte(1,j += KP_Counter,KP_Pass[i]);		// Adding the password in EEPROM
    30e6:	60 91 8a 07 	lds	r22, 0x078A	; 0x80078a <KP_Counter>
    30ea:	61 0f       	add	r22, r17
    30ec:	48 2f       	mov	r20, r24
    30ee:	50 e0       	ldi	r21, 0x00	; 0
    30f0:	70 e0       	ldi	r23, 0x00	; 0
    30f2:	81 e0       	ldi	r24, 0x01	; 1
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
				
				/*----------------->Adding New Password<-----------------*/
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter 4 numbers as password\r\n");
				for(Uint8 i = 0; i < 4; i++)
    30fa:	14 30       	cpi	r17, 0x04	; 4
    30fc:	78 f3       	brcs	.-34     	; 0x30dc <__vector_13+0x1094>
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
					KP_Pass[i] = UART_RX_Char();						// Receiving the character in password array
					EEPROM_WriteByte(1,j += KP_Counter,KP_Pass[i]);		// Adding the password in EEPROM
				}
				
				KP_Counter += 4;					// Counter to determine the number of keypad users
    30fe:	40 91 8a 07 	lds	r20, 0x078A	; 0x80078a <KP_Counter>
    3102:	4c 5f       	subi	r20, 0xFC	; 252
    3104:	40 93 8a 07 	sts	0x078A, r20	; 0x80078a <KP_Counter>
				EEPROM_WriteByte(4,0,KP_Counter);	// Saving the counter in EEPROM
    3108:	50 e0       	ldi	r21, 0x00	; 0
    310a:	60 e0       	ldi	r22, 0x00	; 0
    310c:	70 e0       	ldi	r23, 0x00	; 0
    310e:	84 e0       	ldi	r24, 0x04	; 4
    3110:	90 e0       	ldi	r25, 0x00	; 0
    3112:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
    3116:	9b c0       	rjmp	.+310    	; 0x324e <__vector_13+0x1206>
			}
			
			else if(UART_GetValue == '2')
    3118:	82 33       	cpi	r24, 0x32	; 50
    311a:	09 f0       	breq	.+2      	; 0x311e <__vector_13+0x10d6>
    311c:	4b c0       	rjmp	.+150    	; 0x31b4 <__vector_13+0x116c>
			{
				/*--------------->Adding PC User<-------------------*/
				Uint8 j = 0;
				
				/*----------------->Adding New Username<-----------------*/
				UART_TX_Str("\r\n");
    311e:	89 eb       	ldi	r24, 0xB9	; 185
    3120:	92 e0       	ldi	r25, 0x02	; 2
    3122:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    3126:	89 eb       	ldi	r24, 0xB9	; 185
    3128:	92 e0       	ldi	r25, 0x02	; 2
    312a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter 4 numbers as username\r\n");
    312e:	8a ee       	ldi	r24, 0xEA	; 234
    3130:	94 e0       	ldi	r25, 0x04	; 4
    3132:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				for(Uint8 i = 0; i < 4; i++)
    3136:	10 e0       	ldi	r17, 0x00	; 0
    3138:	0f c0       	rjmp	.+30     	; 0x3158 <__vector_13+0x1110>
				{
					j = i + 1;
    313a:	1f 5f       	subi	r17, 0xFF	; 255
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
    313c:	5f 9b       	sbis	0x0b, 7	; 11
    313e:	fe cf       	rjmp	.-4      	; 0x313c <__vector_13+0x10f4>
					PC_User[i] = UART_RX_Char();						// Receiving the character in username array
    3140:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
					EEPROM_WriteByte(2,j += PC_Counter,PC_User[i]);		// Adding the username in EEPROM
    3144:	60 91 89 07 	lds	r22, 0x0789	; 0x800789 <PC_Counter>
    3148:	61 0f       	add	r22, r17
    314a:	48 2f       	mov	r20, r24
    314c:	50 e0       	ldi	r21, 0x00	; 0
    314e:	70 e0       	ldi	r23, 0x00	; 0
    3150:	82 e0       	ldi	r24, 0x02	; 2
    3152:	90 e0       	ldi	r25, 0x00	; 0
    3154:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
				
				/*----------------->Adding New Username<-----------------*/
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter 4 numbers as username\r\n");
				for(Uint8 i = 0; i < 4; i++)
    3158:	14 30       	cpi	r17, 0x04	; 4
    315a:	78 f3       	brcs	.-34     	; 0x313a <__vector_13+0x10f2>
				}
				
				j = 0;
				
				/*----------------->Adding New Password<-----------------*/
				UART_TX_Str("\r\n");
    315c:	89 eb       	ldi	r24, 0xB9	; 185
    315e:	92 e0       	ldi	r25, 0x02	; 2
    3160:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    3164:	89 eb       	ldi	r24, 0xB9	; 185
    3166:	92 e0       	ldi	r25, 0x02	; 2
    3168:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter 4 numbers as password\r\n");
    316c:	8f e0       	ldi	r24, 0x0F	; 15
    316e:	95 e0       	ldi	r25, 0x05	; 5
    3170:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				for(Uint8 i = 0; i < 4; i++)
    3174:	10 e0       	ldi	r17, 0x00	; 0
    3176:	0f c0       	rjmp	.+30     	; 0x3196 <__vector_13+0x114e>
				{
					j = i + 1;
    3178:	1f 5f       	subi	r17, 0xFF	; 255
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
    317a:	5f 9b       	sbis	0x0b, 7	; 11
    317c:	fe cf       	rjmp	.-4      	; 0x317a <__vector_13+0x1132>
					PC_Pass[i] = UART_RX_Char();						// Receiving the character in password array
    317e:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
					EEPROM_WriteByte(3,j += PC_Counter,PC_Pass[i]);		// Adding the password in EEPROM
    3182:	60 91 89 07 	lds	r22, 0x0789	; 0x800789 <PC_Counter>
    3186:	61 0f       	add	r22, r17
    3188:	48 2f       	mov	r20, r24
    318a:	50 e0       	ldi	r21, 0x00	; 0
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	83 e0       	ldi	r24, 0x03	; 3
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
				
				/*----------------->Adding New Password<-----------------*/
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter 4 numbers as password\r\n");
				for(Uint8 i = 0; i < 4; i++)
    3196:	14 30       	cpi	r17, 0x04	; 4
    3198:	78 f3       	brcs	.-34     	; 0x3178 <__vector_13+0x1130>
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
					PC_Pass[i] = UART_RX_Char();						// Receiving the character in password array
					EEPROM_WriteByte(3,j += PC_Counter,PC_Pass[i]);		// Adding the password in EEPROM
				}
				
				PC_Counter += 4;					// Counter to determine the number of PC users
    319a:	40 91 89 07 	lds	r20, 0x0789	; 0x800789 <PC_Counter>
    319e:	4c 5f       	subi	r20, 0xFC	; 252
    31a0:	40 93 89 07 	sts	0x0789, r20	; 0x800789 <PC_Counter>
				EEPROM_WriteByte(4,1,PC_Counter);	// Saving the counter in EEPROM
    31a4:	50 e0       	ldi	r21, 0x00	; 0
    31a6:	61 e0       	ldi	r22, 0x01	; 1
    31a8:	70 e0       	ldi	r23, 0x00	; 0
    31aa:	84 e0       	ldi	r24, 0x04	; 4
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
    31b2:	4d c0       	rjmp	.+154    	; 0x324e <__vector_13+0x1206>
			}
			
			else if(UART_GetValue == '3')
    31b4:	83 33       	cpi	r24, 0x33	; 51
    31b6:	09 f0       	breq	.+2      	; 0x31ba <__vector_13+0x1172>
    31b8:	4a c0       	rjmp	.+148    	; 0x324e <__vector_13+0x1206>
			{
				/*--------------->Adding Admin User<-------------------*/
				Uint8 j = 0;
				
				/*----------------->Adding New Username<-----------------*/
				UART_TX_Str("\r\n");
    31ba:	89 eb       	ldi	r24, 0xB9	; 185
    31bc:	92 e0       	ldi	r25, 0x02	; 2
    31be:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    31c2:	89 eb       	ldi	r24, 0xB9	; 185
    31c4:	92 e0       	ldi	r25, 0x02	; 2
    31c6:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter 4 numbers as username\r\n");
    31ca:	8a ee       	ldi	r24, 0xEA	; 234
    31cc:	94 e0       	ldi	r25, 0x04	; 4
    31ce:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				for(Uint8 i = 0; i < 4; i++)
    31d2:	10 e0       	ldi	r17, 0x00	; 0
    31d4:	0f c0       	rjmp	.+30     	; 0x31f4 <__vector_13+0x11ac>
				{
					j = i + 1;
    31d6:	1f 5f       	subi	r17, 0xFF	; 255
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
    31d8:	5f 9b       	sbis	0x0b, 7	; 11
    31da:	fe cf       	rjmp	.-4      	; 0x31d8 <__vector_13+0x1190>
					AD_User[i] = UART_RX_Char();						// Receiving the character in username array
    31dc:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
					EEPROM_WriteByte(5,j += AD_Counter,AD_User[i]);		// Adding the username in EEPROM
    31e0:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <AD_Counter>
    31e4:	61 0f       	add	r22, r17
    31e6:	48 2f       	mov	r20, r24
    31e8:	50 e0       	ldi	r21, 0x00	; 0
    31ea:	70 e0       	ldi	r23, 0x00	; 0
    31ec:	85 e0       	ldi	r24, 0x05	; 5
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
				
				/*----------------->Adding New Username<-----------------*/
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter 4 numbers as username\r\n");
				for(Uint8 i = 0; i < 4; i++)
    31f4:	14 30       	cpi	r17, 0x04	; 4
    31f6:	78 f3       	brcs	.-34     	; 0x31d6 <__vector_13+0x118e>
				}
				
				j = 0;
				
				/*----------------->Adding New Password<-----------------*/
				UART_TX_Str("\r\n");
    31f8:	89 eb       	ldi	r24, 0xB9	; 185
    31fa:	92 e0       	ldi	r25, 0x02	; 2
    31fc:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    3200:	89 eb       	ldi	r24, 0xB9	; 185
    3202:	92 e0       	ldi	r25, 0x02	; 2
    3204:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter 4 numbers as password\r\n");
    3208:	8f e0       	ldi	r24, 0x0F	; 15
    320a:	95 e0       	ldi	r25, 0x05	; 5
    320c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				for(Uint8 i = 0; i < 4; i++)
    3210:	10 e0       	ldi	r17, 0x00	; 0
    3212:	0f c0       	rjmp	.+30     	; 0x3232 <__vector_13+0x11ea>
				{
					j = i + 1;
    3214:	1f 5f       	subi	r17, 0xFF	; 255
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
    3216:	5f 9b       	sbis	0x0b, 7	; 11
    3218:	fe cf       	rjmp	.-4      	; 0x3216 <__vector_13+0x11ce>
					AD_Pass[i] = UART_RX_Char();						// Receiving the character in password array
    321a:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
					EEPROM_WriteByte(6,j += AD_Counter,AD_Pass[i]);		// Adding the password in EEPROM
    321e:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <AD_Counter>
    3222:	61 0f       	add	r22, r17
    3224:	48 2f       	mov	r20, r24
    3226:	50 e0       	ldi	r21, 0x00	; 0
    3228:	70 e0       	ldi	r23, 0x00	; 0
    322a:	86 e0       	ldi	r24, 0x06	; 6
    322c:	90 e0       	ldi	r25, 0x00	; 0
    322e:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
				
				/*----------------->Adding New Password<-----------------*/
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter 4 numbers as password\r\n");
				for(Uint8 i = 0; i < 4; i++)
    3232:	14 30       	cpi	r17, 0x04	; 4
    3234:	78 f3       	brcs	.-34     	; 0x3214 <__vector_13+0x11cc>
					while(!Get_Bit(UCSRA,7));							// Polling until the user enter a character
					AD_Pass[i] = UART_RX_Char();						// Receiving the character in password array
					EEPROM_WriteByte(6,j += AD_Counter,AD_Pass[i]);		// Adding the password in EEPROM
				}
				
				AD_Counter += 4;					// Counter to determine the number of PC users
    3236:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <AD_Counter>
    323a:	4c 5f       	subi	r20, 0xFC	; 252
    323c:	40 93 70 00 	sts	0x0070, r20	; 0x800070 <AD_Counter>
				EEPROM_WriteByte(4,2,AD_Counter);	// Saving the counter in EEPROM
    3240:	50 e0       	ldi	r21, 0x00	; 0
    3242:	62 e0       	ldi	r22, 0x02	; 2
    3244:	70 e0       	ldi	r23, 0x00	; 0
    3246:	84 e0       	ldi	r24, 0x04	; 4
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
			}
			
			/*------------>Added Successfully<-------------------*/
			UART_TX_Str("\r\n");
    324e:	89 eb       	ldi	r24, 0xB9	; 185
    3250:	92 e0       	ldi	r25, 0x02	; 2
    3252:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3256:	89 eb       	ldi	r24, 0xB9	; 185
    3258:	92 e0       	ldi	r25, 0x02	; 2
    325a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("User added successfully\r\n");
    325e:	84 e3       	ldi	r24, 0x34	; 52
    3260:	95 e0       	ldi	r25, 0x05	; 5
    3262:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    3266:	fb c2       	rjmp	.+1526   	; 0x385e <__vector_13+0x1816>
		}

		else if(UART_GetValue == '8')
    3268:	88 33       	cpi	r24, 0x38	; 56
    326a:	09 f0       	breq	.+2      	; 0x326e <__vector_13+0x1226>
    326c:	ea c2       	rjmp	.+1492   	; 0x3842 <__vector_13+0x17fa>
		{
			// Delete an exist user
			Uint8 j = 0;
			UART_TX_Str("\r\n");
    326e:	89 eb       	ldi	r24, 0xB9	; 185
    3270:	92 e0       	ldi	r25, 0x02	; 2
    3272:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3276:	89 eb       	ldi	r24, 0xB9	; 185
    3278:	92 e0       	ldi	r25, 0x02	; 2
    327a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Do you want to delete keypad user , PC user or Admin user\r\n");
    327e:	8e e4       	ldi	r24, 0x4E	; 78
    3280:	95 e0       	ldi	r25, 0x05	; 5
    3282:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("1.Keypad User\r\n");
    3286:	8a e8       	ldi	r24, 0x8A	; 138
    3288:	95 e0       	ldi	r25, 0x05	; 5
    328a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("2.PC User\r\n");
    328e:	8a e9       	ldi	r24, 0x9A	; 154
    3290:	95 e0       	ldi	r25, 0x05	; 5
    3292:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("3.AD User\r\n");
    3296:	86 ea       	ldi	r24, 0xA6	; 166
    3298:	95 e0       	ldi	r25, 0x05	; 5
    329a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			while(!Get_Bit(UCSRA,7));
    329e:	5f 9b       	sbis	0x0b, 7	; 11
    32a0:	fe cf       	rjmp	.-4      	; 0x329e <__vector_13+0x1256>
			UART_GetValue = UART_RX_Char();
    32a2:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    32a6:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			
			if(UART_GetValue == '1')
    32aa:	81 33       	cpi	r24, 0x31	; 49
    32ac:	09 f0       	breq	.+2      	; 0x32b0 <__vector_13+0x1268>
    32ae:	e9 c0       	rjmp	.+466    	; 0x3482 <__vector_13+0x143a>
			{
				UART_TX_Str("\r\n");
    32b0:	89 eb       	ldi	r24, 0xB9	; 185
    32b2:	92 e0       	ldi	r25, 0x02	; 2
    32b4:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    32b8:	89 eb       	ldi	r24, 0xB9	; 185
    32ba:	92 e0       	ldi	r25, 0x02	; 2
    32bc:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter the KP username\r\n");
    32c0:	82 eb       	ldi	r24, 0xB2	; 178
    32c2:	95 e0       	ldi	r25, 0x05	; 5
    32c4:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				
				for(Uint8 i = 0; i < 4; i++)
    32c8:	10 e0       	ldi	r17, 0x00	; 0
    32ca:	0e c0       	rjmp	.+28     	; 0x32e8 <__vector_13+0x12a0>
				{
					while(!Get_Bit(UCSRA,7));
    32cc:	5f 9b       	sbis	0x0b, 7	; 11
    32ce:	fe cf       	rjmp	.-4      	; 0x32cc <__vector_13+0x1284>
					KP_User[i] = UART_RX_Char();
    32d0:	e1 2e       	mov	r14, r17
    32d2:	f1 2c       	mov	r15, r1
    32d4:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    32d8:	e1 e0       	ldi	r30, 0x01	; 1
    32da:	f0 e0       	ldi	r31, 0x00	; 0
    32dc:	ec 0f       	add	r30, r28
    32de:	fd 1f       	adc	r31, r29
    32e0:	ee 0d       	add	r30, r14
    32e2:	ff 1d       	adc	r31, r15
    32e4:	80 83       	st	Z, r24
			{
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter the KP username\r\n");
				
				for(Uint8 i = 0; i < 4; i++)
    32e6:	1f 5f       	subi	r17, 0xFF	; 255
    32e8:	14 30       	cpi	r17, 0x04	; 4
    32ea:	80 f3       	brcs	.-32     	; 0x32cc <__vector_13+0x1284>
    32ec:	71 2c       	mov	r7, r1
    32ee:	61 2c       	mov	r6, r1
    32f0:	b4 c0       	rjmp	.+360    	; 0x345a <__vector_13+0x1412>
					KP_User[i] = UART_RX_Char();
				}
				
				for(Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4)
				{
					if(KP_User[0] == EEPROM_ReadByte(0, Check_Counter + 1) && KP_User[1] == EEPROM_ReadByte(0,Check_Counter + 2) && KP_User[2] == EEPROM_ReadByte(0,Check_Counter + 3) && KP_User[3] == EEPROM_ReadByte(0,Check_Counter + 4))
    32f2:	e9 80       	ldd	r14, Y+1	; 0x01
    32f4:	f1 2c       	mov	r15, r1
    32f6:	07 2d       	mov	r16, r7
    32f8:	10 e0       	ldi	r17, 0x00	; 0
    32fa:	58 01       	movw	r10, r16
    32fc:	2f ef       	ldi	r18, 0xFF	; 255
    32fe:	a2 1a       	sub	r10, r18
    3300:	b2 0a       	sbc	r11, r18
    3302:	b5 01       	movw	r22, r10
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    330c:	e8 16       	cp	r14, r24
    330e:	f9 06       	cpc	r15, r25
    3310:	09 f0       	breq	.+2      	; 0x3314 <__vector_13+0x12cc>
    3312:	a1 c0       	rjmp	.+322    	; 0x3456 <__vector_13+0x140e>
    3314:	ea 80       	ldd	r14, Y+2	; 0x02
    3316:	f1 2c       	mov	r15, r1
    3318:	68 01       	movw	r12, r16
    331a:	82 e0       	ldi	r24, 0x02	; 2
    331c:	c8 0e       	add	r12, r24
    331e:	d1 1c       	adc	r13, r1
    3320:	b6 01       	movw	r22, r12
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	90 e0       	ldi	r25, 0x00	; 0
    3326:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    332a:	e8 16       	cp	r14, r24
    332c:	f9 06       	cpc	r15, r25
    332e:	09 f0       	breq	.+2      	; 0x3332 <__vector_13+0x12ea>
    3330:	92 c0       	rjmp	.+292    	; 0x3456 <__vector_13+0x140e>
    3332:	8b 80       	ldd	r8, Y+3	; 0x03
    3334:	91 2c       	mov	r9, r1
    3336:	78 01       	movw	r14, r16
    3338:	93 e0       	ldi	r25, 0x03	; 3
    333a:	e9 0e       	add	r14, r25
    333c:	f1 1c       	adc	r15, r1
    333e:	b7 01       	movw	r22, r14
    3340:	80 e0       	ldi	r24, 0x00	; 0
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    3348:	88 16       	cp	r8, r24
    334a:	99 06       	cpc	r9, r25
    334c:	09 f0       	breq	.+2      	; 0x3350 <__vector_13+0x1308>
    334e:	83 c0       	rjmp	.+262    	; 0x3456 <__vector_13+0x140e>
    3350:	8c 80       	ldd	r8, Y+4	; 0x04
    3352:	91 2c       	mov	r9, r1
    3354:	0c 5f       	subi	r16, 0xFC	; 252
    3356:	1f 4f       	sbci	r17, 0xFF	; 255
    3358:	b8 01       	movw	r22, r16
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    3362:	88 16       	cp	r8, r24
    3364:	99 06       	cpc	r9, r25
    3366:	09 f0       	breq	.+2      	; 0x336a <__vector_13+0x1322>
    3368:	76 c0       	rjmp	.+236    	; 0x3456 <__vector_13+0x140e>
					{
						EEPROM_WriteByte(0,Check_Counter + 1, 255);
    336a:	4f ef       	ldi	r20, 0xFF	; 255
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	b5 01       	movw	r22, r10
    3370:	80 e0       	ldi	r24, 0x00	; 0
    3372:	90 e0       	ldi	r25, 0x00	; 0
    3374:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(0,Check_Counter + 2, 255);
    3378:	4f ef       	ldi	r20, 0xFF	; 255
    337a:	50 e0       	ldi	r21, 0x00	; 0
    337c:	b6 01       	movw	r22, r12
    337e:	80 e0       	ldi	r24, 0x00	; 0
    3380:	90 e0       	ldi	r25, 0x00	; 0
    3382:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(0,Check_Counter + 3, 255);
    3386:	4f ef       	ldi	r20, 0xFF	; 255
    3388:	50 e0       	ldi	r21, 0x00	; 0
    338a:	b7 01       	movw	r22, r14
    338c:	80 e0       	ldi	r24, 0x00	; 0
    338e:	90 e0       	ldi	r25, 0x00	; 0
    3390:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(0,Check_Counter + 4, 255);
    3394:	4f ef       	ldi	r20, 0xFF	; 255
    3396:	50 e0       	ldi	r21, 0x00	; 0
    3398:	b8 01       	movw	r22, r16
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(1,Check_Counter + 1, 255);
    33a2:	4f ef       	ldi	r20, 0xFF	; 255
    33a4:	50 e0       	ldi	r21, 0x00	; 0
    33a6:	b5 01       	movw	r22, r10
    33a8:	81 e0       	ldi	r24, 0x01	; 1
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(1,Check_Counter + 2, 255);
    33b0:	4f ef       	ldi	r20, 0xFF	; 255
    33b2:	50 e0       	ldi	r21, 0x00	; 0
    33b4:	b6 01       	movw	r22, r12
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	90 e0       	ldi	r25, 0x00	; 0
    33ba:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(1,Check_Counter + 3, 255);
    33be:	4f ef       	ldi	r20, 0xFF	; 255
    33c0:	50 e0       	ldi	r21, 0x00	; 0
    33c2:	b7 01       	movw	r22, r14
    33c4:	81 e0       	ldi	r24, 0x01	; 1
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(1,Check_Counter + 4, 255);
    33cc:	4f ef       	ldi	r20, 0xFF	; 255
    33ce:	50 e0       	ldi	r21, 0x00	; 0
    33d0:	b8 01       	movw	r22, r16
    33d2:	81 e0       	ldi	r24, 0x01	; 1
    33d4:	90 e0       	ldi	r25, 0x00	; 0
    33d6:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						
						for(Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= KP_Counter; Check_Counter_2++)
    33da:	73 94       	inc	r7
    33dc:	1d c0       	rjmp	.+58     	; 0x3418 <__vector_13+0x13d0>
						{
							EEPROM_WriteByte(0, Check_Counter_2, EEPROM_ReadByte(0, Check_Counter_2 + 4));
    33de:	07 2d       	mov	r16, r7
    33e0:	10 e0       	ldi	r17, 0x00	; 0
    33e2:	78 01       	movw	r14, r16
    33e4:	24 e0       	ldi	r18, 0x04	; 4
    33e6:	e2 0e       	add	r14, r18
    33e8:	f1 1c       	adc	r15, r1
    33ea:	b7 01       	movw	r22, r14
    33ec:	80 e0       	ldi	r24, 0x00	; 0
    33ee:	90 e0       	ldi	r25, 0x00	; 0
    33f0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    33f4:	ac 01       	movw	r20, r24
    33f6:	b8 01       	movw	r22, r16
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	90 e0       	ldi	r25, 0x00	; 0
    33fc:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
							EEPROM_WriteByte(1, Check_Counter_2, EEPROM_ReadByte(1, Check_Counter_2 + 4));
    3400:	b7 01       	movw	r22, r14
    3402:	81 e0       	ldi	r24, 0x01	; 1
    3404:	90 e0       	ldi	r25, 0x00	; 0
    3406:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    340a:	ac 01       	movw	r20, r24
    340c:	b8 01       	movw	r22, r16
    340e:	81 e0       	ldi	r24, 0x01	; 1
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(1,Check_Counter + 1, 255);
						EEPROM_WriteByte(1,Check_Counter + 2, 255);
						EEPROM_WriteByte(1,Check_Counter + 3, 255);
						EEPROM_WriteByte(1,Check_Counter + 4, 255);
						
						for(Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= KP_Counter; Check_Counter_2++)
    3416:	73 94       	inc	r7
    3418:	40 91 8a 07 	lds	r20, 0x078A	; 0x80078a <KP_Counter>
    341c:	47 15       	cp	r20, r7
    341e:	f8 f6       	brcc	.-66     	; 0x33de <__vector_13+0x1396>
						{
							EEPROM_WriteByte(0, Check_Counter_2, EEPROM_ReadByte(0, Check_Counter_2 + 4));
							EEPROM_WriteByte(1, Check_Counter_2, EEPROM_ReadByte(1, Check_Counter_2 + 4));
						}
						
						KP_Counter -= 4;
    3420:	44 50       	subi	r20, 0x04	; 4
    3422:	40 93 8a 07 	sts	0x078A, r20	; 0x80078a <KP_Counter>
						EEPROM_WriteByte(4,0,KP_Counter);
    3426:	50 e0       	ldi	r21, 0x00	; 0
    3428:	60 e0       	ldi	r22, 0x00	; 0
    342a:	70 e0       	ldi	r23, 0x00	; 0
    342c:	84 e0       	ldi	r24, 0x04	; 4
    342e:	90 e0       	ldi	r25, 0x00	; 0
    3430:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						Check_Counter = KP_Counter + 1;
    3434:	70 90 8a 07 	lds	r7, 0x078A	; 0x80078a <KP_Counter>
    3438:	73 94       	inc	r7
						UART_TX_Str("\r\n");
    343a:	89 eb       	ldi	r24, 0xB9	; 185
    343c:	92 e0       	ldi	r25, 0x02	; 2
    343e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						UART_TX_Str("\r\n");
    3442:	89 eb       	ldi	r24, 0xB9	; 185
    3444:	92 e0       	ldi	r25, 0x02	; 2
    3446:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						UART_TX_Str("User deleted successfully\r\n");
    344a:	81 ed       	ldi	r24, 0xD1	; 209
    344c:	95 e0       	ldi	r25, 0x05	; 5
    344e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						j = 1;
    3452:	66 24       	eor	r6, r6
    3454:	63 94       	inc	r6
				{
					while(!Get_Bit(UCSRA,7));
					KP_User[i] = UART_RX_Char();
				}
				
				for(Uint8 Check_Counter = 0; Check_Counter <= KP_Counter; Check_Counter += 4)
    3456:	84 e0       	ldi	r24, 0x04	; 4
    3458:	78 0e       	add	r7, r24
    345a:	80 91 8a 07 	lds	r24, 0x078A	; 0x80078a <KP_Counter>
    345e:	87 15       	cp	r24, r7
    3460:	08 f0       	brcs	.+2      	; 0x3464 <__vector_13+0x141c>
    3462:	47 cf       	rjmp	.-370    	; 0x32f2 <__vector_13+0x12aa>
						UART_TX_Str("\r\n");
						UART_TX_Str("User deleted successfully\r\n");
						j = 1;
					}
				}
				if(!j)
    3464:	61 10       	cpse	r6, r1
    3466:	fb c1       	rjmp	.+1014   	; 0x385e <__vector_13+0x1816>
				{
					UART_TX_Str("\r\n");
    3468:	89 eb       	ldi	r24, 0xB9	; 185
    346a:	92 e0       	ldi	r25, 0x02	; 2
    346c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("\r\n");
    3470:	89 eb       	ldi	r24, 0xB9	; 185
    3472:	92 e0       	ldi	r25, 0x02	; 2
    3474:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("User is not exist\r\n");
    3478:	8d ee       	ldi	r24, 0xED	; 237
    347a:	95 e0       	ldi	r25, 0x05	; 5
    347c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    3480:	ee c1       	rjmp	.+988    	; 0x385e <__vector_13+0x1816>
				}
			}
			
			else if(UART_GetValue == '2')
    3482:	82 33       	cpi	r24, 0x32	; 50
    3484:	09 f0       	breq	.+2      	; 0x3488 <__vector_13+0x1440>
    3486:	e9 c0       	rjmp	.+466    	; 0x365a <__vector_13+0x1612>
			{
				UART_TX_Str("\r\n");
    3488:	89 eb       	ldi	r24, 0xB9	; 185
    348a:	92 e0       	ldi	r25, 0x02	; 2
    348c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    3490:	89 eb       	ldi	r24, 0xB9	; 185
    3492:	92 e0       	ldi	r25, 0x02	; 2
    3494:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter the PC username\r\n");
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	96 e0       	ldi	r25, 0x06	; 6
    349c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				
				for(Uint8 i = 0; i < 4; i++)
    34a0:	10 e0       	ldi	r17, 0x00	; 0
    34a2:	0e c0       	rjmp	.+28     	; 0x34c0 <__vector_13+0x1478>
				{
					while(!Get_Bit(UCSRA,7));
    34a4:	5f 9b       	sbis	0x0b, 7	; 11
    34a6:	fe cf       	rjmp	.-4      	; 0x34a4 <__vector_13+0x145c>
					PC_User[i] = UART_RX_Char();
    34a8:	e1 2e       	mov	r14, r17
    34aa:	f1 2c       	mov	r15, r1
    34ac:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    34b0:	e5 e0       	ldi	r30, 0x05	; 5
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	ec 0f       	add	r30, r28
    34b6:	fd 1f       	adc	r31, r29
    34b8:	ee 0d       	add	r30, r14
    34ba:	ff 1d       	adc	r31, r15
    34bc:	80 83       	st	Z, r24
			{
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter the PC username\r\n");
				
				for(Uint8 i = 0; i < 4; i++)
    34be:	1f 5f       	subi	r17, 0xFF	; 255
    34c0:	14 30       	cpi	r17, 0x04	; 4
    34c2:	80 f3       	brcs	.-32     	; 0x34a4 <__vector_13+0x145c>
    34c4:	71 2c       	mov	r7, r1
    34c6:	61 2c       	mov	r6, r1
    34c8:	b4 c0       	rjmp	.+360    	; 0x3632 <__vector_13+0x15ea>
					PC_User[i] = UART_RX_Char();
				}
				
				for(Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4)
				{
					if(PC_User[0] == EEPROM_ReadByte(2, Check_Counter + 1) && PC_User[1] == EEPROM_ReadByte(2,Check_Counter + 2) && PC_User[2] == EEPROM_ReadByte(2,Check_Counter + 3) && PC_User[3] == EEPROM_ReadByte(2,Check_Counter + 4))
    34ca:	ed 80       	ldd	r14, Y+5	; 0x05
    34cc:	f1 2c       	mov	r15, r1
    34ce:	07 2d       	mov	r16, r7
    34d0:	10 e0       	ldi	r17, 0x00	; 0
    34d2:	58 01       	movw	r10, r16
    34d4:	9f ef       	ldi	r25, 0xFF	; 255
    34d6:	a9 1a       	sub	r10, r25
    34d8:	b9 0a       	sbc	r11, r25
    34da:	b5 01       	movw	r22, r10
    34dc:	82 e0       	ldi	r24, 0x02	; 2
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    34e4:	e8 16       	cp	r14, r24
    34e6:	f9 06       	cpc	r15, r25
    34e8:	09 f0       	breq	.+2      	; 0x34ec <__vector_13+0x14a4>
    34ea:	a1 c0       	rjmp	.+322    	; 0x362e <__vector_13+0x15e6>
    34ec:	ee 80       	ldd	r14, Y+6	; 0x06
    34ee:	f1 2c       	mov	r15, r1
    34f0:	68 01       	movw	r12, r16
    34f2:	22 e0       	ldi	r18, 0x02	; 2
    34f4:	c2 0e       	add	r12, r18
    34f6:	d1 1c       	adc	r13, r1
    34f8:	b6 01       	movw	r22, r12
    34fa:	82 e0       	ldi	r24, 0x02	; 2
    34fc:	90 e0       	ldi	r25, 0x00	; 0
    34fe:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    3502:	e8 16       	cp	r14, r24
    3504:	f9 06       	cpc	r15, r25
    3506:	09 f0       	breq	.+2      	; 0x350a <__vector_13+0x14c2>
    3508:	92 c0       	rjmp	.+292    	; 0x362e <__vector_13+0x15e6>
    350a:	8f 80       	ldd	r8, Y+7	; 0x07
    350c:	91 2c       	mov	r9, r1
    350e:	78 01       	movw	r14, r16
    3510:	83 e0       	ldi	r24, 0x03	; 3
    3512:	e8 0e       	add	r14, r24
    3514:	f1 1c       	adc	r15, r1
    3516:	b7 01       	movw	r22, r14
    3518:	82 e0       	ldi	r24, 0x02	; 2
    351a:	90 e0       	ldi	r25, 0x00	; 0
    351c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    3520:	88 16       	cp	r8, r24
    3522:	99 06       	cpc	r9, r25
    3524:	09 f0       	breq	.+2      	; 0x3528 <__vector_13+0x14e0>
    3526:	83 c0       	rjmp	.+262    	; 0x362e <__vector_13+0x15e6>
    3528:	88 84       	ldd	r8, Y+8	; 0x08
    352a:	91 2c       	mov	r9, r1
    352c:	0c 5f       	subi	r16, 0xFC	; 252
    352e:	1f 4f       	sbci	r17, 0xFF	; 255
    3530:	b8 01       	movw	r22, r16
    3532:	82 e0       	ldi	r24, 0x02	; 2
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    353a:	88 16       	cp	r8, r24
    353c:	99 06       	cpc	r9, r25
    353e:	09 f0       	breq	.+2      	; 0x3542 <__vector_13+0x14fa>
    3540:	76 c0       	rjmp	.+236    	; 0x362e <__vector_13+0x15e6>
					{
						EEPROM_WriteByte(2,Check_Counter + 1, 255);
    3542:	4f ef       	ldi	r20, 0xFF	; 255
    3544:	50 e0       	ldi	r21, 0x00	; 0
    3546:	b5 01       	movw	r22, r10
    3548:	82 e0       	ldi	r24, 0x02	; 2
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(2,Check_Counter + 2, 255);
    3550:	4f ef       	ldi	r20, 0xFF	; 255
    3552:	50 e0       	ldi	r21, 0x00	; 0
    3554:	b6 01       	movw	r22, r12
    3556:	82 e0       	ldi	r24, 0x02	; 2
    3558:	90 e0       	ldi	r25, 0x00	; 0
    355a:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(2,Check_Counter + 3, 255);
    355e:	4f ef       	ldi	r20, 0xFF	; 255
    3560:	50 e0       	ldi	r21, 0x00	; 0
    3562:	b7 01       	movw	r22, r14
    3564:	82 e0       	ldi	r24, 0x02	; 2
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(2,Check_Counter + 4, 255);
    356c:	4f ef       	ldi	r20, 0xFF	; 255
    356e:	50 e0       	ldi	r21, 0x00	; 0
    3570:	b8 01       	movw	r22, r16
    3572:	82 e0       	ldi	r24, 0x02	; 2
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(3,Check_Counter + 1, 255);
    357a:	4f ef       	ldi	r20, 0xFF	; 255
    357c:	50 e0       	ldi	r21, 0x00	; 0
    357e:	b5 01       	movw	r22, r10
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	90 e0       	ldi	r25, 0x00	; 0
    3584:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(3,Check_Counter + 2, 255);
    3588:	4f ef       	ldi	r20, 0xFF	; 255
    358a:	50 e0       	ldi	r21, 0x00	; 0
    358c:	b6 01       	movw	r22, r12
    358e:	83 e0       	ldi	r24, 0x03	; 3
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(3,Check_Counter + 3, 255);
    3596:	4f ef       	ldi	r20, 0xFF	; 255
    3598:	50 e0       	ldi	r21, 0x00	; 0
    359a:	b7 01       	movw	r22, r14
    359c:	83 e0       	ldi	r24, 0x03	; 3
    359e:	90 e0       	ldi	r25, 0x00	; 0
    35a0:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(3,Check_Counter + 4, 255);
    35a4:	4f ef       	ldi	r20, 0xFF	; 255
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	b8 01       	movw	r22, r16
    35aa:	83 e0       	ldi	r24, 0x03	; 3
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						
						for(Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= PC_Counter; Check_Counter_2++)
    35b2:	73 94       	inc	r7
    35b4:	1d c0       	rjmp	.+58     	; 0x35f0 <__vector_13+0x15a8>
						{
							EEPROM_WriteByte(2, Check_Counter_2, EEPROM_ReadByte(2, Check_Counter_2 + 4));
    35b6:	07 2d       	mov	r16, r7
    35b8:	10 e0       	ldi	r17, 0x00	; 0
    35ba:	78 01       	movw	r14, r16
    35bc:	94 e0       	ldi	r25, 0x04	; 4
    35be:	e9 0e       	add	r14, r25
    35c0:	f1 1c       	adc	r15, r1
    35c2:	b7 01       	movw	r22, r14
    35c4:	82 e0       	ldi	r24, 0x02	; 2
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    35cc:	ac 01       	movw	r20, r24
    35ce:	b8 01       	movw	r22, r16
    35d0:	82 e0       	ldi	r24, 0x02	; 2
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
							EEPROM_WriteByte(3, Check_Counter_2, EEPROM_ReadByte(3, Check_Counter_2 + 4));
    35d8:	b7 01       	movw	r22, r14
    35da:	83 e0       	ldi	r24, 0x03	; 3
    35dc:	90 e0       	ldi	r25, 0x00	; 0
    35de:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    35e2:	ac 01       	movw	r20, r24
    35e4:	b8 01       	movw	r22, r16
    35e6:	83 e0       	ldi	r24, 0x03	; 3
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(3,Check_Counter + 1, 255);
						EEPROM_WriteByte(3,Check_Counter + 2, 255);
						EEPROM_WriteByte(3,Check_Counter + 3, 255);
						EEPROM_WriteByte(3,Check_Counter + 4, 255);
						
						for(Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= PC_Counter; Check_Counter_2++)
    35ee:	73 94       	inc	r7
    35f0:	40 91 89 07 	lds	r20, 0x0789	; 0x800789 <PC_Counter>
    35f4:	47 15       	cp	r20, r7
    35f6:	f8 f6       	brcc	.-66     	; 0x35b6 <__vector_13+0x156e>
						{
							EEPROM_WriteByte(2, Check_Counter_2, EEPROM_ReadByte(2, Check_Counter_2 + 4));
							EEPROM_WriteByte(3, Check_Counter_2, EEPROM_ReadByte(3, Check_Counter_2 + 4));
						}
						
						PC_Counter -= 4;
    35f8:	44 50       	subi	r20, 0x04	; 4
    35fa:	40 93 89 07 	sts	0x0789, r20	; 0x800789 <PC_Counter>
						EEPROM_WriteByte(4,1,PC_Counter);
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	61 e0       	ldi	r22, 0x01	; 1
    3602:	70 e0       	ldi	r23, 0x00	; 0
    3604:	84 e0       	ldi	r24, 0x04	; 4
    3606:	90 e0       	ldi	r25, 0x00	; 0
    3608:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						Check_Counter = PC_Counter + 1;
    360c:	70 90 89 07 	lds	r7, 0x0789	; 0x800789 <PC_Counter>
    3610:	73 94       	inc	r7
						UART_TX_Str("\r\n");
    3612:	89 eb       	ldi	r24, 0xB9	; 185
    3614:	92 e0       	ldi	r25, 0x02	; 2
    3616:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						UART_TX_Str("\r\n");
    361a:	89 eb       	ldi	r24, 0xB9	; 185
    361c:	92 e0       	ldi	r25, 0x02	; 2
    361e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						UART_TX_Str("User deleted successfully\r\n");
    3622:	81 ed       	ldi	r24, 0xD1	; 209
    3624:	95 e0       	ldi	r25, 0x05	; 5
    3626:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						j = 1;
    362a:	66 24       	eor	r6, r6
    362c:	63 94       	inc	r6
				{
					while(!Get_Bit(UCSRA,7));
					PC_User[i] = UART_RX_Char();
				}
				
				for(Uint8 Check_Counter = 0; Check_Counter <= PC_Counter; Check_Counter += 4)
    362e:	24 e0       	ldi	r18, 0x04	; 4
    3630:	72 0e       	add	r7, r18
    3632:	80 91 89 07 	lds	r24, 0x0789	; 0x800789 <PC_Counter>
    3636:	87 15       	cp	r24, r7
    3638:	08 f0       	brcs	.+2      	; 0x363c <__vector_13+0x15f4>
    363a:	47 cf       	rjmp	.-370    	; 0x34ca <__vector_13+0x1482>
						UART_TX_Str("\r\n");
						UART_TX_Str("User deleted successfully\r\n");
						j = 1;
					}
				}
				if(!j)
    363c:	61 10       	cpse	r6, r1
    363e:	0f c1       	rjmp	.+542    	; 0x385e <__vector_13+0x1816>
				{
					UART_TX_Str("\r\n");
    3640:	89 eb       	ldi	r24, 0xB9	; 185
    3642:	92 e0       	ldi	r25, 0x02	; 2
    3644:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("\r\n");
    3648:	89 eb       	ldi	r24, 0xB9	; 185
    364a:	92 e0       	ldi	r25, 0x02	; 2
    364c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("User is not exist\r\n");
    3650:	8d ee       	ldi	r24, 0xED	; 237
    3652:	95 e0       	ldi	r25, 0x05	; 5
    3654:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    3658:	02 c1       	rjmp	.+516    	; 0x385e <__vector_13+0x1816>
				}
			}
		
			else if(UART_GetValue = '3')
    365a:	83 e3       	ldi	r24, 0x33	; 51
    365c:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			{
				UART_TX_Str("\r\n");
    3660:	89 eb       	ldi	r24, 0xB9	; 185
    3662:	92 e0       	ldi	r25, 0x02	; 2
    3664:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("\r\n");
    3668:	89 eb       	ldi	r24, 0xB9	; 185
    366a:	92 e0       	ldi	r25, 0x02	; 2
    366c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				UART_TX_Str("Please enter the AD username\r\n");
    3670:	80 e2       	ldi	r24, 0x20	; 32
    3672:	96 e0       	ldi	r25, 0x06	; 6
    3674:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
				
				for(Uint8 i = 0; i < 4; i++)
    3678:	10 e0       	ldi	r17, 0x00	; 0
    367a:	0e c0       	rjmp	.+28     	; 0x3698 <__vector_13+0x1650>
				{
					while(!Get_Bit(UCSRA,7));
    367c:	5f 9b       	sbis	0x0b, 7	; 11
    367e:	fe cf       	rjmp	.-4      	; 0x367c <__vector_13+0x1634>
					AD_User[i] = UART_RX_Char();
    3680:	e1 2e       	mov	r14, r17
    3682:	f1 2c       	mov	r15, r1
    3684:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    3688:	ed e0       	ldi	r30, 0x0D	; 13
    368a:	f0 e0       	ldi	r31, 0x00	; 0
    368c:	ec 0f       	add	r30, r28
    368e:	fd 1f       	adc	r31, r29
    3690:	ee 0d       	add	r30, r14
    3692:	ff 1d       	adc	r31, r15
    3694:	80 83       	st	Z, r24
			{
				UART_TX_Str("\r\n");
				UART_TX_Str("\r\n");
				UART_TX_Str("Please enter the AD username\r\n");
				
				for(Uint8 i = 0; i < 4; i++)
    3696:	1f 5f       	subi	r17, 0xFF	; 255
    3698:	14 30       	cpi	r17, 0x04	; 4
    369a:	80 f3       	brcs	.-32     	; 0x367c <__vector_13+0x1634>
    369c:	71 2c       	mov	r7, r1
    369e:	61 2c       	mov	r6, r1
    36a0:	bc c0       	rjmp	.+376    	; 0x381a <__vector_13+0x17d2>
					AD_User[i] = UART_RX_Char();
				}
				
				for(Uint8 Check_Counter = 0; Check_Counter <= AD_Counter; Check_Counter += 4)
				{
					if(AD_User[0] == EEPROM_ReadByte(5, Check_Counter + 1) && AD_User[1] == EEPROM_ReadByte(5,Check_Counter + 2) && AD_User[2] == EEPROM_ReadByte(5,Check_Counter + 3) && AD_User[3] == EEPROM_ReadByte(5,Check_Counter + 4))
    36a2:	ed 84       	ldd	r14, Y+13	; 0x0d
    36a4:	f1 2c       	mov	r15, r1
    36a6:	07 2d       	mov	r16, r7
    36a8:	10 e0       	ldi	r17, 0x00	; 0
    36aa:	58 01       	movw	r10, r16
    36ac:	8f ef       	ldi	r24, 0xFF	; 255
    36ae:	a8 1a       	sub	r10, r24
    36b0:	b8 0a       	sbc	r11, r24
    36b2:	b5 01       	movw	r22, r10
    36b4:	85 e0       	ldi	r24, 0x05	; 5
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    36bc:	e8 16       	cp	r14, r24
    36be:	f9 06       	cpc	r15, r25
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <__vector_13+0x167c>
    36c2:	a9 c0       	rjmp	.+338    	; 0x3816 <__vector_13+0x17ce>
    36c4:	ee 84       	ldd	r14, Y+14	; 0x0e
    36c6:	f1 2c       	mov	r15, r1
    36c8:	68 01       	movw	r12, r16
    36ca:	92 e0       	ldi	r25, 0x02	; 2
    36cc:	c9 0e       	add	r12, r25
    36ce:	d1 1c       	adc	r13, r1
    36d0:	b6 01       	movw	r22, r12
    36d2:	85 e0       	ldi	r24, 0x05	; 5
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    36da:	e8 16       	cp	r14, r24
    36dc:	f9 06       	cpc	r15, r25
    36de:	09 f0       	breq	.+2      	; 0x36e2 <__vector_13+0x169a>
    36e0:	9a c0       	rjmp	.+308    	; 0x3816 <__vector_13+0x17ce>
    36e2:	8f 84       	ldd	r8, Y+15	; 0x0f
    36e4:	91 2c       	mov	r9, r1
    36e6:	78 01       	movw	r14, r16
    36e8:	23 e0       	ldi	r18, 0x03	; 3
    36ea:	e2 0e       	add	r14, r18
    36ec:	f1 1c       	adc	r15, r1
    36ee:	b7 01       	movw	r22, r14
    36f0:	85 e0       	ldi	r24, 0x05	; 5
    36f2:	90 e0       	ldi	r25, 0x00	; 0
    36f4:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    36f8:	88 16       	cp	r8, r24
    36fa:	99 06       	cpc	r9, r25
    36fc:	09 f0       	breq	.+2      	; 0x3700 <__vector_13+0x16b8>
    36fe:	8b c0       	rjmp	.+278    	; 0x3816 <__vector_13+0x17ce>
    3700:	88 88       	ldd	r8, Y+16	; 0x10
    3702:	91 2c       	mov	r9, r1
    3704:	0c 5f       	subi	r16, 0xFC	; 252
    3706:	1f 4f       	sbci	r17, 0xFF	; 255
    3708:	b8 01       	movw	r22, r16
    370a:	85 e0       	ldi	r24, 0x05	; 5
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    3712:	88 16       	cp	r8, r24
    3714:	99 06       	cpc	r9, r25
    3716:	09 f0       	breq	.+2      	; 0x371a <__vector_13+0x16d2>
    3718:	7e c0       	rjmp	.+252    	; 0x3816 <__vector_13+0x17ce>
					{
						EEPROM_WriteByte(5,Check_Counter + 1, 255);
    371a:	4f ef       	ldi	r20, 0xFF	; 255
    371c:	50 e0       	ldi	r21, 0x00	; 0
    371e:	b5 01       	movw	r22, r10
    3720:	85 e0       	ldi	r24, 0x05	; 5
    3722:	90 e0       	ldi	r25, 0x00	; 0
    3724:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(5,Check_Counter + 2, 255);
    3728:	4f ef       	ldi	r20, 0xFF	; 255
    372a:	50 e0       	ldi	r21, 0x00	; 0
    372c:	b6 01       	movw	r22, r12
    372e:	85 e0       	ldi	r24, 0x05	; 5
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(5,Check_Counter + 3, 255);
    3736:	4f ef       	ldi	r20, 0xFF	; 255
    3738:	50 e0       	ldi	r21, 0x00	; 0
    373a:	b7 01       	movw	r22, r14
    373c:	85 e0       	ldi	r24, 0x05	; 5
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(5,Check_Counter + 4, 255);
    3744:	4f ef       	ldi	r20, 0xFF	; 255
    3746:	50 e0       	ldi	r21, 0x00	; 0
    3748:	b8 01       	movw	r22, r16
    374a:	85 e0       	ldi	r24, 0x05	; 5
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(6,Check_Counter + 1, 255);
    3752:	4f ef       	ldi	r20, 0xFF	; 255
    3754:	50 e0       	ldi	r21, 0x00	; 0
    3756:	b5 01       	movw	r22, r10
    3758:	86 e0       	ldi	r24, 0x06	; 6
    375a:	90 e0       	ldi	r25, 0x00	; 0
    375c:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(6,Check_Counter + 2, 255);
    3760:	4f ef       	ldi	r20, 0xFF	; 255
    3762:	50 e0       	ldi	r21, 0x00	; 0
    3764:	b6 01       	movw	r22, r12
    3766:	86 e0       	ldi	r24, 0x06	; 6
    3768:	90 e0       	ldi	r25, 0x00	; 0
    376a:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(6,Check_Counter + 3, 255);
    376e:	4f ef       	ldi	r20, 0xFF	; 255
    3770:	50 e0       	ldi	r21, 0x00	; 0
    3772:	b7 01       	movw	r22, r14
    3774:	86 e0       	ldi	r24, 0x06	; 6
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(6,Check_Counter + 4, 255);
    377c:	4f ef       	ldi	r20, 0xFF	; 255
    377e:	50 e0       	ldi	r21, 0x00	; 0
    3780:	b8 01       	movw	r22, r16
    3782:	86 e0       	ldi	r24, 0x06	; 6
    3784:	90 e0       	ldi	r25, 0x00	; 0
    3786:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						
						for(Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= AD_Counter; Check_Counter_2++)
    378a:	11 e0       	ldi	r17, 0x01	; 1
    378c:	17 0d       	add	r17, r7
    378e:	1d c0       	rjmp	.+58     	; 0x37ca <__vector_13+0x1782>
						{
							EEPROM_WriteByte(5, Check_Counter_2, EEPROM_ReadByte(5, Check_Counter_2 + 4));
    3790:	e1 2e       	mov	r14, r17
    3792:	f1 2c       	mov	r15, r1
    3794:	67 01       	movw	r12, r14
    3796:	84 e0       	ldi	r24, 0x04	; 4
    3798:	c8 0e       	add	r12, r24
    379a:	d1 1c       	adc	r13, r1
    379c:	b6 01       	movw	r22, r12
    379e:	85 e0       	ldi	r24, 0x05	; 5
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    37a6:	ac 01       	movw	r20, r24
    37a8:	b7 01       	movw	r22, r14
    37aa:	85 e0       	ldi	r24, 0x05	; 5
    37ac:	90 e0       	ldi	r25, 0x00	; 0
    37ae:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
							EEPROM_WriteByte(6, Check_Counter_2, EEPROM_ReadByte(6, Check_Counter_2 + 4));
    37b2:	b6 01       	movw	r22, r12
    37b4:	86 e0       	ldi	r24, 0x06	; 6
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <EEPROM_ReadByte>
    37bc:	ac 01       	movw	r20, r24
    37be:	b7 01       	movw	r22, r14
    37c0:	86 e0       	ldi	r24, 0x06	; 6
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						EEPROM_WriteByte(6,Check_Counter + 1, 255);
						EEPROM_WriteByte(6,Check_Counter + 2, 255);
						EEPROM_WriteByte(6,Check_Counter + 3, 255);
						EEPROM_WriteByte(6,Check_Counter + 4, 255);
						
						for(Uint8 Check_Counter_2 = Check_Counter + 1; Check_Counter_2 <= AD_Counter; Check_Counter_2++)
    37c8:	1f 5f       	subi	r17, 0xFF	; 255
    37ca:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <AD_Counter>
    37ce:	81 17       	cp	r24, r17
    37d0:	f8 f6       	brcc	.-66     	; 0x3790 <__vector_13+0x1748>
						{
							EEPROM_WriteByte(5, Check_Counter_2, EEPROM_ReadByte(5, Check_Counter_2 + 4));
							EEPROM_WriteByte(6, Check_Counter_2, EEPROM_ReadByte(6, Check_Counter_2 + 4));
						}
						
						AD_Counter -= 4;
    37d2:	9c ef       	ldi	r25, 0xFC	; 252
    37d4:	98 0f       	add	r25, r24
    37d6:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <AD_Counter>
						if(Check_Counter == 0)
    37da:	71 10       	cpse	r7, r1
    37dc:	02 c0       	rjmp	.+4      	; 0x37e2 <__vector_13+0x179a>
						{
							AD_Counter += 4;
    37de:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <AD_Counter>
						}
						EEPROM_WriteByte(4,2,AD_Counter);
    37e2:	40 91 70 00 	lds	r20, 0x0070	; 0x800070 <AD_Counter>
    37e6:	50 e0       	ldi	r21, 0x00	; 0
    37e8:	62 e0       	ldi	r22, 0x02	; 2
    37ea:	70 e0       	ldi	r23, 0x00	; 0
    37ec:	84 e0       	ldi	r24, 0x04	; 4
    37ee:	90 e0       	ldi	r25, 0x00	; 0
    37f0:	0e 94 c7 04 	call	0x98e	; 0x98e <EEPROM_WriteByte>
						Check_Counter = AD_Counter + 1;
    37f4:	70 90 70 00 	lds	r7, 0x0070	; 0x800070 <AD_Counter>
    37f8:	73 94       	inc	r7
						UART_TX_Str("\r\n");
    37fa:	89 eb       	ldi	r24, 0xB9	; 185
    37fc:	92 e0       	ldi	r25, 0x02	; 2
    37fe:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						UART_TX_Str("\r\n");
    3802:	89 eb       	ldi	r24, 0xB9	; 185
    3804:	92 e0       	ldi	r25, 0x02	; 2
    3806:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						UART_TX_Str("User deleted successfully\r\n");
    380a:	81 ed       	ldi	r24, 0xD1	; 209
    380c:	95 e0       	ldi	r25, 0x05	; 5
    380e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
						j = 1;
    3812:	66 24       	eor	r6, r6
    3814:	63 94       	inc	r6
				{
					while(!Get_Bit(UCSRA,7));
					AD_User[i] = UART_RX_Char();
				}
				
				for(Uint8 Check_Counter = 0; Check_Counter <= AD_Counter; Check_Counter += 4)
    3816:	94 e0       	ldi	r25, 0x04	; 4
    3818:	79 0e       	add	r7, r25
    381a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <AD_Counter>
    381e:	87 15       	cp	r24, r7
    3820:	08 f0       	brcs	.+2      	; 0x3824 <__vector_13+0x17dc>
    3822:	3f cf       	rjmp	.-386    	; 0x36a2 <__vector_13+0x165a>
						UART_TX_Str("\r\n");
						UART_TX_Str("User deleted successfully\r\n");
						j = 1;
					}
				}
				if(!j)
    3824:	61 10       	cpse	r6, r1
    3826:	1b c0       	rjmp	.+54     	; 0x385e <__vector_13+0x1816>
				{
					UART_TX_Str("\r\n");
    3828:	89 eb       	ldi	r24, 0xB9	; 185
    382a:	92 e0       	ldi	r25, 0x02	; 2
    382c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("\r\n");
    3830:	89 eb       	ldi	r24, 0xB9	; 185
    3832:	92 e0       	ldi	r25, 0x02	; 2
    3834:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
					UART_TX_Str("User is not exist\r\n");
    3838:	8d ee       	ldi	r24, 0xED	; 237
    383a:	95 e0       	ldi	r25, 0x05	; 5
    383c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    3840:	0e c0       	rjmp	.+28     	; 0x385e <__vector_13+0x1816>
				}
			}
		}
		
		else if(UART_GetValue == 8)
    3842:	88 30       	cpi	r24, 0x08	; 8
    3844:	61 f0       	breq	.+24     	; 0x385e <__vector_13+0x1816>
			
		}
		
		else
		{
			UART_TX_Str("\r\n");
    3846:	89 eb       	ldi	r24, 0xB9	; 185
    3848:	92 e0       	ldi	r25, 0x02	; 2
    384a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    384e:	89 eb       	ldi	r24, 0xB9	; 185
    3850:	92 e0       	ldi	r25, 0x02	; 2
    3852:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Please enter command number\r\n");
    3856:	84 e2       	ldi	r24, 0x24	; 36
    3858:	93 e0       	ldi	r25, 0x03	; 3
    385a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		}
		
		UART_TX_Str("\r\n");
    385e:	89 eb       	ldi	r24, 0xB9	; 185
    3860:	92 e0       	ldi	r25, 0x02	; 2
    3862:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("Waiting for your command\r\n");
    3866:	8f e3       	ldi	r24, 0x3F	; 63
    3868:	96 e0       	ldi	r25, 0x06	; 6
    386a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("\r\n");
    386e:	89 eb       	ldi	r24, 0xB9	; 185
    3870:	92 e0       	ldi	r25, 0x02	; 2
    3872:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("1.Open the door\r\n");
    3876:	8a e5       	ldi	r24, 0x5A	; 90
    3878:	96 e0       	ldi	r25, 0x06	; 6
    387a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("2.Close the door\r\n");
    387e:	8c e6       	ldi	r24, 0x6C	; 108
    3880:	96 e0       	ldi	r25, 0x06	; 6
    3882:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("3.Open lamps\r\n");
    3886:	8f e7       	ldi	r24, 0x7F	; 127
    3888:	96 e0       	ldi	r25, 0x06	; 6
    388a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("4.Close lamps\r\n");
    388e:	8e e8       	ldi	r24, 0x8E	; 142
    3890:	96 e0       	ldi	r25, 0x06	; 6
    3892:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("5.Variant lamp\r\n");
    3896:	8e e9       	ldi	r24, 0x9E	; 158
    3898:	96 e0       	ldi	r25, 0x06	; 6
    389a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("6.Display the temperature\r\n");
    389e:	8f ea       	ldi	r24, 0xAF	; 175
    38a0:	96 e0       	ldi	r25, 0x06	; 6
    38a2:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("7.Add new user\r\n");
    38a6:	8b ec       	ldi	r24, 0xCB	; 203
    38a8:	96 e0       	ldi	r25, 0x06	; 6
    38aa:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("8.Delete exist user\r\n");
    38ae:	8c ed       	ldi	r24, 0xDC	; 220
    38b0:	96 e0       	ldi	r25, 0x06	; 6
    38b2:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("Reply with the number of the command\r\n");
    38b6:	82 ef       	ldi	r24, 0xF2	; 242
    38b8:	96 e0       	ldi	r25, 0x06	; 6
    38ba:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("\r\n");
    38be:	89 eb       	ldi	r24, 0xB9	; 185
    38c0:	92 e0       	ldi	r25, 0x02	; 2
    38c2:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
    38c6:	86 c2       	rjmp	.+1292   	; 0x3dd4 <__vector_13+0x1d8c>
	}
	else if(SYS_Check == 2)
    38c8:	82 30       	cpi	r24, 0x02	; 2
    38ca:	09 f0       	breq	.+2      	; 0x38ce <__vector_13+0x1886>
    38cc:	83 c2       	rjmp	.+1286   	; 0x3dd4 <__vector_13+0x1d8c>
	{
		UART_GetValue = UDR;
    38ce:	8c b1       	in	r24, 0x0c	; 12
    38d0:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
		
		if(CMD_Check)
    38d4:	80 91 8b 07 	lds	r24, 0x078B	; 0x80078b <CMD_Check>
    38d8:	88 23       	and	r24, r24
    38da:	29 f0       	breq	.+10     	; 0x38e6 <__vector_13+0x189e>
		{
			UART_GetValue = 8;
    38dc:	88 e0       	ldi	r24, 0x08	; 8
    38de:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			CMD_Check = 0;
    38e2:	10 92 8b 07 	sts	0x078B, r1	; 0x80078b <CMD_Check>
		}
		
		if(UART_GetValue == '1')
    38e6:	80 91 8e 07 	lds	r24, 0x078E	; 0x80078e <UART_GetValue>
    38ea:	81 33       	cpi	r24, 0x31	; 49
    38ec:	09 f0       	breq	.+2      	; 0x38f0 <__vector_13+0x18a8>
    38ee:	8a c0       	rjmp	.+276    	; 0x3a04 <__vector_13+0x19bc>
		{
			// Open lamps
			UART_TX_Str("\r\n");
    38f0:	89 eb       	ldi	r24, 0xB9	; 185
    38f2:	92 e0       	ldi	r25, 0x02	; 2
    38f4:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    38f8:	89 eb       	ldi	r24, 0xB9	; 185
    38fa:	92 e0       	ldi	r25, 0x02	; 2
    38fc:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Which lamp do you want to be opened(From 1 to 5)\r\n");
    3900:	8c e5       	ldi	r24, 0x5C	; 92
    3902:	93 e0       	ldi	r25, 0x03	; 3
    3904:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("6.All Lamps\r\n");
    3908:	8f e8       	ldi	r24, 0x8F	; 143
    390a:	93 e0       	ldi	r25, 0x03	; 3
    390c:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3910:	89 eb       	ldi	r24, 0xB9	; 185
    3912:	92 e0       	ldi	r25, 0x02	; 2
    3914:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			while(!Get_Bit(UCSRA,7));			// Polling until the user enter a character
    3918:	5f 9b       	sbis	0x0b, 7	; 11
    391a:	fe cf       	rjmp	.-4      	; 0x3918 <__vector_13+0x18d0>
			UART_GetValue = UART_RX_Char();	// Receiving the command
    391c:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    3920:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			
			if(UART_GetValue == '1')
    3924:	81 33       	cpi	r24, 0x31	; 49
    3926:	69 f4       	brne	.+26     	; 0x3942 <__vector_13+0x18fa>
			{
				LED0_ON();
    3928:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
				if(!eme_check)
    392c:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3930:	81 11       	cpse	r24, r1
    3932:	61 c0       	rjmp	.+194    	; 0x39f6 <__vector_13+0x19ae>
				{
					LCD_Clear();
    3934:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(1) Opened");
    3938:	8d e9       	ldi	r24, 0x9D	; 157
    393a:	93 e0       	ldi	r25, 0x03	; 3
    393c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    3940:	5a c0       	rjmp	.+180    	; 0x39f6 <__vector_13+0x19ae>
				}
			}
			else if(UART_GetValue == '2')
    3942:	82 33       	cpi	r24, 0x32	; 50
    3944:	69 f4       	brne	.+26     	; 0x3960 <__vector_13+0x1918>
			{
				LED1_ON();
    3946:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED1_ON>
				if(!eme_check)
    394a:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    394e:	81 11       	cpse	r24, r1
    3950:	52 c0       	rjmp	.+164    	; 0x39f6 <__vector_13+0x19ae>
				{
					LCD_Clear();
    3952:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(2) Opened");
    3956:	8c ea       	ldi	r24, 0xAC	; 172
    3958:	93 e0       	ldi	r25, 0x03	; 3
    395a:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    395e:	4b c0       	rjmp	.+150    	; 0x39f6 <__vector_13+0x19ae>
				}
			}
			else if(UART_GetValue == '3')
    3960:	83 33       	cpi	r24, 0x33	; 51
    3962:	69 f4       	brne	.+26     	; 0x397e <__vector_13+0x1936>
			{
				LED2_ON();
    3964:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
				if(!eme_check)
    3968:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    396c:	81 11       	cpse	r24, r1
    396e:	43 c0       	rjmp	.+134    	; 0x39f6 <__vector_13+0x19ae>
				{
					LCD_Clear();
    3970:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(3) Opened");
    3974:	8b eb       	ldi	r24, 0xBB	; 187
    3976:	93 e0       	ldi	r25, 0x03	; 3
    3978:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    397c:	3c c0       	rjmp	.+120    	; 0x39f6 <__vector_13+0x19ae>
				}
			}
			else if(UART_GetValue == '4')
    397e:	84 33       	cpi	r24, 0x34	; 52
    3980:	69 f4       	brne	.+26     	; 0x399c <__vector_13+0x1954>
			{
				LED3_ON();
    3982:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
				if(!eme_check)
    3986:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    398a:	81 11       	cpse	r24, r1
    398c:	34 c0       	rjmp	.+104    	; 0x39f6 <__vector_13+0x19ae>
				{
					LCD_Clear();
    398e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(4) Opened");
    3992:	8a ec       	ldi	r24, 0xCA	; 202
    3994:	93 e0       	ldi	r25, 0x03	; 3
    3996:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    399a:	2d c0       	rjmp	.+90     	; 0x39f6 <__vector_13+0x19ae>
				}
			}
			else if(UART_GetValue == '5')
    399c:	85 33       	cpi	r24, 0x35	; 53
    399e:	69 f4       	brne	.+26     	; 0x39ba <__vector_13+0x1972>
			{
				LED4_ON();
    39a0:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LED4_ON>
				if(!eme_check)
    39a4:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    39a8:	81 11       	cpse	r24, r1
    39aa:	25 c0       	rjmp	.+74     	; 0x39f6 <__vector_13+0x19ae>
				{
					LCD_Clear();
    39ac:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(5) Opened");
    39b0:	89 ed       	ldi	r24, 0xD9	; 217
    39b2:	93 e0       	ldi	r25, 0x03	; 3
    39b4:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    39b8:	1e c0       	rjmp	.+60     	; 0x39f6 <__vector_13+0x19ae>
				}
			}
			else if(UART_GetValue == '6')
    39ba:	86 33       	cpi	r24, 0x36	; 54
    39bc:	e1 f4       	brne	.+56     	; 0x39f6 <__vector_13+0x19ae>
			{
				LED0_ON();
    39be:	0e 94 ab 0c 	call	0x1956	; 0x1956 <LED0_ON>
				LED1_ON();
    39c2:	0e 94 c7 0c 	call	0x198e	; 0x198e <LED1_ON>
				LED2_ON();
    39c6:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <LED2_ON>
				LED3_ON();
    39ca:	0e 94 ff 0c 	call	0x19fe	; 0x19fe <LED3_ON>
				LED4_ON();
    39ce:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <LED4_ON>
				if(!eme_check)
    39d2:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    39d6:	81 11       	cpse	r24, r1
    39d8:	0e c0       	rjmp	.+28     	; 0x39f6 <__vector_13+0x19ae>
				{
					LCD_Clear();
    39da:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("All Lamps Are");
    39de:	88 ee       	ldi	r24, 0xE8	; 232
    39e0:	93 e0       	ldi	r25, 0x03	; 3
    39e2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
					LCD_Goto(1,0);
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
					LCD_Write_String("Opened");
    39ee:	85 ea       	ldi	r24, 0xA5	; 165
    39f0:	93 e0       	ldi	r25, 0x03	; 3
    39f2:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				}
			}
			Timer2_SetDelay(2000);
    39f6:	60 ed       	ldi	r22, 0xD0	; 208
    39f8:	77 e0       	ldi	r23, 0x07	; 7
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    3a02:	c0 c1       	rjmp	.+896    	; 0x3d84 <__vector_13+0x1d3c>
		}
		
		else if(UART_GetValue == '2')
    3a04:	82 33       	cpi	r24, 0x32	; 50
    3a06:	09 f0       	breq	.+2      	; 0x3a0a <__vector_13+0x19c2>
    3a08:	8a c0       	rjmp	.+276    	; 0x3b1e <__vector_13+0x1ad6>
		{
			// Close lamps
			UART_TX_Str("\r\n");
    3a0a:	89 eb       	ldi	r24, 0xB9	; 185
    3a0c:	92 e0       	ldi	r25, 0x02	; 2
    3a0e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3a12:	89 eb       	ldi	r24, 0xB9	; 185
    3a14:	92 e0       	ldi	r25, 0x02	; 2
    3a16:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Which lamp do you want to be Closed(From 1 to 5)\r\n");
    3a1a:	86 ef       	ldi	r24, 0xF6	; 246
    3a1c:	93 e0       	ldi	r25, 0x03	; 3
    3a1e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("6.All Lamps\r\n");
    3a22:	8f e8       	ldi	r24, 0x8F	; 143
    3a24:	93 e0       	ldi	r25, 0x03	; 3
    3a26:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3a2a:	89 eb       	ldi	r24, 0xB9	; 185
    3a2c:	92 e0       	ldi	r25, 0x02	; 2
    3a2e:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			while(!Get_Bit(UCSRA,7));			// Polling until the user enter a character
    3a32:	5f 9b       	sbis	0x0b, 7	; 11
    3a34:	fe cf       	rjmp	.-4      	; 0x3a32 <__vector_13+0x19ea>
			UART_GetValue = UART_RX_Char();	// Receiving the command
    3a36:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    3a3a:	80 93 8e 07 	sts	0x078E, r24	; 0x80078e <UART_GetValue>
			
			if(UART_GetValue == '1')
    3a3e:	81 33       	cpi	r24, 0x31	; 49
    3a40:	69 f4       	brne	.+26     	; 0x3a5c <__vector_13+0x1a14>
			{
				LED0_OFF();
    3a42:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
				if(!eme_check)
    3a46:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3a4a:	81 11       	cpse	r24, r1
    3a4c:	61 c0       	rjmp	.+194    	; 0x3b10 <__vector_13+0x1ac8>
				{
					LCD_Clear();
    3a4e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(1) Closed");
    3a52:	89 e2       	ldi	r24, 0x29	; 41
    3a54:	94 e0       	ldi	r25, 0x04	; 4
    3a56:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    3a5a:	5a c0       	rjmp	.+180    	; 0x3b10 <__vector_13+0x1ac8>
				}
			}
			else if(UART_GetValue == '2')
    3a5c:	82 33       	cpi	r24, 0x32	; 50
    3a5e:	69 f4       	brne	.+26     	; 0x3a7a <__vector_13+0x1a32>
			{
				LED1_OFF();
    3a60:	0e 94 cd 0c 	call	0x199a	; 0x199a <LED1_OFF>
				if(!eme_check)
    3a64:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3a68:	81 11       	cpse	r24, r1
    3a6a:	52 c0       	rjmp	.+164    	; 0x3b10 <__vector_13+0x1ac8>
				{
					LCD_Clear();
    3a6c:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(2) Closed");
    3a70:	88 e3       	ldi	r24, 0x38	; 56
    3a72:	94 e0       	ldi	r25, 0x04	; 4
    3a74:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    3a78:	4b c0       	rjmp	.+150    	; 0x3b10 <__vector_13+0x1ac8>
				}
			}
			else if(UART_GetValue == '3')
    3a7a:	83 33       	cpi	r24, 0x33	; 51
    3a7c:	69 f4       	brne	.+26     	; 0x3a98 <__vector_13+0x1a50>
			{
				LED2_OFF();
    3a7e:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
				if(!eme_check)
    3a82:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3a86:	81 11       	cpse	r24, r1
    3a88:	43 c0       	rjmp	.+134    	; 0x3b10 <__vector_13+0x1ac8>
				{
					LCD_Clear();
    3a8a:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(3) Closed");
    3a8e:	87 e4       	ldi	r24, 0x47	; 71
    3a90:	94 e0       	ldi	r25, 0x04	; 4
    3a92:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    3a96:	3c c0       	rjmp	.+120    	; 0x3b10 <__vector_13+0x1ac8>
				}
			}
			else if(UART_GetValue == '4')
    3a98:	84 33       	cpi	r24, 0x34	; 52
    3a9a:	69 f4       	brne	.+26     	; 0x3ab6 <__vector_13+0x1a6e>
			{
				LED3_OFF();
    3a9c:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LED3_OFF>
				if(!eme_check)
    3aa0:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3aa4:	81 11       	cpse	r24, r1
    3aa6:	34 c0       	rjmp	.+104    	; 0x3b10 <__vector_13+0x1ac8>
				{
					LCD_Clear();
    3aa8:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(4) Closed");
    3aac:	86 e5       	ldi	r24, 0x56	; 86
    3aae:	94 e0       	ldi	r25, 0x04	; 4
    3ab0:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    3ab4:	2d c0       	rjmp	.+90     	; 0x3b10 <__vector_13+0x1ac8>
				}
			}
			else if(UART_GetValue == '5')
    3ab6:	85 33       	cpi	r24, 0x35	; 53
    3ab8:	69 f4       	brne	.+26     	; 0x3ad4 <__vector_13+0x1a8c>
			{
				LED4_OFF();
    3aba:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LED4_OFF>
				if(!eme_check)
    3abe:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3ac2:	81 11       	cpse	r24, r1
    3ac4:	25 c0       	rjmp	.+74     	; 0x3b10 <__vector_13+0x1ac8>
				{
					LCD_Clear();
    3ac6:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
					LCD_Write_String("Lamp(5) Closed");
    3aca:	85 e6       	ldi	r24, 0x65	; 101
    3acc:	94 e0       	ldi	r25, 0x04	; 4
    3ace:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
    3ad2:	1e c0       	rjmp	.+60     	; 0x3b10 <__vector_13+0x1ac8>
				}
			}
			else if(UART_GetValue == '6')
    3ad4:	86 33       	cpi	r24, 0x36	; 54
    3ad6:	e1 f4       	brne	.+56     	; 0x3b10 <__vector_13+0x1ac8>
			{
				LED0_OFF();
    3ad8:	0e 94 b1 0c 	call	0x1962	; 0x1962 <LED0_OFF>
				LED1_OFF();
    3adc:	0e 94 cd 0c 	call	0x199a	; 0x199a <LED1_OFF>
				LED2_OFF();
    3ae0:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <LED2_OFF>
				LED3_OFF();
    3ae4:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <LED3_OFF>
				LED4_OFF();
    3ae8:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <LED4_OFF>
				LCD_Clear();
    3aec:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				if(!eme_check)
    3af0:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3af4:	81 11       	cpse	r24, r1
    3af6:	0c c0       	rjmp	.+24     	; 0x3b10 <__vector_13+0x1ac8>
				{
					LCD_Write_String("All Lamps Are");
    3af8:	88 ee       	ldi	r24, 0xE8	; 232
    3afa:	93 e0       	ldi	r25, 0x03	; 3
    3afc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
					LCD_Goto(1,0);
    3b00:	60 e0       	ldi	r22, 0x00	; 0
    3b02:	81 e0       	ldi	r24, 0x01	; 1
    3b04:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
					LCD_Write_String("Closed");
    3b08:	81 e3       	ldi	r24, 0x31	; 49
    3b0a:	94 e0       	ldi	r25, 0x04	; 4
    3b0c:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				}
			}
			Timer2_SetDelay(2000);
    3b10:	60 ed       	ldi	r22, 0xD0	; 208
    3b12:	77 e0       	ldi	r23, 0x07	; 7
    3b14:	80 e0       	ldi	r24, 0x00	; 0
    3b16:	90 e0       	ldi	r25, 0x00	; 0
    3b18:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    3b1c:	33 c1       	rjmp	.+614    	; 0x3d84 <__vector_13+0x1d3c>
		}
		
		else if(UART_GetValue == '3')
    3b1e:	83 33       	cpi	r24, 0x33	; 51
    3b20:	09 f0       	breq	.+2      	; 0x3b24 <__vector_13+0x1adc>
    3b22:	cf c0       	rjmp	.+414    	; 0x3cc2 <__vector_13+0x1c7a>
		{
			// Dimmer Circuit
			UART_TX_Str("\r\n");
    3b24:	89 eb       	ldi	r24, 0xB9	; 185
    3b26:	92 e0       	ldi	r25, 0x02	; 2
    3b28:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3b2c:	89 eb       	ldi	r24, 0xB9	; 185
    3b2e:	92 e0       	ldi	r25, 0x02	; 2
    3b30:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Please enter the percentage of the lamp\r\n");
    3b34:	84 e7       	ldi	r24, 0x74	; 116
    3b36:	94 e0       	ldi	r25, 0x04	; 4
    3b38:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3b3c:	89 eb       	ldi	r24, 0xB9	; 185
    3b3e:	92 e0       	ldi	r25, 0x02	; 2
    3b40:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			Dimmer_Value = 0;
    3b44:	10 92 82 07 	sts	0x0782, r1	; 0x800782 <Dimmer_Value>
    3b48:	10 92 83 07 	sts	0x0783, r1	; 0x800783 <Dimmer_Value+0x1>
    3b4c:	10 92 84 07 	sts	0x0784, r1	; 0x800784 <Dimmer_Value+0x2>
    3b50:	10 92 85 07 	sts	0x0785, r1	; 0x800785 <Dimmer_Value+0x3>
			
			for(Uint8 i = 0; i < 3; i++)
    3b54:	00 e0       	ldi	r16, 0x00	; 0
    3b56:	38 c0       	rjmp	.+112    	; 0x3bc8 <__vector_13+0x1b80>
			{
				while(!Get_Bit(UCSRA,7));
    3b58:	5f 9b       	sbis	0x0b, 7	; 11
    3b5a:	fe cf       	rjmp	.-4      	; 0x3b58 <__vector_13+0x1b10>
				Dimmer_Array[i] = UART_RX_Char();
    3b5c:	e0 2e       	mov	r14, r16
    3b5e:	f1 2c       	mov	r15, r1
    3b60:	0e 94 20 10 	call	0x2040	; 0x2040 <UART_RX_Char>
    3b64:	18 2f       	mov	r17, r24
    3b66:	f7 01       	movw	r30, r14
    3b68:	ea 57       	subi	r30, 0x7A	; 122
    3b6a:	f8 4f       	sbci	r31, 0xF8	; 248
    3b6c:	80 83       	st	Z, r24
				
				if(Dimmer_Array[i] >= 48 && Dimmer_Array[i] <= 57)
    3b6e:	80 ed       	ldi	r24, 0xD0	; 208
    3b70:	81 0f       	add	r24, r17
    3b72:	8a 30       	cpi	r24, 0x0A	; 10
    3b74:	38 f5       	brcc	.+78     	; 0x3bc4 <__vector_13+0x1b7c>
				{
					Dimmer_Value = Dimmer_Value*10 + (Dimmer_Array[i]-48);
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e2       	ldi	r20, 0x20	; 32
    3b7c:	51 e4       	ldi	r21, 0x41	; 65
    3b7e:	60 91 82 07 	lds	r22, 0x0782	; 0x800782 <Dimmer_Value>
    3b82:	70 91 83 07 	lds	r23, 0x0783	; 0x800783 <Dimmer_Value+0x1>
    3b86:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <Dimmer_Value+0x2>
    3b8a:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <Dimmer_Value+0x3>
    3b8e:	0e 94 e5 20 	call	0x41ca	; 0x41ca <__mulsf3>
    3b92:	6b 01       	movw	r12, r22
    3b94:	7c 01       	movw	r14, r24
    3b96:	61 2f       	mov	r22, r17
    3b98:	70 e0       	ldi	r23, 0x00	; 0
    3b9a:	60 53       	subi	r22, 0x30	; 48
    3b9c:	71 09       	sbc	r23, r1
    3b9e:	07 2e       	mov	r0, r23
    3ba0:	00 0c       	add	r0, r0
    3ba2:	88 0b       	sbc	r24, r24
    3ba4:	99 0b       	sbc	r25, r25
    3ba6:	0e 94 30 20 	call	0x4060	; 0x4060 <__floatsisf>
    3baa:	a7 01       	movw	r20, r14
    3bac:	96 01       	movw	r18, r12
    3bae:	0e 94 1c 1f 	call	0x3e38	; 0x3e38 <__addsf3>
    3bb2:	60 93 82 07 	sts	0x0782, r22	; 0x800782 <Dimmer_Value>
    3bb6:	70 93 83 07 	sts	0x0783, r23	; 0x800783 <Dimmer_Value+0x1>
    3bba:	80 93 84 07 	sts	0x0784, r24	; 0x800784 <Dimmer_Value+0x2>
    3bbe:	90 93 85 07 	sts	0x0785, r25	; 0x800785 <Dimmer_Value+0x3>
    3bc2:	01 c0       	rjmp	.+2      	; 0x3bc6 <__vector_13+0x1b7e>
				}
				
				else
				{
					i = 5;
    3bc4:	05 e0       	ldi	r16, 0x05	; 5
			UART_TX_Str("Please enter the percentage of the lamp\r\n");
			UART_TX_Str("\r\n");
			
			Dimmer_Value = 0;
			
			for(Uint8 i = 0; i < 3; i++)
    3bc6:	0f 5f       	subi	r16, 0xFF	; 255
    3bc8:	03 30       	cpi	r16, 0x03	; 3
    3bca:	30 f2       	brcs	.-116    	; 0x3b58 <__vector_13+0x1b10>
					i = 5;
				}
				
			}
			
			if(!eme_check)
    3bcc:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3bd0:	81 11       	cpse	r24, r1
    3bd2:	23 c0       	rjmp	.+70     	; 0x3c1a <__vector_13+0x1bd2>
			{
				LCD_Clear();
    3bd4:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Lamp ON!");
    3bd8:	8e e9       	ldi	r24, 0x9E	; 158
    3bda:	94 e0       	ldi	r25, 0x04	; 4
    3bdc:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Goto(1,0);
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	0e 94 82 0c 	call	0x1904	; 0x1904 <LCD_Goto>
				LCD_Write_String("Percentage:");
    3be8:	87 ea       	ldi	r24, 0xA7	; 167
    3bea:	94 e0       	ldi	r25, 0x04	; 4
    3bec:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Write_Integer(Dimmer_Value);
    3bf0:	60 91 82 07 	lds	r22, 0x0782	; 0x800782 <Dimmer_Value>
    3bf4:	70 91 83 07 	lds	r23, 0x0783	; 0x800783 <Dimmer_Value+0x1>
    3bf8:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <Dimmer_Value+0x2>
    3bfc:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <Dimmer_Value+0x3>
    3c00:	0e 94 ff 1f 	call	0x3ffe	; 0x3ffe <__fixunssfsi>
    3c04:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_Write_Integer>
				LCD_Write_Char('%');
    3c08:	85 e2       	ldi	r24, 0x25	; 37
    3c0a:	0e 94 b7 0b 	call	0x176e	; 0x176e <LCD_Write_Char>
				Timer2_SetDelay(2000);
    3c0e:	60 ed       	ldi	r22, 0xD0	; 208
    3c10:	77 e0       	ldi	r23, 0x07	; 7
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
			}
			
			if(Dimmer_Value >= 58 && Dimmer_Value <= 60)
    3c1a:	c0 90 82 07 	lds	r12, 0x0782	; 0x800782 <Dimmer_Value>
    3c1e:	d0 90 83 07 	lds	r13, 0x0783	; 0x800783 <Dimmer_Value+0x1>
    3c22:	e0 90 84 07 	lds	r14, 0x0784	; 0x800784 <Dimmer_Value+0x2>
    3c26:	f0 90 85 07 	lds	r15, 0x0785	; 0x800785 <Dimmer_Value+0x3>
    3c2a:	20 e0       	ldi	r18, 0x00	; 0
    3c2c:	30 e0       	ldi	r19, 0x00	; 0
    3c2e:	48 e6       	ldi	r20, 0x68	; 104
    3c30:	52 e4       	ldi	r21, 0x42	; 66
    3c32:	c7 01       	movw	r24, r14
    3c34:	b6 01       	movw	r22, r12
    3c36:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__gesf2>
    3c3a:	88 23       	and	r24, r24
    3c3c:	bc f0       	brlt	.+46     	; 0x3c6c <__vector_13+0x1c24>
    3c3e:	20 e0       	ldi	r18, 0x00	; 0
    3c40:	30 e0       	ldi	r19, 0x00	; 0
    3c42:	40 e7       	ldi	r20, 0x70	; 112
    3c44:	52 e4       	ldi	r21, 0x42	; 66
    3c46:	c7 01       	movw	r24, r14
    3c48:	b6 01       	movw	r22, r12
    3c4a:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    3c4e:	18 16       	cp	r1, r24
    3c50:	6c f0       	brlt	.+26     	; 0x3c6c <__vector_13+0x1c24>
			{
				Dimmer_Value = 55;
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	ac e5       	ldi	r26, 0x5C	; 92
    3c58:	b2 e4       	ldi	r27, 0x42	; 66
    3c5a:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <Dimmer_Value>
    3c5e:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <Dimmer_Value+0x1>
    3c62:	a0 93 84 07 	sts	0x0784, r26	; 0x800784 <Dimmer_Value+0x2>
    3c66:	b0 93 85 07 	sts	0x0785, r27	; 0x800785 <Dimmer_Value+0x3>
    3c6a:	20 c0       	rjmp	.+64     	; 0x3cac <__vector_13+0x1c64>
			}
			else if(Dimmer_Value > 60 && Dimmer_Value <= 62)
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 e7       	ldi	r20, 0x70	; 112
    3c72:	52 e4       	ldi	r21, 0x42	; 66
    3c74:	c7 01       	movw	r24, r14
    3c76:	b6 01       	movw	r22, r12
    3c78:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <__gesf2>
    3c7c:	18 16       	cp	r1, r24
    3c7e:	b4 f4       	brge	.+44     	; 0x3cac <__vector_13+0x1c64>
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	48 e7       	ldi	r20, 0x78	; 120
    3c86:	52 e4       	ldi	r21, 0x42	; 66
    3c88:	c7 01       	movw	r24, r14
    3c8a:	b6 01       	movw	r22, r12
    3c8c:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <__cmpsf2>
    3c90:	18 16       	cp	r1, r24
    3c92:	64 f0       	brlt	.+24     	; 0x3cac <__vector_13+0x1c64>
			{
				Dimmer_Value = 65;
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	a2 e8       	ldi	r26, 0x82	; 130
    3c9a:	b2 e4       	ldi	r27, 0x42	; 66
    3c9c:	80 93 82 07 	sts	0x0782, r24	; 0x800782 <Dimmer_Value>
    3ca0:	90 93 83 07 	sts	0x0783, r25	; 0x800783 <Dimmer_Value+0x1>
    3ca4:	a0 93 84 07 	sts	0x0784, r26	; 0x800784 <Dimmer_Value+0x2>
    3ca8:	b0 93 85 07 	sts	0x0785, r27	; 0x800785 <Dimmer_Value+0x3>
			}
			
			PWM0_Gen(Dimmer_Value);
    3cac:	60 91 82 07 	lds	r22, 0x0782	; 0x800782 <Dimmer_Value>
    3cb0:	70 91 83 07 	lds	r23, 0x0783	; 0x800783 <Dimmer_Value+0x1>
    3cb4:	80 91 84 07 	lds	r24, 0x0784	; 0x800784 <Dimmer_Value+0x2>
    3cb8:	90 91 85 07 	lds	r25, 0x0785	; 0x800785 <Dimmer_Value+0x3>
    3cbc:	0e 94 d6 0d 	call	0x1bac	; 0x1bac <PWM0_Gen>
    3cc0:	61 c0       	rjmp	.+194    	; 0x3d84 <__vector_13+0x1d3c>
		}
		
		else if(UART_GetValue == '4')
    3cc2:	84 33       	cpi	r24, 0x34	; 52
    3cc4:	09 f0       	breq	.+2      	; 0x3cc8 <__vector_13+0x1c80>
    3cc6:	50 c0       	rjmp	.+160    	; 0x3d68 <__vector_13+0x1d20>
		{
			// Display temperature
			Uint8 Temp_array[2] = { 0 };
    3cc8:	1e 8a       	std	Y+22, r1	; 0x16
    3cca:	1d 8a       	std	Y+21, r1	; 0x15
			Uint8 Temp_Divide = Temp;
    3ccc:	90 91 66 07 	lds	r25, 0x0766	; 0x800766 <__data_end>
			
			for(Uint8 i = 0; i < 2; i++)
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	17 c0       	rjmp	.+46     	; 0x3d02 <__vector_13+0x1cba>
			{
				Temp_array[i] = Temp_Divide % 10;
    3cd4:	e5 e1       	ldi	r30, 0x15	; 21
    3cd6:	f0 e0       	ldi	r31, 0x00	; 0
    3cd8:	ec 0f       	add	r30, r28
    3cda:	fd 1f       	adc	r31, r29
    3cdc:	e2 0f       	add	r30, r18
    3cde:	f1 1d       	adc	r31, r1
    3ce0:	8d ec       	ldi	r24, 0xCD	; 205
    3ce2:	98 9f       	mul	r25, r24
    3ce4:	81 2d       	mov	r24, r1
    3ce6:	11 24       	eor	r1, r1
    3ce8:	86 95       	lsr	r24
    3cea:	86 95       	lsr	r24
    3cec:	86 95       	lsr	r24
    3cee:	48 2f       	mov	r20, r24
    3cf0:	44 0f       	add	r20, r20
    3cf2:	34 2f       	mov	r19, r20
    3cf4:	33 0f       	add	r19, r19
    3cf6:	33 0f       	add	r19, r19
    3cf8:	34 0f       	add	r19, r20
    3cfa:	93 1b       	sub	r25, r19
    3cfc:	90 83       	st	Z, r25
				Temp_Divide /= 10;
    3cfe:	98 2f       	mov	r25, r24
		{
			// Display temperature
			Uint8 Temp_array[2] = { 0 };
			Uint8 Temp_Divide = Temp;
			
			for(Uint8 i = 0; i < 2; i++)
    3d00:	2f 5f       	subi	r18, 0xFF	; 255
    3d02:	22 30       	cpi	r18, 0x02	; 2
    3d04:	38 f3       	brcs	.-50     	; 0x3cd4 <__vector_13+0x1c8c>
			{
				Temp_array[i] = Temp_Divide % 10;
				Temp_Divide /= 10;
			}
			
			UART_TX_Str("\r\n");
    3d06:	89 eb       	ldi	r24, 0xB9	; 185
    3d08:	92 e0       	ldi	r25, 0x02	; 2
    3d0a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3d0e:	89 eb       	ldi	r24, 0xB9	; 185
    3d10:	92 e0       	ldi	r25, 0x02	; 2
    3d12:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Temperature:\r\n");
    3d16:	83 eb       	ldi	r24, 0xB3	; 179
    3d18:	94 e0       	ldi	r25, 0x04	; 4
    3d1a:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Char(Temp_array[1]+48);
    3d1e:	8e 89       	ldd	r24, Y+22	; 0x16
    3d20:	80 5d       	subi	r24, 0xD0	; 208
    3d22:	0e 94 09 10 	call	0x2012	; 0x2012 <UART_TX_Char>
			UART_TX_Char(Temp_array[0]+48);
    3d26:	8d 89       	ldd	r24, Y+21	; 0x15
    3d28:	80 5d       	subi	r24, 0xD0	; 208
    3d2a:	0e 94 09 10 	call	0x2012	; 0x2012 <UART_TX_Char>
			UART_TX_Str("\r\n");
    3d2e:	89 eb       	ldi	r24, 0xB9	; 185
    3d30:	92 e0       	ldi	r25, 0x02	; 2
    3d32:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			
			
			if(!eme_check)
    3d36:	80 91 69 07 	lds	r24, 0x0769	; 0x800769 <eme_check>
    3d3a:	81 11       	cpse	r24, r1
    3d3c:	23 c0       	rjmp	.+70     	; 0x3d84 <__vector_13+0x1d3c>
			{
				LCD_Clear();
    3d3e:	0e 94 7e 0c 	call	0x18fc	; 0x18fc <LCD_Clear>
				LCD_Write_String("Temperature:");
    3d42:	83 e2       	ldi	r24, 0x23	; 35
    3d44:	91 e0       	ldi	r25, 0x01	; 1
    3d46:	0e 94 f8 0b 	call	0x17f0	; 0x17f0 <LCD_Write_String>
				LCD_Write_Integer(Temp);
    3d4a:	60 91 66 07 	lds	r22, 0x0766	; 0x800766 <__data_end>
    3d4e:	70 91 67 07 	lds	r23, 0x0767	; 0x800767 <__data_end+0x1>
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	90 e0       	ldi	r25, 0x00	; 0
    3d56:	0e 94 0b 0c 	call	0x1816	; 0x1816 <LCD_Write_Integer>
				Timer2_SetDelay(2000);
    3d5a:	60 ed       	ldi	r22, 0xD0	; 208
    3d5c:	77 e0       	ldi	r23, 0x07	; 7
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	90 e0       	ldi	r25, 0x00	; 0
    3d62:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <Timer2_SetDelay>
    3d66:	0e c0       	rjmp	.+28     	; 0x3d84 <__vector_13+0x1d3c>
			}
		}
		
		else if(UART_GetValue == 8)
    3d68:	88 30       	cpi	r24, 0x08	; 8
    3d6a:	61 f0       	breq	.+24     	; 0x3d84 <__vector_13+0x1d3c>
			
		}
		
		else
		{
			UART_TX_Str("\r\n");
    3d6c:	89 eb       	ldi	r24, 0xB9	; 185
    3d6e:	92 e0       	ldi	r25, 0x02	; 2
    3d70:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("\r\n");
    3d74:	89 eb       	ldi	r24, 0xB9	; 185
    3d76:	92 e0       	ldi	r25, 0x02	; 2
    3d78:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
			UART_TX_Str("Please enter command number\r\n");
    3d7c:	84 e2       	ldi	r24, 0x24	; 36
    3d7e:	93 e0       	ldi	r25, 0x03	; 3
    3d80:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		}
		
		UART_TX_Str("\r\n");
    3d84:	89 eb       	ldi	r24, 0xB9	; 185
    3d86:	92 e0       	ldi	r25, 0x02	; 2
    3d88:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("\r\n");
    3d8c:	89 eb       	ldi	r24, 0xB9	; 185
    3d8e:	92 e0       	ldi	r25, 0x02	; 2
    3d90:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("Waiting for your command\r\n");
    3d94:	8f e3       	ldi	r24, 0x3F	; 63
    3d96:	96 e0       	ldi	r25, 0x06	; 6
    3d98:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("\r\n");
    3d9c:	89 eb       	ldi	r24, 0xB9	; 185
    3d9e:	92 e0       	ldi	r25, 0x02	; 2
    3da0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("1.Open lamps\r\n");
    3da4:	89 e1       	ldi	r24, 0x19	; 25
    3da6:	97 e0       	ldi	r25, 0x07	; 7
    3da8:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("2.Close lamps\r\n");
    3dac:	88 e2       	ldi	r24, 0x28	; 40
    3dae:	97 e0       	ldi	r25, 0x07	; 7
    3db0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("3.Variant lamp\r\n");
    3db4:	88 e3       	ldi	r24, 0x38	; 56
    3db6:	97 e0       	ldi	r25, 0x07	; 7
    3db8:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("4.Display the temperature\r\n");
    3dbc:	89 e4       	ldi	r24, 0x49	; 73
    3dbe:	97 e0       	ldi	r25, 0x07	; 7
    3dc0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("Reply with the number of the command\r\n");
    3dc4:	82 ef       	ldi	r24, 0xF2	; 242
    3dc6:	96 e0       	ldi	r25, 0x06	; 6
    3dc8:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
		UART_TX_Str("\r\n");
    3dcc:	89 eb       	ldi	r24, 0xB9	; 185
    3dce:	92 e0       	ldi	r25, 0x02	; 2
    3dd0:	0e 94 0d 10 	call	0x201a	; 0x201a <UART_TX_Str>
	}	
}
    3dd4:	66 96       	adiw	r28, 0x16	; 22
    3dd6:	0f b6       	in	r0, 0x3f	; 63
    3dd8:	f8 94       	cli
    3dda:	de bf       	out	0x3e, r29	; 62
    3ddc:	0f be       	out	0x3f, r0	; 63
    3dde:	cd bf       	out	0x3d, r28	; 61
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	ff 91       	pop	r31
    3de6:	ef 91       	pop	r30
    3de8:	bf 91       	pop	r27
    3dea:	af 91       	pop	r26
    3dec:	9f 91       	pop	r25
    3dee:	8f 91       	pop	r24
    3df0:	7f 91       	pop	r23
    3df2:	6f 91       	pop	r22
    3df4:	5f 91       	pop	r21
    3df6:	4f 91       	pop	r20
    3df8:	3f 91       	pop	r19
    3dfa:	2f 91       	pop	r18
    3dfc:	1f 91       	pop	r17
    3dfe:	0f 91       	pop	r16
    3e00:	ff 90       	pop	r15
    3e02:	ef 90       	pop	r14
    3e04:	df 90       	pop	r13
    3e06:	cf 90       	pop	r12
    3e08:	bf 90       	pop	r11
    3e0a:	af 90       	pop	r10
    3e0c:	9f 90       	pop	r9
    3e0e:	8f 90       	pop	r8
    3e10:	7f 90       	pop	r7
    3e12:	6f 90       	pop	r6
    3e14:	5f 90       	pop	r5
    3e16:	4f 90       	pop	r4
    3e18:	0f 90       	pop	r0
    3e1a:	0f be       	out	0x3f, r0	; 63
    3e1c:	0f 90       	pop	r0
    3e1e:	1f 90       	pop	r1
    3e20:	18 95       	reti

00003e22 <__vector_15>:

ISR(USART_TXC_vect)
{
    3e22:	1f 92       	push	r1
    3e24:	0f 92       	push	r0
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	0f 92       	push	r0
    3e2a:	11 24       	eor	r1, r1
	// Write UART transmit handler here
	
}
    3e2c:	0f 90       	pop	r0
    3e2e:	0f be       	out	0x3f, r0	; 63
    3e30:	0f 90       	pop	r0
    3e32:	1f 90       	pop	r1
    3e34:	18 95       	reti

00003e36 <__subsf3>:
    3e36:	50 58       	subi	r21, 0x80	; 128

00003e38 <__addsf3>:
    3e38:	bb 27       	eor	r27, r27
    3e3a:	aa 27       	eor	r26, r26
    3e3c:	0e 94 33 1f 	call	0x3e66	; 0x3e66 <__addsf3x>
    3e40:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__fp_round>
    3e44:	0e 94 98 20 	call	0x4130	; 0x4130 <__fp_pscA>
    3e48:	38 f0       	brcs	.+14     	; 0x3e58 <__addsf3+0x20>
    3e4a:	0e 94 9f 20 	call	0x413e	; 0x413e <__fp_pscB>
    3e4e:	20 f0       	brcs	.+8      	; 0x3e58 <__addsf3+0x20>
    3e50:	39 f4       	brne	.+14     	; 0x3e60 <__addsf3+0x28>
    3e52:	9f 3f       	cpi	r25, 0xFF	; 255
    3e54:	19 f4       	brne	.+6      	; 0x3e5c <__addsf3+0x24>
    3e56:	26 f4       	brtc	.+8      	; 0x3e60 <__addsf3+0x28>
    3e58:	0c 94 95 20 	jmp	0x412a	; 0x412a <__fp_nan>
    3e5c:	0e f4       	brtc	.+2      	; 0x3e60 <__addsf3+0x28>
    3e5e:	e0 95       	com	r30
    3e60:	e7 fb       	bst	r30, 7
    3e62:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__fp_inf>

00003e66 <__addsf3x>:
    3e66:	e9 2f       	mov	r30, r25
    3e68:	0e 94 b7 20 	call	0x416e	; 0x416e <__fp_split3>
    3e6c:	58 f3       	brcs	.-42     	; 0x3e44 <__addsf3+0xc>
    3e6e:	ba 17       	cp	r27, r26
    3e70:	62 07       	cpc	r22, r18
    3e72:	73 07       	cpc	r23, r19
    3e74:	84 07       	cpc	r24, r20
    3e76:	95 07       	cpc	r25, r21
    3e78:	20 f0       	brcs	.+8      	; 0x3e82 <__addsf3x+0x1c>
    3e7a:	79 f4       	brne	.+30     	; 0x3e9a <__addsf3x+0x34>
    3e7c:	a6 f5       	brtc	.+104    	; 0x3ee6 <__addsf3x+0x80>
    3e7e:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <__fp_zero>
    3e82:	0e f4       	brtc	.+2      	; 0x3e86 <__addsf3x+0x20>
    3e84:	e0 95       	com	r30
    3e86:	0b 2e       	mov	r0, r27
    3e88:	ba 2f       	mov	r27, r26
    3e8a:	a0 2d       	mov	r26, r0
    3e8c:	0b 01       	movw	r0, r22
    3e8e:	b9 01       	movw	r22, r18
    3e90:	90 01       	movw	r18, r0
    3e92:	0c 01       	movw	r0, r24
    3e94:	ca 01       	movw	r24, r20
    3e96:	a0 01       	movw	r20, r0
    3e98:	11 24       	eor	r1, r1
    3e9a:	ff 27       	eor	r31, r31
    3e9c:	59 1b       	sub	r21, r25
    3e9e:	99 f0       	breq	.+38     	; 0x3ec6 <__addsf3x+0x60>
    3ea0:	59 3f       	cpi	r21, 0xF9	; 249
    3ea2:	50 f4       	brcc	.+20     	; 0x3eb8 <__addsf3x+0x52>
    3ea4:	50 3e       	cpi	r21, 0xE0	; 224
    3ea6:	68 f1       	brcs	.+90     	; 0x3f02 <__addsf3x+0x9c>
    3ea8:	1a 16       	cp	r1, r26
    3eaa:	f0 40       	sbci	r31, 0x00	; 0
    3eac:	a2 2f       	mov	r26, r18
    3eae:	23 2f       	mov	r18, r19
    3eb0:	34 2f       	mov	r19, r20
    3eb2:	44 27       	eor	r20, r20
    3eb4:	58 5f       	subi	r21, 0xF8	; 248
    3eb6:	f3 cf       	rjmp	.-26     	; 0x3e9e <__addsf3x+0x38>
    3eb8:	46 95       	lsr	r20
    3eba:	37 95       	ror	r19
    3ebc:	27 95       	ror	r18
    3ebe:	a7 95       	ror	r26
    3ec0:	f0 40       	sbci	r31, 0x00	; 0
    3ec2:	53 95       	inc	r21
    3ec4:	c9 f7       	brne	.-14     	; 0x3eb8 <__addsf3x+0x52>
    3ec6:	7e f4       	brtc	.+30     	; 0x3ee6 <__addsf3x+0x80>
    3ec8:	1f 16       	cp	r1, r31
    3eca:	ba 0b       	sbc	r27, r26
    3ecc:	62 0b       	sbc	r22, r18
    3ece:	73 0b       	sbc	r23, r19
    3ed0:	84 0b       	sbc	r24, r20
    3ed2:	ba f0       	brmi	.+46     	; 0x3f02 <__addsf3x+0x9c>
    3ed4:	91 50       	subi	r25, 0x01	; 1
    3ed6:	a1 f0       	breq	.+40     	; 0x3f00 <__addsf3x+0x9a>
    3ed8:	ff 0f       	add	r31, r31
    3eda:	bb 1f       	adc	r27, r27
    3edc:	66 1f       	adc	r22, r22
    3ede:	77 1f       	adc	r23, r23
    3ee0:	88 1f       	adc	r24, r24
    3ee2:	c2 f7       	brpl	.-16     	; 0x3ed4 <__addsf3x+0x6e>
    3ee4:	0e c0       	rjmp	.+28     	; 0x3f02 <__addsf3x+0x9c>
    3ee6:	ba 0f       	add	r27, r26
    3ee8:	62 1f       	adc	r22, r18
    3eea:	73 1f       	adc	r23, r19
    3eec:	84 1f       	adc	r24, r20
    3eee:	48 f4       	brcc	.+18     	; 0x3f02 <__addsf3x+0x9c>
    3ef0:	87 95       	ror	r24
    3ef2:	77 95       	ror	r23
    3ef4:	67 95       	ror	r22
    3ef6:	b7 95       	ror	r27
    3ef8:	f7 95       	ror	r31
    3efa:	9e 3f       	cpi	r25, 0xFE	; 254
    3efc:	08 f0       	brcs	.+2      	; 0x3f00 <__addsf3x+0x9a>
    3efe:	b0 cf       	rjmp	.-160    	; 0x3e60 <__addsf3+0x28>
    3f00:	93 95       	inc	r25
    3f02:	88 0f       	add	r24, r24
    3f04:	08 f0       	brcs	.+2      	; 0x3f08 <__addsf3x+0xa2>
    3f06:	99 27       	eor	r25, r25
    3f08:	ee 0f       	add	r30, r30
    3f0a:	97 95       	ror	r25
    3f0c:	87 95       	ror	r24
    3f0e:	08 95       	ret

00003f10 <__cmpsf2>:
    3f10:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fp_cmp>
    3f14:	08 f4       	brcc	.+2      	; 0x3f18 <__cmpsf2+0x8>
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	08 95       	ret

00003f1a <__divsf3>:
    3f1a:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <__divsf3x>
    3f1e:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__fp_round>
    3f22:	0e 94 9f 20 	call	0x413e	; 0x413e <__fp_pscB>
    3f26:	58 f0       	brcs	.+22     	; 0x3f3e <__divsf3+0x24>
    3f28:	0e 94 98 20 	call	0x4130	; 0x4130 <__fp_pscA>
    3f2c:	40 f0       	brcs	.+16     	; 0x3f3e <__divsf3+0x24>
    3f2e:	29 f4       	brne	.+10     	; 0x3f3a <__divsf3+0x20>
    3f30:	5f 3f       	cpi	r21, 0xFF	; 255
    3f32:	29 f0       	breq	.+10     	; 0x3f3e <__divsf3+0x24>
    3f34:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__fp_inf>
    3f38:	51 11       	cpse	r21, r1
    3f3a:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__fp_szero>
    3f3e:	0c 94 95 20 	jmp	0x412a	; 0x412a <__fp_nan>

00003f42 <__divsf3x>:
    3f42:	0e 94 b7 20 	call	0x416e	; 0x416e <__fp_split3>
    3f46:	68 f3       	brcs	.-38     	; 0x3f22 <__divsf3+0x8>

00003f48 <__divsf3_pse>:
    3f48:	99 23       	and	r25, r25
    3f4a:	b1 f3       	breq	.-20     	; 0x3f38 <__divsf3+0x1e>
    3f4c:	55 23       	and	r21, r21
    3f4e:	91 f3       	breq	.-28     	; 0x3f34 <__divsf3+0x1a>
    3f50:	95 1b       	sub	r25, r21
    3f52:	55 0b       	sbc	r21, r21
    3f54:	bb 27       	eor	r27, r27
    3f56:	aa 27       	eor	r26, r26
    3f58:	62 17       	cp	r22, r18
    3f5a:	73 07       	cpc	r23, r19
    3f5c:	84 07       	cpc	r24, r20
    3f5e:	38 f0       	brcs	.+14     	; 0x3f6e <__divsf3_pse+0x26>
    3f60:	9f 5f       	subi	r25, 0xFF	; 255
    3f62:	5f 4f       	sbci	r21, 0xFF	; 255
    3f64:	22 0f       	add	r18, r18
    3f66:	33 1f       	adc	r19, r19
    3f68:	44 1f       	adc	r20, r20
    3f6a:	aa 1f       	adc	r26, r26
    3f6c:	a9 f3       	breq	.-22     	; 0x3f58 <__divsf3_pse+0x10>
    3f6e:	35 d0       	rcall	.+106    	; 0x3fda <__divsf3_pse+0x92>
    3f70:	0e 2e       	mov	r0, r30
    3f72:	3a f0       	brmi	.+14     	; 0x3f82 <__divsf3_pse+0x3a>
    3f74:	e0 e8       	ldi	r30, 0x80	; 128
    3f76:	32 d0       	rcall	.+100    	; 0x3fdc <__divsf3_pse+0x94>
    3f78:	91 50       	subi	r25, 0x01	; 1
    3f7a:	50 40       	sbci	r21, 0x00	; 0
    3f7c:	e6 95       	lsr	r30
    3f7e:	00 1c       	adc	r0, r0
    3f80:	ca f7       	brpl	.-14     	; 0x3f74 <__divsf3_pse+0x2c>
    3f82:	2b d0       	rcall	.+86     	; 0x3fda <__divsf3_pse+0x92>
    3f84:	fe 2f       	mov	r31, r30
    3f86:	29 d0       	rcall	.+82     	; 0x3fda <__divsf3_pse+0x92>
    3f88:	66 0f       	add	r22, r22
    3f8a:	77 1f       	adc	r23, r23
    3f8c:	88 1f       	adc	r24, r24
    3f8e:	bb 1f       	adc	r27, r27
    3f90:	26 17       	cp	r18, r22
    3f92:	37 07       	cpc	r19, r23
    3f94:	48 07       	cpc	r20, r24
    3f96:	ab 07       	cpc	r26, r27
    3f98:	b0 e8       	ldi	r27, 0x80	; 128
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <__divsf3_pse+0x56>
    3f9c:	bb 0b       	sbc	r27, r27
    3f9e:	80 2d       	mov	r24, r0
    3fa0:	bf 01       	movw	r22, r30
    3fa2:	ff 27       	eor	r31, r31
    3fa4:	93 58       	subi	r25, 0x83	; 131
    3fa6:	5f 4f       	sbci	r21, 0xFF	; 255
    3fa8:	3a f0       	brmi	.+14     	; 0x3fb8 <__divsf3_pse+0x70>
    3faa:	9e 3f       	cpi	r25, 0xFE	; 254
    3fac:	51 05       	cpc	r21, r1
    3fae:	78 f0       	brcs	.+30     	; 0x3fce <__divsf3_pse+0x86>
    3fb0:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__fp_inf>
    3fb4:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__fp_szero>
    3fb8:	5f 3f       	cpi	r21, 0xFF	; 255
    3fba:	e4 f3       	brlt	.-8      	; 0x3fb4 <__divsf3_pse+0x6c>
    3fbc:	98 3e       	cpi	r25, 0xE8	; 232
    3fbe:	d4 f3       	brlt	.-12     	; 0x3fb4 <__divsf3_pse+0x6c>
    3fc0:	86 95       	lsr	r24
    3fc2:	77 95       	ror	r23
    3fc4:	67 95       	ror	r22
    3fc6:	b7 95       	ror	r27
    3fc8:	f7 95       	ror	r31
    3fca:	9f 5f       	subi	r25, 0xFF	; 255
    3fcc:	c9 f7       	brne	.-14     	; 0x3fc0 <__divsf3_pse+0x78>
    3fce:	88 0f       	add	r24, r24
    3fd0:	91 1d       	adc	r25, r1
    3fd2:	96 95       	lsr	r25
    3fd4:	87 95       	ror	r24
    3fd6:	97 f9       	bld	r25, 7
    3fd8:	08 95       	ret
    3fda:	e1 e0       	ldi	r30, 0x01	; 1
    3fdc:	66 0f       	add	r22, r22
    3fde:	77 1f       	adc	r23, r23
    3fe0:	88 1f       	adc	r24, r24
    3fe2:	bb 1f       	adc	r27, r27
    3fe4:	62 17       	cp	r22, r18
    3fe6:	73 07       	cpc	r23, r19
    3fe8:	84 07       	cpc	r24, r20
    3fea:	ba 07       	cpc	r27, r26
    3fec:	20 f0       	brcs	.+8      	; 0x3ff6 <__divsf3_pse+0xae>
    3fee:	62 1b       	sub	r22, r18
    3ff0:	73 0b       	sbc	r23, r19
    3ff2:	84 0b       	sbc	r24, r20
    3ff4:	ba 0b       	sbc	r27, r26
    3ff6:	ee 1f       	adc	r30, r30
    3ff8:	88 f7       	brcc	.-30     	; 0x3fdc <__divsf3_pse+0x94>
    3ffa:	e0 95       	com	r30
    3ffc:	08 95       	ret

00003ffe <__fixunssfsi>:
    3ffe:	0e 94 bf 20 	call	0x417e	; 0x417e <__fp_splitA>
    4002:	88 f0       	brcs	.+34     	; 0x4026 <__fixunssfsi+0x28>
    4004:	9f 57       	subi	r25, 0x7F	; 127
    4006:	98 f0       	brcs	.+38     	; 0x402e <__fixunssfsi+0x30>
    4008:	b9 2f       	mov	r27, r25
    400a:	99 27       	eor	r25, r25
    400c:	b7 51       	subi	r27, 0x17	; 23
    400e:	b0 f0       	brcs	.+44     	; 0x403c <__fixunssfsi+0x3e>
    4010:	e1 f0       	breq	.+56     	; 0x404a <__fixunssfsi+0x4c>
    4012:	66 0f       	add	r22, r22
    4014:	77 1f       	adc	r23, r23
    4016:	88 1f       	adc	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	1a f0       	brmi	.+6      	; 0x4022 <__fixunssfsi+0x24>
    401c:	ba 95       	dec	r27
    401e:	c9 f7       	brne	.-14     	; 0x4012 <__fixunssfsi+0x14>
    4020:	14 c0       	rjmp	.+40     	; 0x404a <__fixunssfsi+0x4c>
    4022:	b1 30       	cpi	r27, 0x01	; 1
    4024:	91 f0       	breq	.+36     	; 0x404a <__fixunssfsi+0x4c>
    4026:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <__fp_zero>
    402a:	b1 e0       	ldi	r27, 0x01	; 1
    402c:	08 95       	ret
    402e:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <__fp_zero>
    4032:	67 2f       	mov	r22, r23
    4034:	78 2f       	mov	r23, r24
    4036:	88 27       	eor	r24, r24
    4038:	b8 5f       	subi	r27, 0xF8	; 248
    403a:	39 f0       	breq	.+14     	; 0x404a <__fixunssfsi+0x4c>
    403c:	b9 3f       	cpi	r27, 0xF9	; 249
    403e:	cc f3       	brlt	.-14     	; 0x4032 <__fixunssfsi+0x34>
    4040:	86 95       	lsr	r24
    4042:	77 95       	ror	r23
    4044:	67 95       	ror	r22
    4046:	b3 95       	inc	r27
    4048:	d9 f7       	brne	.-10     	; 0x4040 <__fixunssfsi+0x42>
    404a:	3e f4       	brtc	.+14     	; 0x405a <__fixunssfsi+0x5c>
    404c:	90 95       	com	r25
    404e:	80 95       	com	r24
    4050:	70 95       	com	r23
    4052:	61 95       	neg	r22
    4054:	7f 4f       	sbci	r23, 0xFF	; 255
    4056:	8f 4f       	sbci	r24, 0xFF	; 255
    4058:	9f 4f       	sbci	r25, 0xFF	; 255
    405a:	08 95       	ret

0000405c <__floatunsisf>:
    405c:	e8 94       	clt
    405e:	09 c0       	rjmp	.+18     	; 0x4072 <__floatsisf+0x12>

00004060 <__floatsisf>:
    4060:	97 fb       	bst	r25, 7
    4062:	3e f4       	brtc	.+14     	; 0x4072 <__floatsisf+0x12>
    4064:	90 95       	com	r25
    4066:	80 95       	com	r24
    4068:	70 95       	com	r23
    406a:	61 95       	neg	r22
    406c:	7f 4f       	sbci	r23, 0xFF	; 255
    406e:	8f 4f       	sbci	r24, 0xFF	; 255
    4070:	9f 4f       	sbci	r25, 0xFF	; 255
    4072:	99 23       	and	r25, r25
    4074:	a9 f0       	breq	.+42     	; 0x40a0 <__floatsisf+0x40>
    4076:	f9 2f       	mov	r31, r25
    4078:	96 e9       	ldi	r25, 0x96	; 150
    407a:	bb 27       	eor	r27, r27
    407c:	93 95       	inc	r25
    407e:	f6 95       	lsr	r31
    4080:	87 95       	ror	r24
    4082:	77 95       	ror	r23
    4084:	67 95       	ror	r22
    4086:	b7 95       	ror	r27
    4088:	f1 11       	cpse	r31, r1
    408a:	f8 cf       	rjmp	.-16     	; 0x407c <__floatsisf+0x1c>
    408c:	fa f4       	brpl	.+62     	; 0x40cc <__floatsisf+0x6c>
    408e:	bb 0f       	add	r27, r27
    4090:	11 f4       	brne	.+4      	; 0x4096 <__floatsisf+0x36>
    4092:	60 ff       	sbrs	r22, 0
    4094:	1b c0       	rjmp	.+54     	; 0x40cc <__floatsisf+0x6c>
    4096:	6f 5f       	subi	r22, 0xFF	; 255
    4098:	7f 4f       	sbci	r23, 0xFF	; 255
    409a:	8f 4f       	sbci	r24, 0xFF	; 255
    409c:	9f 4f       	sbci	r25, 0xFF	; 255
    409e:	16 c0       	rjmp	.+44     	; 0x40cc <__floatsisf+0x6c>
    40a0:	88 23       	and	r24, r24
    40a2:	11 f0       	breq	.+4      	; 0x40a8 <__floatsisf+0x48>
    40a4:	96 e9       	ldi	r25, 0x96	; 150
    40a6:	11 c0       	rjmp	.+34     	; 0x40ca <__floatsisf+0x6a>
    40a8:	77 23       	and	r23, r23
    40aa:	21 f0       	breq	.+8      	; 0x40b4 <__floatsisf+0x54>
    40ac:	9e e8       	ldi	r25, 0x8E	; 142
    40ae:	87 2f       	mov	r24, r23
    40b0:	76 2f       	mov	r23, r22
    40b2:	05 c0       	rjmp	.+10     	; 0x40be <__floatsisf+0x5e>
    40b4:	66 23       	and	r22, r22
    40b6:	71 f0       	breq	.+28     	; 0x40d4 <__floatsisf+0x74>
    40b8:	96 e8       	ldi	r25, 0x86	; 134
    40ba:	86 2f       	mov	r24, r22
    40bc:	70 e0       	ldi	r23, 0x00	; 0
    40be:	60 e0       	ldi	r22, 0x00	; 0
    40c0:	2a f0       	brmi	.+10     	; 0x40cc <__floatsisf+0x6c>
    40c2:	9a 95       	dec	r25
    40c4:	66 0f       	add	r22, r22
    40c6:	77 1f       	adc	r23, r23
    40c8:	88 1f       	adc	r24, r24
    40ca:	da f7       	brpl	.-10     	; 0x40c2 <__floatsisf+0x62>
    40cc:	88 0f       	add	r24, r24
    40ce:	96 95       	lsr	r25
    40d0:	87 95       	ror	r24
    40d2:	97 f9       	bld	r25, 7
    40d4:	08 95       	ret

000040d6 <__fp_cmp>:
    40d6:	99 0f       	add	r25, r25
    40d8:	00 08       	sbc	r0, r0
    40da:	55 0f       	add	r21, r21
    40dc:	aa 0b       	sbc	r26, r26
    40de:	e0 e8       	ldi	r30, 0x80	; 128
    40e0:	fe ef       	ldi	r31, 0xFE	; 254
    40e2:	16 16       	cp	r1, r22
    40e4:	17 06       	cpc	r1, r23
    40e6:	e8 07       	cpc	r30, r24
    40e8:	f9 07       	cpc	r31, r25
    40ea:	c0 f0       	brcs	.+48     	; 0x411c <__fp_cmp+0x46>
    40ec:	12 16       	cp	r1, r18
    40ee:	13 06       	cpc	r1, r19
    40f0:	e4 07       	cpc	r30, r20
    40f2:	f5 07       	cpc	r31, r21
    40f4:	98 f0       	brcs	.+38     	; 0x411c <__fp_cmp+0x46>
    40f6:	62 1b       	sub	r22, r18
    40f8:	73 0b       	sbc	r23, r19
    40fa:	84 0b       	sbc	r24, r20
    40fc:	95 0b       	sbc	r25, r21
    40fe:	39 f4       	brne	.+14     	; 0x410e <__fp_cmp+0x38>
    4100:	0a 26       	eor	r0, r26
    4102:	61 f0       	breq	.+24     	; 0x411c <__fp_cmp+0x46>
    4104:	23 2b       	or	r18, r19
    4106:	24 2b       	or	r18, r20
    4108:	25 2b       	or	r18, r21
    410a:	21 f4       	brne	.+8      	; 0x4114 <__fp_cmp+0x3e>
    410c:	08 95       	ret
    410e:	0a 26       	eor	r0, r26
    4110:	09 f4       	brne	.+2      	; 0x4114 <__fp_cmp+0x3e>
    4112:	a1 40       	sbci	r26, 0x01	; 1
    4114:	a6 95       	lsr	r26
    4116:	8f ef       	ldi	r24, 0xFF	; 255
    4118:	81 1d       	adc	r24, r1
    411a:	81 1d       	adc	r24, r1
    411c:	08 95       	ret

0000411e <__fp_inf>:
    411e:	97 f9       	bld	r25, 7
    4120:	9f 67       	ori	r25, 0x7F	; 127
    4122:	80 e8       	ldi	r24, 0x80	; 128
    4124:	70 e0       	ldi	r23, 0x00	; 0
    4126:	60 e0       	ldi	r22, 0x00	; 0
    4128:	08 95       	ret

0000412a <__fp_nan>:
    412a:	9f ef       	ldi	r25, 0xFF	; 255
    412c:	80 ec       	ldi	r24, 0xC0	; 192
    412e:	08 95       	ret

00004130 <__fp_pscA>:
    4130:	00 24       	eor	r0, r0
    4132:	0a 94       	dec	r0
    4134:	16 16       	cp	r1, r22
    4136:	17 06       	cpc	r1, r23
    4138:	18 06       	cpc	r1, r24
    413a:	09 06       	cpc	r0, r25
    413c:	08 95       	ret

0000413e <__fp_pscB>:
    413e:	00 24       	eor	r0, r0
    4140:	0a 94       	dec	r0
    4142:	12 16       	cp	r1, r18
    4144:	13 06       	cpc	r1, r19
    4146:	14 06       	cpc	r1, r20
    4148:	05 06       	cpc	r0, r21
    414a:	08 95       	ret

0000414c <__fp_round>:
    414c:	09 2e       	mov	r0, r25
    414e:	03 94       	inc	r0
    4150:	00 0c       	add	r0, r0
    4152:	11 f4       	brne	.+4      	; 0x4158 <__fp_round+0xc>
    4154:	88 23       	and	r24, r24
    4156:	52 f0       	brmi	.+20     	; 0x416c <__fp_round+0x20>
    4158:	bb 0f       	add	r27, r27
    415a:	40 f4       	brcc	.+16     	; 0x416c <__fp_round+0x20>
    415c:	bf 2b       	or	r27, r31
    415e:	11 f4       	brne	.+4      	; 0x4164 <__fp_round+0x18>
    4160:	60 ff       	sbrs	r22, 0
    4162:	04 c0       	rjmp	.+8      	; 0x416c <__fp_round+0x20>
    4164:	6f 5f       	subi	r22, 0xFF	; 255
    4166:	7f 4f       	sbci	r23, 0xFF	; 255
    4168:	8f 4f       	sbci	r24, 0xFF	; 255
    416a:	9f 4f       	sbci	r25, 0xFF	; 255
    416c:	08 95       	ret

0000416e <__fp_split3>:
    416e:	57 fd       	sbrc	r21, 7
    4170:	90 58       	subi	r25, 0x80	; 128
    4172:	44 0f       	add	r20, r20
    4174:	55 1f       	adc	r21, r21
    4176:	59 f0       	breq	.+22     	; 0x418e <__fp_splitA+0x10>
    4178:	5f 3f       	cpi	r21, 0xFF	; 255
    417a:	71 f0       	breq	.+28     	; 0x4198 <__fp_splitA+0x1a>
    417c:	47 95       	ror	r20

0000417e <__fp_splitA>:
    417e:	88 0f       	add	r24, r24
    4180:	97 fb       	bst	r25, 7
    4182:	99 1f       	adc	r25, r25
    4184:	61 f0       	breq	.+24     	; 0x419e <__fp_splitA+0x20>
    4186:	9f 3f       	cpi	r25, 0xFF	; 255
    4188:	79 f0       	breq	.+30     	; 0x41a8 <__fp_splitA+0x2a>
    418a:	87 95       	ror	r24
    418c:	08 95       	ret
    418e:	12 16       	cp	r1, r18
    4190:	13 06       	cpc	r1, r19
    4192:	14 06       	cpc	r1, r20
    4194:	55 1f       	adc	r21, r21
    4196:	f2 cf       	rjmp	.-28     	; 0x417c <__fp_split3+0xe>
    4198:	46 95       	lsr	r20
    419a:	f1 df       	rcall	.-30     	; 0x417e <__fp_splitA>
    419c:	08 c0       	rjmp	.+16     	; 0x41ae <__fp_splitA+0x30>
    419e:	16 16       	cp	r1, r22
    41a0:	17 06       	cpc	r1, r23
    41a2:	18 06       	cpc	r1, r24
    41a4:	99 1f       	adc	r25, r25
    41a6:	f1 cf       	rjmp	.-30     	; 0x418a <__fp_splitA+0xc>
    41a8:	86 95       	lsr	r24
    41aa:	71 05       	cpc	r23, r1
    41ac:	61 05       	cpc	r22, r1
    41ae:	08 94       	sec
    41b0:	08 95       	ret

000041b2 <__fp_zero>:
    41b2:	e8 94       	clt

000041b4 <__fp_szero>:
    41b4:	bb 27       	eor	r27, r27
    41b6:	66 27       	eor	r22, r22
    41b8:	77 27       	eor	r23, r23
    41ba:	cb 01       	movw	r24, r22
    41bc:	97 f9       	bld	r25, 7
    41be:	08 95       	ret

000041c0 <__gesf2>:
    41c0:	0e 94 6b 20 	call	0x40d6	; 0x40d6 <__fp_cmp>
    41c4:	08 f4       	brcc	.+2      	; 0x41c8 <__gesf2+0x8>
    41c6:	8f ef       	ldi	r24, 0xFF	; 255
    41c8:	08 95       	ret

000041ca <__mulsf3>:
    41ca:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <__mulsf3x>
    41ce:	0c 94 a6 20 	jmp	0x414c	; 0x414c <__fp_round>
    41d2:	0e 94 98 20 	call	0x4130	; 0x4130 <__fp_pscA>
    41d6:	38 f0       	brcs	.+14     	; 0x41e6 <__mulsf3+0x1c>
    41d8:	0e 94 9f 20 	call	0x413e	; 0x413e <__fp_pscB>
    41dc:	20 f0       	brcs	.+8      	; 0x41e6 <__mulsf3+0x1c>
    41de:	95 23       	and	r25, r21
    41e0:	11 f0       	breq	.+4      	; 0x41e6 <__mulsf3+0x1c>
    41e2:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__fp_inf>
    41e6:	0c 94 95 20 	jmp	0x412a	; 0x412a <__fp_nan>
    41ea:	11 24       	eor	r1, r1
    41ec:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__fp_szero>

000041f0 <__mulsf3x>:
    41f0:	0e 94 b7 20 	call	0x416e	; 0x416e <__fp_split3>
    41f4:	70 f3       	brcs	.-36     	; 0x41d2 <__mulsf3+0x8>

000041f6 <__mulsf3_pse>:
    41f6:	95 9f       	mul	r25, r21
    41f8:	c1 f3       	breq	.-16     	; 0x41ea <__mulsf3+0x20>
    41fa:	95 0f       	add	r25, r21
    41fc:	50 e0       	ldi	r21, 0x00	; 0
    41fe:	55 1f       	adc	r21, r21
    4200:	62 9f       	mul	r22, r18
    4202:	f0 01       	movw	r30, r0
    4204:	72 9f       	mul	r23, r18
    4206:	bb 27       	eor	r27, r27
    4208:	f0 0d       	add	r31, r0
    420a:	b1 1d       	adc	r27, r1
    420c:	63 9f       	mul	r22, r19
    420e:	aa 27       	eor	r26, r26
    4210:	f0 0d       	add	r31, r0
    4212:	b1 1d       	adc	r27, r1
    4214:	aa 1f       	adc	r26, r26
    4216:	64 9f       	mul	r22, r20
    4218:	66 27       	eor	r22, r22
    421a:	b0 0d       	add	r27, r0
    421c:	a1 1d       	adc	r26, r1
    421e:	66 1f       	adc	r22, r22
    4220:	82 9f       	mul	r24, r18
    4222:	22 27       	eor	r18, r18
    4224:	b0 0d       	add	r27, r0
    4226:	a1 1d       	adc	r26, r1
    4228:	62 1f       	adc	r22, r18
    422a:	73 9f       	mul	r23, r19
    422c:	b0 0d       	add	r27, r0
    422e:	a1 1d       	adc	r26, r1
    4230:	62 1f       	adc	r22, r18
    4232:	83 9f       	mul	r24, r19
    4234:	a0 0d       	add	r26, r0
    4236:	61 1d       	adc	r22, r1
    4238:	22 1f       	adc	r18, r18
    423a:	74 9f       	mul	r23, r20
    423c:	33 27       	eor	r19, r19
    423e:	a0 0d       	add	r26, r0
    4240:	61 1d       	adc	r22, r1
    4242:	23 1f       	adc	r18, r19
    4244:	84 9f       	mul	r24, r20
    4246:	60 0d       	add	r22, r0
    4248:	21 1d       	adc	r18, r1
    424a:	82 2f       	mov	r24, r18
    424c:	76 2f       	mov	r23, r22
    424e:	6a 2f       	mov	r22, r26
    4250:	11 24       	eor	r1, r1
    4252:	9f 57       	subi	r25, 0x7F	; 127
    4254:	50 40       	sbci	r21, 0x00	; 0
    4256:	9a f0       	brmi	.+38     	; 0x427e <__mulsf3_pse+0x88>
    4258:	f1 f0       	breq	.+60     	; 0x4296 <__mulsf3_pse+0xa0>
    425a:	88 23       	and	r24, r24
    425c:	4a f0       	brmi	.+18     	; 0x4270 <__mulsf3_pse+0x7a>
    425e:	ee 0f       	add	r30, r30
    4260:	ff 1f       	adc	r31, r31
    4262:	bb 1f       	adc	r27, r27
    4264:	66 1f       	adc	r22, r22
    4266:	77 1f       	adc	r23, r23
    4268:	88 1f       	adc	r24, r24
    426a:	91 50       	subi	r25, 0x01	; 1
    426c:	50 40       	sbci	r21, 0x00	; 0
    426e:	a9 f7       	brne	.-22     	; 0x425a <__mulsf3_pse+0x64>
    4270:	9e 3f       	cpi	r25, 0xFE	; 254
    4272:	51 05       	cpc	r21, r1
    4274:	80 f0       	brcs	.+32     	; 0x4296 <__mulsf3_pse+0xa0>
    4276:	0c 94 8f 20 	jmp	0x411e	; 0x411e <__fp_inf>
    427a:	0c 94 da 20 	jmp	0x41b4	; 0x41b4 <__fp_szero>
    427e:	5f 3f       	cpi	r21, 0xFF	; 255
    4280:	e4 f3       	brlt	.-8      	; 0x427a <__mulsf3_pse+0x84>
    4282:	98 3e       	cpi	r25, 0xE8	; 232
    4284:	d4 f3       	brlt	.-12     	; 0x427a <__mulsf3_pse+0x84>
    4286:	86 95       	lsr	r24
    4288:	77 95       	ror	r23
    428a:	67 95       	ror	r22
    428c:	b7 95       	ror	r27
    428e:	f7 95       	ror	r31
    4290:	e7 95       	ror	r30
    4292:	9f 5f       	subi	r25, 0xFF	; 255
    4294:	c1 f7       	brne	.-16     	; 0x4286 <__mulsf3_pse+0x90>
    4296:	fe 2b       	or	r31, r30
    4298:	88 0f       	add	r24, r24
    429a:	91 1d       	adc	r25, r1
    429c:	96 95       	lsr	r25
    429e:	87 95       	ror	r24
    42a0:	97 f9       	bld	r25, 7
    42a2:	08 95       	ret

000042a4 <__divmodhi4>:
    42a4:	97 fb       	bst	r25, 7
    42a6:	07 2e       	mov	r0, r23
    42a8:	16 f4       	brtc	.+4      	; 0x42ae <__divmodhi4+0xa>
    42aa:	00 94       	com	r0
    42ac:	07 d0       	rcall	.+14     	; 0x42bc <__divmodhi4_neg1>
    42ae:	77 fd       	sbrc	r23, 7
    42b0:	09 d0       	rcall	.+18     	; 0x42c4 <__divmodhi4_neg2>
    42b2:	0e 94 93 21 	call	0x4326	; 0x4326 <__udivmodhi4>
    42b6:	07 fc       	sbrc	r0, 7
    42b8:	05 d0       	rcall	.+10     	; 0x42c4 <__divmodhi4_neg2>
    42ba:	3e f4       	brtc	.+14     	; 0x42ca <__divmodhi4_exit>

000042bc <__divmodhi4_neg1>:
    42bc:	90 95       	com	r25
    42be:	81 95       	neg	r24
    42c0:	9f 4f       	sbci	r25, 0xFF	; 255
    42c2:	08 95       	ret

000042c4 <__divmodhi4_neg2>:
    42c4:	70 95       	com	r23
    42c6:	61 95       	neg	r22
    42c8:	7f 4f       	sbci	r23, 0xFF	; 255

000042ca <__divmodhi4_exit>:
    42ca:	08 95       	ret

000042cc <__udivmodsi4>:
    42cc:	a1 e2       	ldi	r26, 0x21	; 33
    42ce:	1a 2e       	mov	r1, r26
    42d0:	aa 1b       	sub	r26, r26
    42d2:	bb 1b       	sub	r27, r27
    42d4:	fd 01       	movw	r30, r26
    42d6:	0d c0       	rjmp	.+26     	; 0x42f2 <__udivmodsi4_ep>

000042d8 <__udivmodsi4_loop>:
    42d8:	aa 1f       	adc	r26, r26
    42da:	bb 1f       	adc	r27, r27
    42dc:	ee 1f       	adc	r30, r30
    42de:	ff 1f       	adc	r31, r31
    42e0:	a2 17       	cp	r26, r18
    42e2:	b3 07       	cpc	r27, r19
    42e4:	e4 07       	cpc	r30, r20
    42e6:	f5 07       	cpc	r31, r21
    42e8:	20 f0       	brcs	.+8      	; 0x42f2 <__udivmodsi4_ep>
    42ea:	a2 1b       	sub	r26, r18
    42ec:	b3 0b       	sbc	r27, r19
    42ee:	e4 0b       	sbc	r30, r20
    42f0:	f5 0b       	sbc	r31, r21

000042f2 <__udivmodsi4_ep>:
    42f2:	66 1f       	adc	r22, r22
    42f4:	77 1f       	adc	r23, r23
    42f6:	88 1f       	adc	r24, r24
    42f8:	99 1f       	adc	r25, r25
    42fa:	1a 94       	dec	r1
    42fc:	69 f7       	brne	.-38     	; 0x42d8 <__udivmodsi4_loop>
    42fe:	60 95       	com	r22
    4300:	70 95       	com	r23
    4302:	80 95       	com	r24
    4304:	90 95       	com	r25
    4306:	9b 01       	movw	r18, r22
    4308:	ac 01       	movw	r20, r24
    430a:	bd 01       	movw	r22, r26
    430c:	cf 01       	movw	r24, r30
    430e:	08 95       	ret

00004310 <__muluhisi3>:
    4310:	0e 94 a7 21 	call	0x434e	; 0x434e <__umulhisi3>
    4314:	a5 9f       	mul	r26, r21
    4316:	90 0d       	add	r25, r0
    4318:	b4 9f       	mul	r27, r20
    431a:	90 0d       	add	r25, r0
    431c:	a4 9f       	mul	r26, r20
    431e:	80 0d       	add	r24, r0
    4320:	91 1d       	adc	r25, r1
    4322:	11 24       	eor	r1, r1
    4324:	08 95       	ret

00004326 <__udivmodhi4>:
    4326:	aa 1b       	sub	r26, r26
    4328:	bb 1b       	sub	r27, r27
    432a:	51 e1       	ldi	r21, 0x11	; 17
    432c:	07 c0       	rjmp	.+14     	; 0x433c <__udivmodhi4_ep>

0000432e <__udivmodhi4_loop>:
    432e:	aa 1f       	adc	r26, r26
    4330:	bb 1f       	adc	r27, r27
    4332:	a6 17       	cp	r26, r22
    4334:	b7 07       	cpc	r27, r23
    4336:	10 f0       	brcs	.+4      	; 0x433c <__udivmodhi4_ep>
    4338:	a6 1b       	sub	r26, r22
    433a:	b7 0b       	sbc	r27, r23

0000433c <__udivmodhi4_ep>:
    433c:	88 1f       	adc	r24, r24
    433e:	99 1f       	adc	r25, r25
    4340:	5a 95       	dec	r21
    4342:	a9 f7       	brne	.-22     	; 0x432e <__udivmodhi4_loop>
    4344:	80 95       	com	r24
    4346:	90 95       	com	r25
    4348:	bc 01       	movw	r22, r24
    434a:	cd 01       	movw	r24, r26
    434c:	08 95       	ret

0000434e <__umulhisi3>:
    434e:	a2 9f       	mul	r26, r18
    4350:	b0 01       	movw	r22, r0
    4352:	b3 9f       	mul	r27, r19
    4354:	c0 01       	movw	r24, r0
    4356:	a3 9f       	mul	r26, r19
    4358:	70 0d       	add	r23, r0
    435a:	81 1d       	adc	r24, r1
    435c:	11 24       	eor	r1, r1
    435e:	91 1d       	adc	r25, r1
    4360:	b2 9f       	mul	r27, r18
    4362:	70 0d       	add	r23, r0
    4364:	81 1d       	adc	r24, r1
    4366:	11 24       	eor	r1, r1
    4368:	91 1d       	adc	r25, r1
    436a:	08 95       	ret

0000436c <_exit>:
    436c:	f8 94       	cli

0000436e <__stop_program>:
    436e:	ff cf       	rjmp	.-2      	; 0x436e <__stop_program>
